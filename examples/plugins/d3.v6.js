// https://d3js.org v6.2.0 Copyright 2020 Mike Bostock
;(function (global, factory) {
  // @ts-expect-error TS(2304) FIXME: Cannot find name 'exports'.
  typeof exports === 'object' && typeof module !== 'undefined'
    ? // @ts-expect-error TS(2304) FIXME: Cannot find name 'exports'.
      factory(exports)
    : // @ts-expect-error TS(2304) FIXME: Cannot find name 'define'.
    typeof define === 'function' && define.amd
    ? // @ts-expect-error TS(2304) FIXME: Cannot find name 'define'.
      define(['exports'], factory)
    : ((global = typeof globalThis !== 'undefined' ? globalThis : global || self),
      // @ts-expect-error TS(7017) FIXME: Element implicitly has an 'any' type because type ... Remove this comment to see the full error message
      factory((global.d3 = global.d3 || {})))
  // @ts-expect-error TS(7006) FIXME: Parameter 'exports' implicitly has an 'any' type.
})(this, function (exports) {
  'use strict'

  const version = '6.2.0'

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function ascending(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'f' implicitly has an 'any' type.
  function bisector(f) {
    let delta = f
    let compare = f

    if (f.length === 1) {
      // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
      delta = (d, x) => f(d) - x
      compare = ascendingComparator(f)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    function left(a, x, lo, hi) {
      if (lo == null) lo = 0
      if (hi == null) hi = a.length
      while (lo < hi) {
        const mid = (lo + hi) >>> 1
        if (compare(a[mid], x) < 0) lo = mid + 1
        else hi = mid
      }
      return lo
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    function right(a, x, lo, hi) {
      if (lo == null) lo = 0
      if (hi == null) hi = a.length
      while (lo < hi) {
        const mid = (lo + hi) >>> 1
        if (compare(a[mid], x) > 0) hi = mid
        else lo = mid + 1
      }
      return lo
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    function center(a, x, lo, hi) {
      if (lo == null) lo = 0
      if (hi == null) hi = a.length
      const i = left(a, x, lo, hi - 1)
      return i > lo && delta(a[i - 1], x) > -delta(a[i], x) ? i - 1 : i
    }

    return { left, center, right }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'f' implicitly has an 'any' type.
  function ascendingComparator(f) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    return (d, x) => ascending(f(d), x)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function number(x) {
    return x === null ? NaN : +x
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function* numbers(values, valueof) {
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          yield value
        }
      }
    } else {
      let index = -1
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          yield value
        }
      }
    }
  }

  const ascendingBisect = bisector(ascending)
  const bisectRight = ascendingBisect.right
  const bisectLeft = ascendingBisect.left
  const bisectCenter = bisector(number).center

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function count(values, valueof) {
    let count = 0
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          ++count
        }
      }
    } else {
      let index = -1
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          ++count
        }
      }
    }
    return count
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'array' implicitly has an 'any' type.
  function length(array) {
    return array.length | 0
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'length' implicitly has an 'any' type.
  function empty(length) {
    return !(length > 0)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function arrayify(values) {
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return typeof values !== 'object' || 'length' in values ? values : Array.from(values)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'reduce' implicitly has an 'any' type.
  function reducer(reduce) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
    return values => reduce(...values)
  }

  // @ts-expect-error TS(7019) FIXME: Rest parameter 'values' implicitly has an 'any[]' ... Remove this comment to see the full error message
  function cross(...values) {
    const reduce = typeof values[values.length - 1] === 'function' && reducer(values.pop())
    values = values.map(arrayify)
    const lengths = values.map(length)
    const j = values.length - 1
    // @ts-expect-error TS(2550) FIXME: Property 'fill' does not exist on type 'any[]'. Do... Remove this comment to see the full error message
    const index = new Array(j + 1).fill(0)
    // @ts-expect-error TS(7034) FIXME: Variable 'product' implicitly has type 'any[]' in ... Remove this comment to see the full error message
    const product = []
    // @ts-expect-error TS(7005) FIXME: Variable 'product' implicitly has an 'any[]' type.
    if (j < 0 || lengths.some(empty)) return product
    while (true) {
      // @ts-expect-error TS(7006) FIXME: Parameter 'j' implicitly has an 'any' type.
      product.push(index.map((j, i) => values[i][j]))
      let i = j
      while (++index[i] === lengths[i]) {
        if (i === 0) return reduce ? product.map(reduce) : product
        index[i--] = 0
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function cumsum(values, valueof) {
    let sum = 0,
      index = 0
    return Float64Array.from(
      values,
      // @ts-expect-error TS(2571) FIXME: Object is of type 'unknown'.
      valueof === undefined ? v => (sum += +v || 0) : v => (sum += +valueof(v, index++, values) || 0)
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function descending(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function variance(values, valueof) {
    let count = 0
    let delta
    let mean = 0
    let sum = 0
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          delta = value - mean
          mean += delta / ++count
          sum += delta * (value - mean)
        }
      }
    } else {
      let index = -1
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          delta = value - mean
          mean += delta / ++count
          sum += delta * (value - mean)
        }
      }
    }
    if (count > 1) return sum / (count - 1)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function deviation(values, valueof) {
    const v = variance(values, valueof)
    return v ? Math.sqrt(v) : v
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function extent(values, valueof) {
    let min
    let max
    if (valueof === undefined) {
      for (const value of values) {
        if (value != null) {
          if (min === undefined) {
            if (value >= value) min = max = value
          } else {
            if (min > value) min = value
            if (max < value) max = value
          }
        }
      }
    } else {
      let index = -1
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null) {
          if (min === undefined) {
            if (value >= value) min = max = value
          } else {
            if (min > value) min = value
            if (max < value) max = value
          }
        }
      }
    }
    return [min, max]
  }

  // https://github.com/python/cpython/blob/a74eea238f5baba15797e2e8b570d153bc8690a7/Modules/mathmodule.c#L1423
  class Adder {
    constructor() {
      // @ts-expect-error TS(2339) FIXME: Property '_partials' does not exist on type 'Adder... Remove this comment to see the full error message
      this._partials = new Float64Array(32)
      // @ts-expect-error TS(2339) FIXME: Property '_n' does not exist on type 'Adder'.
      this._n = 0
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    add(x) {
      // @ts-expect-error TS(2339) FIXME: Property '_partials' does not exist on type 'Adder... Remove this comment to see the full error message
      const p = this._partials
      let i = 0
      // @ts-expect-error TS(2339) FIXME: Property '_n' does not exist on type 'Adder'.
      for (let j = 0; j < this._n && j < 32; j++) {
        const y = p[j],
          hi = x + y,
          lo = Math.abs(x) < Math.abs(y) ? x - (hi - y) : y - (hi - x)
        if (lo) p[i++] = lo
        x = hi
      }
      p[i] = x
      // @ts-expect-error TS(2339) FIXME: Property '_n' does not exist on type 'Adder'.
      this._n = i + 1
      return this
    }
    valueOf() {
      // @ts-expect-error TS(2339) FIXME: Property '_partials' does not exist on type 'Adder... Remove this comment to see the full error message
      const p = this._partials
      // @ts-expect-error TS(2339) FIXME: Property '_n' does not exist on type 'Adder'.
      let n = this._n,
        x,
        y,
        lo,
        hi = 0
      if (n > 0) {
        hi = p[--n]
        while (n > 0) {
          x = hi
          y = p[--n]
          hi = x + y
          lo = y - (hi - x)
          if (lo) break
        }
        // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
        if (n > 0 && ((lo < 0 && p[n - 1] < 0) || (lo > 0 && p[n - 1] > 0))) {
          // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
          y = lo * 2
          x = hi + y
          if (y == x - hi) hi = x
        }
      }
      return hi
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function fsum(values, valueof) {
    const adder = new Adder()
    if (valueof === undefined) {
      for (let value of values) {
        if ((value = +value)) {
          adder.add(value)
        }
      }
    } else {
      let index = -1
      for (let value of values) {
        if ((value = +valueof(value, ++index, values))) {
          adder.add(value)
        }
      }
    }
    return +adder
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function identity(x) {
    return x
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function group(values, ...keys) {
    return nest(values, identity, identity, keys)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function groups(values, ...keys) {
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return nest(values, Array.from, identity, keys)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function rollup(values, reduce, ...keys) {
    return nest(values, identity, reduce, keys)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function rollups(values, reduce, ...keys) {
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return nest(values, Array.from, reduce, keys)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function index(values, ...keys) {
    return nest(values, identity, unique, keys)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function indexes(values, ...keys) {
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return nest(values, Array.from, unique, keys)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function unique(values) {
    if (values.length !== 1) throw new Error('duplicate key')
    return values[0]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function nest(values, map, reduce, keys) {
    return (function regroup(values, i) {
      if (i >= keys.length) return reduce(values)
      // @ts-expect-error TS(2552) FIXME: Cannot find name 'Map'. Did you mean 'map'?
      const groups = new Map()
      const keyof = keys[i++]
      let index = -1
      for (const value of values) {
        const key = keyof(value, ++index, values)
        const group = groups.get(key)
        if (group) group.push(value)
        else groups.set(key, [value])
      }
      for (const [key, values] of groups) {
        groups.set(key, regroup(values, i))
      }
      return map(groups)
    })(values, 0)
  }

  const array = Array.prototype

  const slice = array.slice

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function constant(x) {
    return function () {
      return x
    }
  }

  const e10 = Math.sqrt(50),
    e5 = Math.sqrt(10),
    e2 = Math.sqrt(2)

  // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
  function ticks(start, stop, count) {
    let reverse,
      i = -1,
      n,
      ticks,
      step
    ;(stop = +stop), (start = +start), (count = +count)
    if (start === stop && count > 0) return [start]
    if ((reverse = stop < start)) (n = start), (start = stop), (stop = n)
    if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return []

    if (step > 0) {
      start = Math.ceil(start / step)
      stop = Math.floor(stop / step)
      ticks = new Array((n = Math.ceil(stop - start + 1)))
      while (++i < n) ticks[i] = (start + i) * step
    } else {
      step = -step
      start = Math.ceil(start * step)
      stop = Math.floor(stop * step)
      ticks = new Array((n = Math.ceil(stop - start + 1)))
      while (++i < n) ticks[i] = (start + i) / step
    }

    if (reverse) ticks.reverse()

    return ticks
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
  function tickIncrement(start, stop, count) {
    const step = (stop - start) / Math.max(0, count),
      power = Math.floor(Math.log(step) / Math.LN10),
      error = step / Math.pow(10, power)
    return power >= 0
      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
  function tickStep(start, stop, count) {
    let step0 = Math.abs(stop - start) / Math.max(0, count),
      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
      error = step0 / step1
    if (error >= e10) step1 *= 10
    else if (error >= e5) step1 *= 5
    else if (error >= e2) step1 *= 2
    return stop < start ? -step1 : step1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
  function nice(start, stop, count) {
    let prestep
    while (true) {
      const step = tickIncrement(start, stop, count)
      if (step === prestep || step === 0 || !isFinite(step)) {
        return [start, stop]
      } else if (step > 0) {
        start = Math.floor(start / step) * step
        stop = Math.ceil(stop / step) * step
      } else if (step < 0) {
        start = Math.ceil(start * step) / step
        stop = Math.floor(stop * step) / step
      }
      prestep = step
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function thresholdSturges(values) {
    // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
    return Math.ceil(Math.log(count(values)) / Math.LN2) + 1
  }

  function bin() {
    let value = identity,
      domain = extent,
      threshold = thresholdSturges

    // @ts-expect-error TS(7006) FIXME: Parameter 'data' implicitly has an 'any' type.
    function histogram(data) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      if (!Array.isArray(data)) data = Array.from(data)

      let i,
        n = data.length,
        x,
        values = new Array(n)

      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 3.
        values[i] = value(data[i], i, data)
      }

      // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
      let xz = domain(values),
        x0 = xz[0],
        x1 = xz[1],
        // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 3.
        tz = threshold(values, x0, x1)

      // Convert number of thresholds into uniform thresholds,
      // and nice the default domain accordingly.
      if (!Array.isArray(tz)) {
        tz = +tz
        if (domain === extent) [x0, x1] = nice(x0, x1, tz)
        // @ts-expect-error TS(2322) FIXME: Type 'any[]' is not assignable to type 'number'.
        tz = ticks(x0, x1, tz)
        // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        if (tz[tz.length - 1] === x1) tz.pop() // exclusive
      }

      // Remove any thresholds outside the domain.
      // @ts-expect-error TS(2339) FIXME: Property 'length' does not exist on type 'number'.
      let m = tz.length
      // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      while (tz[0] <= x0) tz.shift(), --m
      // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      while (tz[m - 1] > x1) tz.pop(), --m

      let bins = new Array(m + 1),
        bin

      // Initialize bins.
      for (i = 0; i <= m; ++i) {
        bin = bins[i] = []
        // @ts-expect-error TS(2339) FIXME: Property 'x0' does not exist on type 'never[]'.
        bin.x0 = i > 0 ? tz[i - 1] : x0
        // @ts-expect-error TS(2339) FIXME: Property 'x1' does not exist on type 'never[]'.
        bin.x1 = i < m ? tz[i] : x1
      }

      // Assign data to bins by value, ignoring any outside the domain.
      for (i = 0; i < n; ++i) {
        x = values[i]
        if (x0 <= x && x <= x1) {
          bins[bisectRight(tz, x, 0, m)].push(data[i])
        }
      }

      return bins
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    histogram.value = function (_) {
      return arguments.length ? ((value = typeof _ === 'function' ? _ : constant(_)), histogram) : value
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    histogram.domain = function (_) {
      return arguments.length ? ((domain = typeof _ === 'function' ? _ : constant([_[0], _[1]])), histogram) : domain
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    histogram.thresholds = function (_) {
      return arguments.length
        ? ((threshold = typeof _ === 'function' ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_)),
          histogram)
        : threshold
    }

    return histogram
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function max(values, valueof) {
    let max
    if (valueof === undefined) {
      for (const value of values) {
        if (value != null && (max < value || (max === undefined && value >= value))) {
          max = value
        }
      }
    } else {
      let index = -1
      for (let value of values) {
        if (
          (value = valueof(value, ++index, values)) != null &&
          (max < value || (max === undefined && value >= value))
        ) {
          max = value
        }
      }
    }
    return max
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function min(values, valueof) {
    let min
    if (valueof === undefined) {
      for (const value of values) {
        if (value != null && (min > value || (min === undefined && value >= value))) {
          min = value
        }
      }
    } else {
      let index = -1
      for (let value of values) {
        if (
          (value = valueof(value, ++index, values)) != null &&
          (min > value || (min === undefined && value >= value))
        ) {
          min = value
        }
      }
    }
    return min
  }

  // Based on https://github.com/mourner/quickselect
  // ISC license, Copyright 2018 Vladimir Agafonkin.
  // @ts-expect-error TS(7006) FIXME: Parameter 'array' implicitly has an 'any' type.
  function quickselect(array, k, left = 0, right = array.length - 1, compare = ascending) {
    while (right > left) {
      if (right - left > 600) {
        const n = right - left + 1
        const m = k - left + 1
        const z = Math.log(n)
        const s = 0.5 * Math.exp((2 * z) / 3)
        const sd = 0.5 * Math.sqrt((z * s * (n - s)) / n) * (m - n / 2 < 0 ? -1 : 1)
        const newLeft = Math.max(left, Math.floor(k - (m * s) / n + sd))
        const newRight = Math.min(right, Math.floor(k + ((n - m) * s) / n + sd))
        quickselect(array, k, newLeft, newRight, compare)
      }

      const t = array[k]
      let i = left
      let j = right

      swap(array, left, k)
      if (compare(array[right], t) > 0) swap(array, left, right)

      while (i < j) {
        swap(array, i, j), ++i, --j
        while (compare(array[i], t) < 0) ++i
        while (compare(array[j], t) > 0) --j
      }

      if (compare(array[left], t) === 0) swap(array, left, j)
      else ++j, swap(array, j, right)

      if (j <= k) left = j + 1
      if (k <= j) right = j - 1
    }
    return array
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'array' implicitly has an 'any' type.
  function swap(array, i, j) {
    const t = array[i]
    array[i] = array[j]
    array[j] = t
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function quantile(values, p, valueof) {
    // @ts-expect-error TS(2345) FIXME: Argument of type '{}' is not assignable to paramet... Remove this comment to see the full error message
    values = Float64Array.from(numbers(values, valueof))
    if (!(n = values.length)) return
    // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
    if ((p = +p) <= 0 || n < 2) return min(values)
    // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
    if (p >= 1) return max(values)
    let n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
      value0 = max(quickselect(values, i0).subarray(0, i0 + 1)),
      // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
      value1 = min(values.subarray(i0 + 1))
    return value0 + (value1 - value0) * (i - i0)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function quantileSorted(values, p, valueof = number) {
    if (!(n = values.length)) return
    // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 3.
    if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values)
    // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 3.
    if (p >= 1) return +valueof(values[n - 1], n - 1, values)
    let n,
      i = (n - 1) * p,
      i0 = Math.floor(i),
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 3.
      value0 = +valueof(values[i0], i0, values),
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 3.
      value1 = +valueof(values[i0 + 1], i0 + 1, values)
    return value0 + (value1 - value0) * (i - i0)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function freedmanDiaconis(values, min, max) {
    return Math.ceil(
      // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
      (max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(count(values), -1 / 3))
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function scott(values, min, max) {
    // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
    return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(count(values), -1 / 3)))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function maxIndex(values, valueof) {
    let max
    let maxIndex = -1
    let index = -1
    if (valueof === undefined) {
      for (const value of values) {
        ++index
        if (value != null && (max < value || (max === undefined && value >= value))) {
          ;(max = value), (maxIndex = index)
        }
      }
    } else {
      for (let value of values) {
        if (
          (value = valueof(value, ++index, values)) != null &&
          (max < value || (max === undefined && value >= value))
        ) {
          ;(max = value), (maxIndex = index)
        }
      }
    }
    return maxIndex
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function mean(values, valueof) {
    let count = 0
    let sum = 0
    if (valueof === undefined) {
      for (let value of values) {
        if (value != null && (value = +value) >= value) {
          ++count, (sum += value)
        }
      }
    } else {
      let index = -1
      for (let value of values) {
        if ((value = valueof(value, ++index, values)) != null && (value = +value) >= value) {
          ++count, (sum += value)
        }
      }
    }
    if (count) return sum / count
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function median(values, valueof) {
    return quantile(values, 0.5, valueof)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'arrays' implicitly has an 'any' type.
  function* flatten(arrays) {
    for (const array of arrays) {
      yield* array
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'arrays' implicitly has an 'any' type.
  function merge(arrays) {
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return Array.from(flatten(arrays))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function minIndex(values, valueof) {
    let min
    let minIndex = -1
    let index = -1
    if (valueof === undefined) {
      for (const value of values) {
        ++index
        if (value != null && (min > value || (min === undefined && value >= value))) {
          ;(min = value), (minIndex = index)
        }
      }
    } else {
      for (let value of values) {
        if (
          (value = valueof(value, ++index, values)) != null &&
          (min > value || (min === undefined && value >= value))
        ) {
          ;(min = value), (minIndex = index)
        }
      }
    }
    return minIndex
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function pairs(values, pairof = pair) {
    const pairs = []
    let previous
    let first = false
    for (const value of values) {
      if (first) pairs.push(pairof(previous, value))
      previous = value
      first = true
    }
    return pairs
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function pair(a, b) {
    return [a, b]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'source' implicitly has an 'any' type.
  function permute(source, keys) {
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return Array.from(keys, key => source[key])
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
  function sequence(start, stop, step) {
    ;(start = +start),
      (stop = +stop),
      (step = (n = arguments.length) < 2 ? ((stop = start), (start = 0), 1) : n < 3 ? 1 : +step)

    var i = -1,
      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
      range = new Array(n)

    while (++i < n) {
      range[i] = start + i * step
    }

    return range
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function least(values, compare = ascending) {
    let min
    let defined = false
    if (compare.length === 1) {
      let minValue
      for (const element of values) {
        // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
        const value = compare(element)
        if (defined ? ascending(value, minValue) < 0 : ascending(value, value) === 0) {
          min = element
          minValue = value
          defined = true
        }
      }
    } else {
      for (const value of values) {
        if (defined ? compare(value, min) < 0 : compare(value, value) === 0) {
          min = value
          defined = true
        }
      }
    }
    return min
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function leastIndex(values, compare = ascending) {
    if (compare.length === 1) return minIndex(values, compare)
    let minValue
    let min = -1
    let index = -1
    for (const value of values) {
      ++index
      if (min < 0 ? compare(value, value) === 0 : compare(value, minValue) < 0) {
        minValue = value
        min = index
      }
    }
    return min
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function greatest(values, compare = ascending) {
    let max
    let defined = false
    if (compare.length === 1) {
      let maxValue
      for (const element of values) {
        // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
        const value = compare(element)
        if (defined ? ascending(value, maxValue) > 0 : ascending(value, value) === 0) {
          max = element
          maxValue = value
          defined = true
        }
      }
    } else {
      for (const value of values) {
        if (defined ? compare(value, max) > 0 : compare(value, value) === 0) {
          max = value
          defined = true
        }
      }
    }
    return max
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function greatestIndex(values, compare = ascending) {
    if (compare.length === 1) return maxIndex(values, compare)
    let maxValue
    let max = -1
    let index = -1
    for (const value of values) {
      ++index
      if (max < 0 ? compare(value, value) === 0 : compare(value, maxValue) > 0) {
        maxValue = value
        max = index
      }
    }
    return max
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function scan(values, compare) {
    const index = leastIndex(values, compare)
    return index < 0 ? undefined : index
  }

  const shuffle = shuffler(Math.random)

  // @ts-expect-error TS(7006) FIXME: Parameter 'random' implicitly has an 'any' type.
  function shuffler(random) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'array' implicitly has an 'any' type.
    return function shuffle(array, i0 = 0, i1 = array.length) {
      let m = i1 - (i0 = +i0)
      while (m) {
        const i = (random() * m--) | 0,
          t = array[m + i0]
        array[m + i0] = array[i + i0]
        array[i + i0] = t
      }
      return array
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function sum(values, valueof) {
    let sum = 0
    if (valueof === undefined) {
      for (let value of values) {
        if ((value = +value)) {
          sum += value
        }
      }
    } else {
      let index = -1
      for (let value of values) {
        if ((value = +valueof(value, ++index, values))) {
          sum += value
        }
      }
    }
    return sum
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'matrix' implicitly has an 'any' type.
  function transpose(matrix) {
    if (!(n = matrix.length)) return []
    for (var i = -1, m = min(matrix, length$1), transpose = new Array(m); ++i < m; ) {
      for (var j = -1, n, row = (transpose[i] = new Array(n)); ++j < n; ) {
        row[j] = matrix[j][i]
      }
    }
    return transpose
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function length$1(d) {
    return d.length
  }

  function zip() {
    return transpose(arguments)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function every(values, test) {
    if (typeof test !== 'function') throw new TypeError('test is not a function')
    let index = -1
    for (const value of values) {
      if (!test(value, ++index, values)) {
        return false
      }
    }
    return true
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function some(values, test) {
    if (typeof test !== 'function') throw new TypeError('test is not a function')
    let index = -1
    for (const value of values) {
      if (test(value, ++index, values)) {
        return true
      }
    }
    return false
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function filter(values, test) {
    if (typeof test !== 'function') throw new TypeError('test is not a function')
    const array = []
    let index = -1
    for (const value of values) {
      if (test(value, ++index, values)) {
        array.push(value)
      }
    }
    return array
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function map(values, mapper) {
    // @ts-expect-error TS(2585) FIXME: 'Symbol' only refers to a type, but is being used ... Remove this comment to see the full error message
    if (typeof values[Symbol.iterator] !== 'function') throw new TypeError('values is not iterable')
    if (typeof mapper !== 'function') throw new TypeError('mapper is not a function')
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return Array.from(values, (value, index) => mapper(value, index, values))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function reduce(values, reducer, value) {
    if (typeof reducer !== 'function') throw new TypeError('reducer is not a function')
    // @ts-expect-error TS(2585) FIXME: 'Symbol' only refers to a type, but is being used ... Remove this comment to see the full error message
    const iterator = values[Symbol.iterator]()
    let done,
      next,
      index = -1
    if (arguments.length < 3) {
      ;({ done, value } = iterator.next())
      if (done) return
      ++index
    }
    while ((({ done, value: next } = iterator.next()), !done)) {
      value = reducer(value, next, ++index, values)
    }
    return value
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function reverse(values) {
    // @ts-expect-error TS(2585) FIXME: 'Symbol' only refers to a type, but is being used ... Remove this comment to see the full error message
    if (typeof values[Symbol.iterator] !== 'function') throw new TypeError('values is not iterable')
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return Array.from(values).reverse()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function sort(values, comparator = ascending) {
    // @ts-expect-error TS(2585) FIXME: 'Symbol' only refers to a type, but is being used ... Remove this comment to see the full error message
    if (typeof values[Symbol.iterator] !== 'function') throw new TypeError('values is not iterable')
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return Array.from(values).sort(comparator)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function difference(values, ...others) {
    // @ts-expect-error TS(2552) FIXME: Cannot find name 'Set'. Did you mean 'set'?
    values = new Set(values)
    for (const other of others) {
      for (const value of other) {
        values.delete(value)
      }
    }
    return values
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function disjoint(values, other) {
    // @ts-expect-error TS(2585) FIXME: 'Symbol' only refers to a type, but is being used ... Remove this comment to see the full error message
    const iterator = other[Symbol.iterator](),
      // @ts-expect-error TS(2552) FIXME: Cannot find name 'Set'. Did you mean 'set'?
      set = new Set()
    for (const v of values) {
      if (set.has(v)) return false
      let value, done
      while (({ value, done } = iterator.next())) {
        if (done) break
        // @ts-expect-error TS(2550) FIXME: Property 'is' does not exist on type 'ObjectConstr... Remove this comment to see the full error message
        if (Object.is(v, value)) return false
        set.add(value)
      }
    }
    return true
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function set(values) {
    // @ts-expect-error TS(2583) FIXME: Cannot find name 'Set'. Do you need to change your... Remove this comment to see the full error message
    return values instanceof Set ? values : new Set(values)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function intersection(values, ...others) {
    // @ts-expect-error TS(2583) FIXME: Cannot find name 'Set'. Do you need to change your... Remove this comment to see the full error message
    values = new Set(values)
    others = others.map(set)
    out: for (const value of values) {
      for (const other of others) {
        if (!other.has(value)) {
          values.delete(value)
          continue out
        }
      }
    }
    return values
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function superset(values, other) {
    // @ts-expect-error TS(2585) FIXME: 'Symbol' only refers to a type, but is being used ... Remove this comment to see the full error message
    const iterator = values[Symbol.iterator](),
      // @ts-expect-error TS(2583) FIXME: Cannot find name 'Set'. Do you need to change your... Remove this comment to see the full error message
      set = new Set()
    for (const o of other) {
      if (set.has(o)) continue
      let value, done
      while (({ value, done } = iterator.next())) {
        if (done) return false
        set.add(value)
        // @ts-expect-error TS(2550) FIXME: Property 'is' does not exist on type 'ObjectConstr... Remove this comment to see the full error message
        if (Object.is(o, value)) break
      }
    }
    return true
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function subset(values, other) {
    return superset(other, values)
  }

  // @ts-expect-error TS(7019) FIXME: Rest parameter 'others' implicitly has an 'any[]' ... Remove this comment to see the full error message
  function union(...others) {
    // @ts-expect-error TS(2583) FIXME: Cannot find name 'Set'. Do you need to change your... Remove this comment to see the full error message
    const set = new Set()
    for (const other of others) {
      for (const o of other) {
        set.add(o)
      }
    }
    return set
  }

  const slice$1 = Array.prototype.slice

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function identity$1(x) {
    return x
  }

  const top = 1,
    right = 2,
    bottom = 3,
    left = 4,
    epsilon = 1e-6

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function translateX(x) {
    return 'translate(' + (x + 0.5) + ',0)'
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
  function translateY(y) {
    return 'translate(0,' + (y + 0.5) + ')'
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'scale' implicitly has an 'any' type.
  function number$1(scale) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    return d => +scale(d)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'scale' implicitly has an 'any' type.
  function center(scale) {
    let offset = Math.max(0, scale.bandwidth() - 1) / 2 // Adjust for 0.5px offset.
    if (scale.round()) offset = Math.round(offset)
    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    return function (d) {
      return +scale(d) + offset
    }
  }

  function entering() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return !this.__axis
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'orient' implicitly has an 'any' type.
  function axis(orient, scale) {
    // @ts-expect-error TS(7034) FIXME: Variable 'tickArguments' implicitly has type 'any[... Remove this comment to see the full error message
    let tickArguments = [],
      // @ts-expect-error TS(7034) FIXME: Variable 'tickValues' implicitly has type 'any' in... Remove this comment to see the full error message
      tickValues = null,
      // @ts-expect-error TS(7034) FIXME: Variable 'tickFormat' implicitly has type 'any' in... Remove this comment to see the full error message
      tickFormat = null,
      tickSizeInner = 6,
      tickSizeOuter = 6,
      tickPadding = 3,
      k = orient === top || orient === left ? -1 : 1,
      x = orient === left || orient === right ? 'x' : 'y',
      transform = orient === top || orient === bottom ? translateX : translateY

    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    function axis(context) {
      let values =
          // @ts-expect-error TS(7005) FIXME: Variable 'tickValues' implicitly has an 'any' type... Remove this comment to see the full error message
          tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
        format =
          // @ts-expect-error TS(7005) FIXME: Variable 'tickFormat' implicitly has an 'any' type... Remove this comment to see the full error message
          tickFormat == null
            ? scale.tickFormat
              ? // @ts-expect-error TS(7005) FIXME: Variable 'tickArguments' implicitly has an 'any[]'... Remove this comment to see the full error message
                scale.tickFormat.apply(scale, tickArguments)
              : identity$1
            : // @ts-expect-error TS(7005) FIXME: Variable 'tickFormat' implicitly has an 'any' type... Remove this comment to see the full error message
              tickFormat,
        spacing = Math.max(tickSizeInner, 0) + tickPadding,
        range = scale.range(),
        range0 = +range[0] + 0.5,
        range1 = +range[range.length - 1] + 0.5,
        position = (scale.bandwidth ? center : number$1)(scale.copy()),
        selection = context.selection ? context.selection() : context,
        path = selection.selectAll('.domain').data([null]),
        tick = selection.selectAll('.tick').data(values, scale).order(),
        tickExit = tick.exit(),
        tickEnter = tick.enter().append('g').attr('class', 'tick'),
        line = tick.select('line'),
        text = tick.select('text')

      path = path.merge(path.enter().insert('path', '.tick').attr('class', 'domain').attr('stroke', 'currentColor'))

      tick = tick.merge(tickEnter)

      line = line.merge(
        tickEnter
          .append('line')
          .attr('stroke', 'currentColor')
          .attr(x + '2', k * tickSizeInner)
      )

      text = text.merge(
        tickEnter
          .append('text')
          .attr('fill', 'currentColor')
          .attr(x, k * spacing)
          .attr('dy', orient === top ? '0em' : orient === bottom ? '0.71em' : '0.32em')
      )

      if (context !== selection) {
        path = path.transition(context)
        tick = tick.transition(context)
        line = line.transition(context)
        text = text.transition(context)

        tickExit = tickExit
          .transition(context)
          .attr('opacity', epsilon)
          // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
          .attr('transform', function (d) {
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            return isFinite((d = position(d))) ? transform(d) : this.getAttribute('transform')
          })

        tickEnter
          .attr('opacity', epsilon)
          // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
          .attr('transform', function (d) {
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            let p = this.parentNode.__axis
            return transform(p && isFinite((p = p(d))) ? p : position(d))
          })
      }

      tickExit.remove()

      path.attr(
        'd',
        orient === left || orient == right
          ? tickSizeOuter
            ? 'M' + k * tickSizeOuter + ',' + range0 + 'H0.5V' + range1 + 'H' + k * tickSizeOuter
            : 'M0.5,' + range0 + 'V' + range1
          : tickSizeOuter
          ? 'M' + range0 + ',' + k * tickSizeOuter + 'V0.5H' + range1 + 'V' + k * tickSizeOuter
          : 'M' + range0 + ',0.5H' + range1
      )

      tick
        .attr('opacity', 1)
        // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
        .attr('transform', function (d) {
          return transform(position(d))
        })

      line.attr(x + '2', k * tickSizeInner)

      text.attr(x, k * spacing).text(format)

      selection
        .filter(entering)
        .attr('fill', 'none')
        .attr('font-size', 10)
        .attr('font-family', 'sans-serif')
        .attr('text-anchor', orient === right ? 'start' : orient === left ? 'end' : 'middle')

      selection.each(function () {
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.__axis = position
      })
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    axis.scale = function (_) {
      return arguments.length ? ((scale = _), axis) : scale
    }

    axis.ticks = function () {
      return (tickArguments = slice$1.call(arguments)), axis
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    axis.tickArguments = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'tickArguments' implicitly has an 'any[]'... Remove this comment to see the full error message
      return arguments.length ? ((tickArguments = _ == null ? [] : slice$1.call(_)), axis) : tickArguments.slice()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    axis.tickValues = function (_) {
      return arguments.length
        ? ((tickValues = _ == null ? null : slice$1.call(_)), axis)
        : // @ts-expect-error TS(7005) FIXME: Variable 'tickValues' implicitly has an 'any' type... Remove this comment to see the full error message
          tickValues && tickValues.slice()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    axis.tickFormat = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'tickFormat' implicitly has an 'any' type... Remove this comment to see the full error message
      return arguments.length ? ((tickFormat = _), axis) : tickFormat
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    axis.tickSize = function (_) {
      return arguments.length ? ((tickSizeInner = tickSizeOuter = +_), axis) : tickSizeInner
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    axis.tickSizeInner = function (_) {
      return arguments.length ? ((tickSizeInner = +_), axis) : tickSizeInner
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    axis.tickSizeOuter = function (_) {
      return arguments.length ? ((tickSizeOuter = +_), axis) : tickSizeOuter
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    axis.tickPadding = function (_) {
      return arguments.length ? ((tickPadding = +_), axis) : tickPadding
    }

    return axis
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'scale' implicitly has an 'any' type.
  function axisTop(scale) {
    return axis(top, scale)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'scale' implicitly has an 'any' type.
  function axisRight(scale) {
    return axis(right, scale)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'scale' implicitly has an 'any' type.
  function axisBottom(scale) {
    return axis(bottom, scale)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'scale' implicitly has an 'any' type.
  function axisLeft(scale) {
    return axis(left, scale)
  }

  const noop = { value: () => {} }

  function dispatch() {
    for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
      if (!(t = arguments[i] + '') || t in _ || /[\s.]/.test(t)) throw new Error('illegal type: ' + t)
      // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      _[t] = []
    }
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Dispatch(_)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
  function Dispatch(_) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._ = _
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'typenames' implicitly has an 'any' type... Remove this comment to see the full error message
  function parseTypenames(typenames, types) {
    return (
      typenames
        .trim()
        .split(/^|\s+/)
        // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
        .map(function (t) {
          let name = '',
            i = t.indexOf('.')
          if (i >= 0) (name = t.slice(i + 1)), (t = t.slice(0, i))
          if (t && !types.hasOwnProperty(t)) throw new Error('unknown type: ' + t)
          return { type: t, name: name }
        })
    )
  }

  Dispatch.prototype = dispatch.prototype = {
    constructor: Dispatch,
    // @ts-expect-error TS(7006) FIXME: Parameter 'typename' implicitly has an 'any' type.
    on: function (typename, callback) {
      let _ = this._,
        T = parseTypenames(typename + '', _),
        t,
        i = -1,
        n = T.length

      // If no callback was specified, return the callback of the given type and name.
      if (arguments.length < 2) {
        while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t
        return
      }

      // If a type was specified, set the callback for the given type and name.
      // Otherwise, if a null callback was specified, remove callbacks of the given name.
      if (callback != null && typeof callback !== 'function') throw new Error('invalid callback: ' + callback)
      while (++i < n) {
        if ((t = (typename = T[i]).type)) _[t] = set$1(_[t], typename.name, callback)
        else if (callback == null) for (t in _) _[t] = set$1(_[t], typename.name, null)
      }

      return this
    },
    copy: function () {
      const copy = {},
        _ = this._
      // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      for (const t in _) copy[t] = _[t].slice()
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return new Dispatch(copy)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
    call: function (type, that) {
      if ((n = arguments.length - 2) > 0)
        for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2]
      if (!this._.hasOwnProperty(type)) throw new Error('unknown type: ' + type)
      // @ts-expect-error TS(2454) FIXME: Variable 'args' is used before being assigned.
      for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
    apply: function (type, that, args) {
      if (!this._.hasOwnProperty(type)) throw new Error('unknown type: ' + type)
      for (let t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args)
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
  function get(type, name) {
    for (var i = 0, n = type.length, c; i < n; ++i) {
      if ((c = type[i]).name === name) {
        return c.value
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
  function set$1(type, name, callback) {
    for (let i = 0, n = type.length; i < n; ++i) {
      if (type[i].name === name) {
        ;(type[i] = noop), (type = type.slice(0, i).concat(type.slice(i + 1)))
        break
      }
    }
    if (callback != null) type.push({ name: name, value: callback })
    return type
  }

  const xhtml = 'http://www.w3.org/1999/xhtml'

  const namespaces = {
    svg: 'http://www.w3.org/2000/svg',
    xhtml: xhtml,
    xlink: 'http://www.w3.org/1999/xlink',
    xml: 'http://www.w3.org/XML/1998/namespace',
    xmlns: 'http://www.w3.org/2000/xmlns/',
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function namespace(name) {
    let prefix = (name += ''),
      i = prefix.indexOf(':')
    if (i >= 0 && (prefix = name.slice(0, i)) !== 'xmlns') name = name.slice(i + 1)
    // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
    return namespaces.hasOwnProperty(prefix) ? { space: namespaces[prefix], local: name } : name // eslint-disable-line no-prototype-builtins
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function creatorInherit(name) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const document = this.ownerDocument,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        uri = this.namespaceURI
      return uri === xhtml && document.documentElement.namespaceURI === xhtml
        ? document.createElement(name)
        : document.createElementNS(uri, name)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'fullname' implicitly has an 'any' type.
  function creatorFixed(fullname) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      return this.ownerDocument.createElementNS(fullname.space, fullname.local)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function creator(name) {
    const fullname = namespace(name)
    return (fullname.local ? creatorFixed : creatorInherit)(fullname)
  }

  function none() {}

  // @ts-expect-error TS(7006) FIXME: Parameter 'selector' implicitly has an 'any' type.
  function selector(selector) {
    return selector == null
      ? none
      : function () {
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          return this.querySelector(selector)
        }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'select' implicitly has an 'any' type.
  function selection_select(select) {
    if (typeof select !== 'function') select = selector(select)

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (
        var group = groups[j], n = group.length, subgroup = (subgroups[j] = new Array(n)), node, subnode, i = 0;
        i < n;
        ++i
      ) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
          if ('__data__' in node) subnode.__data__ = node.__data__
          subgroup[i] = subnode
        }
      }
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Selection(subgroups, this._parents)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function array$1(x) {
    return typeof x === 'object' && 'length' in x
      ? x // Array, TypedArray, NodeList, array-like
      : // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
        Array.from(x) // Map, Set, iterable, string, or anything else
  }

  function empty$1() {
    return []
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'selector' implicitly has an 'any' type.
  function selectorAll(selector) {
    return selector == null
      ? empty$1
      : function () {
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          return this.querySelectorAll(selector)
        }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'select' implicitly has an 'any' type.
  function arrayAll(select) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const group = select.apply(this, arguments)
      return group == null ? [] : array$1(group)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'select' implicitly has an 'any' type.
  function selection_selectAll(select) {
    if (typeof select === 'function') select = arrayAll(select)
    else select = selectorAll(select)

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if ((node = group[i])) {
          subgroups.push(select.call(node, node.__data__, i, group))
          parents.push(node)
        }
      }
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Selection(subgroups, parents)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'selector' implicitly has an 'any' type.
  function matcher(selector) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      return this.matches(selector)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'selector' implicitly has an 'any' type.
  function childMatcher(selector) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
    return function (node) {
      return node.matches(selector)
    }
  }

  // @ts-expect-error TS(2550) FIXME: Property 'find' does not exist on type 'any[]'. Do... Remove this comment to see the full error message
  const find = Array.prototype.find

  // @ts-expect-error TS(7006) FIXME: Parameter 'match' implicitly has an 'any' type.
  function childFind(match) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      return find.call(this.children, match)
    }
  }

  function childFirst() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.firstElementChild
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'match' implicitly has an 'any' type.
  function selection_selectChild(match) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.select(
      match == null ? childFirst : childFind(typeof match === 'function' ? match : childMatcher(match))
    )
  }

  const filter$1 = Array.prototype.filter

  function children() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.children
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'match' implicitly has an 'any' type.
  function childrenFilter(match) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      return filter$1.call(this.children, match)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'match' implicitly has an 'any' type.
  function selection_selectChildren(match) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.selectAll(
      match == null ? children : childrenFilter(typeof match === 'function' ? match : childMatcher(match))
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'match' implicitly has an 'any' type.
  function selection_filter(match) {
    if (typeof match !== 'function') match = matcher(match)

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = (subgroups[j] = []), node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
          // @ts-expect-error TS(2345) FIXME: Argument of type 'any' is not assignable to parame... Remove this comment to see the full error message
          subgroup.push(node)
        }
      }
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Selection(subgroups, this._parents)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'update' implicitly has an 'any' type.
  function sparse(update) {
    return new Array(update.length)
  }

  function selection_enter() {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Selection(this._enter || this._groups.map(sparse), this._parents)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.
  function EnterNode(parent, datum) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.ownerDocument = parent.ownerDocument
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.namespaceURI = parent.namespaceURI
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._next = null
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._parent = parent
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.__data__ = datum
  }

  EnterNode.prototype = {
    constructor: EnterNode,
    // @ts-expect-error TS(7006) FIXME: Parameter 'child' implicitly has an 'any' type.
    appendChild: function (child) {
      return this._parent.insertBefore(child, this._next)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'child' implicitly has an 'any' type.
    insertBefore: function (child, next) {
      return this._parent.insertBefore(child, next)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'selector' implicitly has an 'any' type.
    querySelector: function (selector) {
      return this._parent.querySelector(selector)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'selector' implicitly has an 'any' type.
    querySelectorAll: function (selector) {
      return this._parent.querySelectorAll(selector)
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function constant$1(x) {
    return function () {
      return x
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.
  function bindIndex(parent, group, enter, update, exit, data) {
    let i = 0,
      node,
      groupLength = group.length,
      dataLength = data.length

    // Put any non-null nodes that fit into update.
    // Put any null nodes into enter.
    // Put any remaining data into enter.
    for (; i < dataLength; ++i) {
      if ((node = group[i])) {
        node.__data__ = data[i]
        update[i] = node
      } else {
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        enter[i] = new EnterNode(parent, data[i])
      }
    }

    // Put any non-null nodes that don’t fit into exit.
    for (; i < groupLength; ++i) {
      if ((node = group[i])) {
        exit[i] = node
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.
  function bindKey(parent, group, enter, update, exit, data, key) {
    let i,
      node,
      // @ts-expect-error TS(2583) FIXME: Cannot find name 'Map'. Do you need to change your... Remove this comment to see the full error message
      nodeByKeyValue = new Map(),
      groupLength = group.length,
      dataLength = data.length,
      keyValues = new Array(groupLength),
      keyValue

    // Compute the key for each node.
    // If multiple nodes have the same key, the duplicates are added to exit.
    for (i = 0; i < groupLength; ++i) {
      if ((node = group[i])) {
        keyValues[i] = keyValue = key.call(node, node.__data__, i, group) + ''
        if (nodeByKeyValue.has(keyValue)) {
          exit[i] = node
        } else {
          nodeByKeyValue.set(keyValue, node)
        }
      }
    }

    // Compute the key for each datum.
    // If there a node associated with this key, join and add it to update.
    // If there is not (or the key is a duplicate), add it to enter.
    for (i = 0; i < dataLength; ++i) {
      keyValue = key.call(parent, data[i], i, data) + ''
      if ((node = nodeByKeyValue.get(keyValue))) {
        update[i] = node
        node.__data__ = data[i]
        nodeByKeyValue.delete(keyValue)
      } else {
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        enter[i] = new EnterNode(parent, data[i])
      }
    }

    // Add any remaining nodes that were not bound to data to exit.
    for (i = 0; i < groupLength; ++i) {
      if ((node = group[i]) && nodeByKeyValue.get(keyValues[i]) === node) {
        exit[i] = node
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function datum(node) {
    return node.__data__
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function selection_data(value, key) {
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    if (!arguments.length) return Array.from(this, datum)

    const bind = key ? bindKey : bindIndex,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      parents = this._parents,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      groups = this._groups

    if (typeof value !== 'function') value = constant$1(value)

    for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
      const parent = parents[j],
        group = groups[j],
        groupLength = group.length,
        data = array$1(value.call(parent, parent && parent.__data__, j, parents)),
        dataLength = data.length,
        enterGroup = (enter[j] = new Array(dataLength)),
        updateGroup = (update[j] = new Array(dataLength)),
        exitGroup = (exit[j] = new Array(groupLength))

      bind(parent, group, enterGroup, updateGroup, exitGroup, data, key)

      // Now connect the enter nodes to their following update node, such that
      // appendChild can insert the materialized enter node before this node,
      // rather than at the end of the parent node.
      for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
        if ((previous = enterGroup[i0])) {
          if (i0 >= i1) i1 = i0 + 1
          while (!(next = updateGroup[i1]) && ++i1 < dataLength);
          previous._next = next || null
        }
      }
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    update = new Selection(update, parents)
    // @ts-expect-error TS(2339) FIXME: Property '_enter' does not exist on type 'any[]'.
    update._enter = enter
    // @ts-expect-error TS(2339) FIXME: Property '_exit' does not exist on type 'any[]'.
    update._exit = exit
    return update
  }

  function selection_exit() {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Selection(this._exit || this._groups.map(sparse), this._parents)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'onenter' implicitly has an 'any' type.
  function selection_join(onenter, onupdate, onexit) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    let enter = this.enter(),
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      update = this,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      exit = this.exit()
    enter = typeof onenter === 'function' ? onenter(enter) : enter.append(onenter + '')
    if (onupdate != null) update = onupdate(update)
    if (onexit == null) exit.remove()
    else onexit(exit)
    return enter && update ? enter.merge(update).order() : update
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'selection' implicitly has an 'any' type... Remove this comment to see the full error message
  function selection_merge(selection) {
    if (!(selection instanceof Selection)) throw new Error('invalid merge')

    for (
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      var groups0 = this._groups,
        // @ts-expect-error TS(2339) FIXME: Property '_groups' does not exist on type '{}'.
        groups1 = selection._groups,
        m0 = groups0.length,
        m1 = groups1.length,
        m = Math.min(m0, m1),
        merges = new Array(m0),
        j = 0;
      j < m;
      ++j
    ) {
      for (
        var group0 = groups0[j],
          group1 = groups1[j],
          n = group0.length,
          merge = (merges[j] = new Array(n)),
          node,
          i = 0;
        i < n;
        ++i
      ) {
        if ((node = group0[i] || group1[i])) {
          merge[i] = node
        }
      }
    }

    for (; j < m0; ++j) {
      merges[j] = groups0[j]
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Selection(merges, this._parents)
  }

  function selection_order() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (let groups = this._groups, j = -1, m = groups.length; ++j < m; ) {
      for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0; ) {
        if ((node = group[i])) {
          if (next && node.compareDocumentPosition(next) ^ 4) next.parentNode.insertBefore(node, next)
          next = node
        }
      }
    }

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'compare' implicitly has an 'any' type.
  function selection_sort(compare) {
    if (!compare) compare = ascending$1

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    function compareNode(a, b) {
      // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
      return a && b ? compare(a.__data__, b.__data__) : !a - !b
    }

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
      for (
        var group = groups[j], n = group.length, sortgroup = (sortgroups[j] = new Array(n)), node, i = 0;
        i < n;
        ++i
      ) {
        if ((node = group[i])) {
          sortgroup[i] = node
        }
      }
      sortgroup.sort(compareNode)
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Selection(sortgroups, this._parents).order()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function ascending$1(a, b) {
    return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN
  }

  function selection_call() {
    const callback = arguments[0]
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    arguments[0] = this
    callback.apply(null, arguments)
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  function selection_nodes() {
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return Array.from(this)
  }

  function selection_node() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (let groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (let group = groups[j], i = 0, n = group.length; i < n; ++i) {
        const node = group[i]
        if (node) return node
      }
    }

    return null
  }

  function selection_size() {
    let size = 0
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (const node of this) ++size // eslint-disable-line no-unused-vars
    return size
  }

  function selection_empty() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return !this.node()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'callback' implicitly has an 'any' type.
  function selection_each(callback) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (let groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
        if ((node = group[i])) callback.call(node, node.__data__, i, group)
      }
    }

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function attrRemove(name) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.removeAttribute(name)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'fullname' implicitly has an 'any' type.
  function attrRemoveNS(fullname) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.removeAttributeNS(fullname.space, fullname.local)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function attrConstant(name, value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.setAttribute(name, value)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'fullname' implicitly has an 'any' type.
  function attrConstantNS(fullname, value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.setAttributeNS(fullname.space, fullname.local, value)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function attrFunction(name, value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const v = value.apply(this, arguments)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (v == null) this.removeAttribute(name)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      else this.setAttribute(name, v)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'fullname' implicitly has an 'any' type.
  function attrFunctionNS(fullname, value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const v = value.apply(this, arguments)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (v == null) this.removeAttributeNS(fullname.space, fullname.local)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      else this.setAttributeNS(fullname.space, fullname.local, v)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function selection_attr(name, value) {
    const fullname = namespace(name)

    if (arguments.length < 2) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const node = this.node()
      return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname)
    }

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.each(
      (value == null
        ? fullname.local
          ? attrRemoveNS
          : attrRemove
        : typeof value === 'function'
        ? fullname.local
          ? attrFunctionNS
          : attrFunction
        : fullname.local
        ? attrConstantNS
        : attrConstant)(fullname, value)
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function defaultView(node) {
    return (
      (node.ownerDocument && node.ownerDocument.defaultView) || // node is a Node
      (node.document && node) || // node is a Window
      node.defaultView
    ) // node is a Document
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function styleRemove(name) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.style.removeProperty(name)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function styleConstant(name, value, priority) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.style.setProperty(name, value, priority)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function styleFunction(name, value, priority) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const v = value.apply(this, arguments)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (v == null) this.style.removeProperty(name)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      else this.style.setProperty(name, v, priority)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function selection_style(name, value, priority) {
    return arguments.length > 1
      ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.each(
          (value == null ? styleRemove : typeof value === 'function' ? styleFunction : styleConstant)(
            name,
            value,
            priority == null ? '' : priority
          )
        )
      : // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        styleValue(this.node(), name)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function styleValue(node, name) {
    return node.style.getPropertyValue(name) || defaultView(node).getComputedStyle(node, null).getPropertyValue(name)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function propertyRemove(name) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      delete this[name]
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function propertyConstant(name, value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this[name] = value
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function propertyFunction(name, value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const v = value.apply(this, arguments)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (v == null) delete this[name]
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      else this[name] = v
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function selection_property(name, value) {
    return arguments.length > 1
      ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.each(
          (value == null ? propertyRemove : typeof value === 'function' ? propertyFunction : propertyConstant)(
            name,
            value
          )
        )
      : // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.node()[name]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'string' implicitly has an 'any' type.
  function classArray(string) {
    return string.trim().split(/^|\s+/)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function classList(node) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return node.classList || new ClassList(node)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function ClassList(node) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._node = node
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._names = classArray(node.getAttribute('class') || '')
  }

  ClassList.prototype = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
    add: function (name) {
      const i = this._names.indexOf(name)
      if (i < 0) {
        this._names.push(name)
        this._node.setAttribute('class', this._names.join(' '))
      }
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
    remove: function (name) {
      const i = this._names.indexOf(name)
      if (i >= 0) {
        this._names.splice(i, 1)
        this._node.setAttribute('class', this._names.join(' '))
      }
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
    contains: function (name) {
      return this._names.indexOf(name) >= 0
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function classedAdd(node, names) {
    let list = classList(node),
      i = -1,
      n = names.length
    while (++i < n) list.add(names[i])
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function classedRemove(node, names) {
    let list = classList(node),
      i = -1,
      n = names.length
    while (++i < n) list.remove(names[i])
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'names' implicitly has an 'any' type.
  function classedTrue(names) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      classedAdd(this, names)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'names' implicitly has an 'any' type.
  function classedFalse(names) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      classedRemove(this, names)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'names' implicitly has an 'any' type.
  function classedFunction(names, value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      ;(value.apply(this, arguments) ? classedAdd : classedRemove)(this, names)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function selection_classed(name, value) {
    const names = classArray(name + '')

    if (arguments.length < 2) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      let list = classList(this.node()),
        i = -1,
        n = names.length
      while (++i < n) if (!list.contains(names[i])) return false
      return true
    }

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.each((typeof value === 'function' ? classedFunction : value ? classedTrue : classedFalse)(names, value))
  }

  function textRemove() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.textContent = ''
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function textConstant(value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.textContent = value
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function textFunction(value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const v = value.apply(this, arguments)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.textContent = v == null ? '' : v
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function selection_text(value) {
    return arguments.length
      ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.each(value == null ? textRemove : (typeof value === 'function' ? textFunction : textConstant)(value))
      : // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.node().textContent
  }

  function htmlRemove() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.innerHTML = ''
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function htmlConstant(value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.innerHTML = value
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function htmlFunction(value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const v = value.apply(this, arguments)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.innerHTML = v == null ? '' : v
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function selection_html(value) {
    return arguments.length
      ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.each(value == null ? htmlRemove : (typeof value === 'function' ? htmlFunction : htmlConstant)(value))
      : // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.node().innerHTML
  }

  function raise() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (this.nextSibling) this.parentNode.appendChild(this)
  }

  function selection_raise() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.each(raise)
  }

  function lower() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild)
  }

  function selection_lower() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.each(lower)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function selection_append(name) {
    const create = typeof name === 'function' ? name : creator(name)
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.select(function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      return this.appendChild(create.apply(this, arguments))
    })
  }

  function constantNull() {
    return null
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function selection_insert(name, before) {
    const create = typeof name === 'function' ? name : creator(name),
      select = before == null ? constantNull : typeof before === 'function' ? before : selector(before)
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.select(function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null)
    })
  }

  function remove() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const parent = this.parentNode
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (parent) parent.removeChild(this)
  }

  function selection_remove() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.each(remove)
  }

  function selection_cloneShallow() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const clone = this.cloneNode(false),
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      parent = this.parentNode
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone
  }

  function selection_cloneDeep() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const clone = this.cloneNode(true),
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      parent = this.parentNode
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return parent ? parent.insertBefore(clone, this.nextSibling) : clone
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'deep' implicitly has an 'any' type.
  function selection_clone(deep) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.select(deep ? selection_cloneDeep : selection_cloneShallow)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function selection_datum(value) {
    return arguments.length
      ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.property('__data__', value)
      : // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.node().__data__
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'listener' implicitly has an 'any' type.
  function contextListener(listener) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    return function (event) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      listener.call(this, event, this.__data__)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'typenames' implicitly has an 'any' type... Remove this comment to see the full error message
  function parseTypenames$1(typenames) {
    return (
      typenames
        .trim()
        .split(/^|\s+/)
        // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
        .map(function (t) {
          let name = '',
            i = t.indexOf('.')
          if (i >= 0) (name = t.slice(i + 1)), (t = t.slice(0, i))
          return { type: t, name: name }
        })
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'typename' implicitly has an 'any' type.
  function onRemove(typename) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const on = this.__on
      if (!on) return
      for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
        if (((o = on[j]), (!typename.type || o.type === typename.type) && o.name === typename.name)) {
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          this.removeEventListener(o.type, o.listener, o.options)
        } else {
          on[++i] = o
        }
      }
      if (++i) on.length = i
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      else delete this.__on
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'typename' implicitly has an 'any' type.
  function onAdd(typename, value, options) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      let on = this.__on,
        o,
        listener = contextListener(value)
      if (on)
        for (let j = 0, m = on.length; j < m; ++j) {
          if ((o = on[j]).type === typename.type && o.name === typename.name) {
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            this.removeEventListener(o.type, o.listener, o.options)
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            this.addEventListener(o.type, (o.listener = listener), (o.options = options))
            o.value = value
            return
          }
        }
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.addEventListener(typename.type, listener, options)
      o = { type: typename.type, name: typename.name, value: value, listener: listener, options: options }
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (!on) this.__on = [o]
      else on.push(o)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'typename' implicitly has an 'any' type.
  function selection_on(typename, value, options) {
    let typenames = parseTypenames$1(typename + ''),
      i,
      n = typenames.length,
      t

    if (arguments.length < 2) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      var on = this.node().__on
      if (on)
        for (var j = 0, m = on.length, o; j < m; ++j) {
          for (i = 0, o = on[j]; i < n; ++i) {
            if ((t = typenames[i]).type === o.type && t.name === o.name) {
              return o.value
            }
          }
        }
      return
    }

    on = value ? onAdd : onRemove
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (i = 0; i < n; ++i) this.each(on(typenames[i], value, options))
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function dispatchEvent(node, type, params) {
    let window = defaultView(node),
      event = window.CustomEvent

    if (typeof event === 'function') {
      event = new event(type, params)
    } else {
      event = window.document.createEvent('Event')
      if (params) event.initEvent(type, params.bubbles, params.cancelable), (event.detail = params.detail)
      else event.initEvent(type, false, false)
    }

    node.dispatchEvent(event)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
  function dispatchConstant(type, params) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      return dispatchEvent(this, type, params)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
  function dispatchFunction(type, params) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      return dispatchEvent(this, type, params.apply(this, arguments))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
  function selection_dispatch(type, params) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.each((typeof params === 'function' ? dispatchFunction : dispatchConstant)(type, params))
  }

  function* selection_iterator() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (let groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
      for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
        if ((node = group[i])) yield node
      }
    }
  }

  const root = [null]

  // @ts-expect-error TS(7006) FIXME: Parameter 'groups' implicitly has an 'any' type.
  function Selection(groups, parents) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._groups = groups
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._parents = parents
  }

  function selection() {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Selection([[document.documentElement]], root)
  }

  function selection_selection() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  Selection.prototype = selection.prototype = {
    constructor: Selection,
    select: selection_select,
    selectAll: selection_selectAll,
    selectChild: selection_selectChild,
    selectChildren: selection_selectChildren,
    filter: selection_filter,
    data: selection_data,
    enter: selection_enter,
    exit: selection_exit,
    join: selection_join,
    merge: selection_merge,
    selection: selection_selection,
    order: selection_order,
    sort: selection_sort,
    call: selection_call,
    nodes: selection_nodes,
    node: selection_node,
    size: selection_size,
    empty: selection_empty,
    each: selection_each,
    attr: selection_attr,
    style: selection_style,
    property: selection_property,
    classed: selection_classed,
    text: selection_text,
    html: selection_html,
    raise: selection_raise,
    lower: selection_lower,
    append: selection_append,
    insert: selection_insert,
    remove: selection_remove,
    clone: selection_clone,
    datum: selection_datum,
    on: selection_on,
    dispatch: selection_dispatch,
    // @ts-expect-error TS(2585) FIXME: 'Symbol' only refers to a type, but is being used ... Remove this comment to see the full error message
    [Symbol.iterator]: selection_iterator,
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'selector' implicitly has an 'any' type.
  function select(selector) {
    return typeof selector === 'string'
      ? // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        new Selection([[document.querySelector(selector)]], [document.documentElement])
      : // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        new Selection([[selector]], root)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function create(name) {
    return select(creator(name).call(document.documentElement))
  }

  let nextId = 0

  function local() {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Local()
  }

  function Local() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._ = '@' + (++nextId).toString(36)
  }

  Local.prototype = local.prototype = {
    constructor: Local,
    // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
    get: function (node) {
      const id = this._
      while (!(id in node)) if (!(node = node.parentNode)) return
      return node[id]
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
    set: function (node, value) {
      return (node[this._] = value)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
    remove: function (node) {
      return this._ in node && delete node[this._]
    },
    toString: function () {
      return this._
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function sourceEvent(event) {
    let sourceEvent
    while ((sourceEvent = event.sourceEvent)) event = sourceEvent
    return event
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function pointer(event, node) {
    event = sourceEvent(event)
    if (node === undefined) node = event.currentTarget
    if (node) {
      const svg = node.ownerSVGElement || node
      if (svg.createSVGPoint) {
        let point = svg.createSVGPoint()
        ;(point.x = event.clientX), (point.y = event.clientY)
        point = point.matrixTransform(node.getScreenCTM().inverse())
        return [point.x, point.y]
      }
      if (node.getBoundingClientRect) {
        const rect = node.getBoundingClientRect()
        return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop]
      }
    }
    return [event.pageX, event.pageY]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'events' implicitly has an 'any' type.
  function pointers(events, node) {
    if (events.target) {
      // i.e., instanceof Event, not TouchList or iterable
      events = sourceEvent(events)
      if (node === undefined) node = events.currentTarget
      events = events.touches || [events]
    }
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return Array.from(events, event => pointer(event, node))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'selector' implicitly has an 'any' type.
  function selectAll(selector) {
    return typeof selector === 'string'
      ? // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        new Selection([document.querySelectorAll(selector)], [document.documentElement])
      : // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        new Selection([selector == null ? [] : array$1(selector)], root)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function nopropagation(event) {
    event.stopImmediatePropagation()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function noevent(event) {
    event.preventDefault()
    event.stopImmediatePropagation()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'view' implicitly has an 'any' type.
  function dragDisable(view) {
    const root = view.document.documentElement,
      selection = select(view).on('dragstart.drag', noevent, true)
    if ('onselectstart' in root) {
      selection.on('selectstart.drag', noevent, true)
    } else {
      root.__noselect = root.style.MozUserSelect
      root.style.MozUserSelect = 'none'
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'view' implicitly has an 'any' type.
  function yesdrag(view, noclick) {
    const root = view.document.documentElement,
      selection = select(view).on('dragstart.drag', null)
    if (noclick) {
      selection.on('click.drag', noevent, true)
      setTimeout(function () {
        selection.on('click.drag', null)
      }, 0)
    }
    if ('onselectstart' in root) {
      selection.on('selectstart.drag', null)
    } else {
      root.style.MozUserSelect = root.__noselect
      delete root.__noselect
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  const constant$2 = x => () => x

  function DragEvent(
    // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
    type,
    {
      // @ts-expect-error TS(7031) FIXME: Binding element 'sourceEvent' implicitly has an 'a... Remove this comment to see the full error message
      sourceEvent,
      // @ts-expect-error TS(7031) FIXME: Binding element 'subject' implicitly has an 'any' ... Remove this comment to see the full error message
      subject,
      // @ts-expect-error TS(7031) FIXME: Binding element 'target' implicitly has an 'any' t... Remove this comment to see the full error message
      target,
      // @ts-expect-error TS(7031) FIXME: Binding element 'identifier' implicitly has an 'an... Remove this comment to see the full error message
      identifier,
      // @ts-expect-error TS(7031) FIXME: Binding element 'active' implicitly has an 'any' t... Remove this comment to see the full error message
      active,
      // @ts-expect-error TS(7031) FIXME: Binding element 'x' implicitly has an 'any' type.
      x,
      // @ts-expect-error TS(7031) FIXME: Binding element 'y' implicitly has an 'any' type.
      y,
      // @ts-expect-error TS(7031) FIXME: Binding element 'dx' implicitly has an 'any' type.
      dx,
      // @ts-expect-error TS(7031) FIXME: Binding element 'dy' implicitly has an 'any' type.
      dy,
      // @ts-expect-error TS(7031) FIXME: Binding element 'dispatch' implicitly has an 'any'... Remove this comment to see the full error message
      dispatch,
    }
  ) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    Object.defineProperties(this, {
      type: { value: type, enumerable: true, configurable: true },
      sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
      subject: { value: subject, enumerable: true, configurable: true },
      target: { value: target, enumerable: true, configurable: true },
      identifier: { value: identifier, enumerable: true, configurable: true },
      active: { value: active, enumerable: true, configurable: true },
      x: { value: x, enumerable: true, configurable: true },
      y: { value: y, enumerable: true, configurable: true },
      dx: { value: dx, enumerable: true, configurable: true },
      dy: { value: dy, enumerable: true, configurable: true },
      _: { value: dispatch },
    })
  }

  DragEvent.prototype.on = function () {
    const value = this._.on.apply(this._, arguments)
    return value === this._ ? this : value
  }

  // Ignore right-click, since that should open the context menu.
  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function defaultFilter(event) {
    return !event.ctrlKey && !event.button
  }

  function defaultContainer() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.parentNode
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function defaultSubject(event, d) {
    return d == null ? { x: event.x, y: event.y } : d
  }

  function defaultTouchable() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return navigator.maxTouchPoints || 'ontouchstart' in this
  }

  function drag() {
    let filter = defaultFilter,
      container = defaultContainer,
      subject = defaultSubject,
      touchable = defaultTouchable,
      gestures = {},
      // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 3.
      listeners = dispatch('start', 'drag', 'end'),
      active = 0,
      // @ts-expect-error TS(7034) FIXME: Variable 'mousedownx' implicitly has type 'any' in... Remove this comment to see the full error message
      mousedownx,
      // @ts-expect-error TS(7034) FIXME: Variable 'mousedowny' implicitly has type 'any' in... Remove this comment to see the full error message
      mousedowny,
      // @ts-expect-error TS(7034) FIXME: Variable 'mousemoving' implicitly has type 'any' i... Remove this comment to see the full error message
      mousemoving,
      // @ts-expect-error TS(7034) FIXME: Variable 'touchending' implicitly has type 'any' i... Remove this comment to see the full error message
      touchending,
      clickDistance2 = 0

    // @ts-expect-error TS(7006) FIXME: Parameter 'selection' implicitly has an 'any' type... Remove this comment to see the full error message
    function drag(selection) {
      selection
        .on('mousedown.drag', mousedowned)
        .filter(touchable)
        .on('touchstart.drag', touchstarted)
        .on('touchmove.drag', touchmoved)
        .on('touchend.drag touchcancel.drag', touchended)
        .style('touch-action', 'none')
        .style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)')
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function mousedowned(event, d) {
      // @ts-expect-error TS(7005) FIXME: Variable 'touchending' implicitly has an 'any' typ... Remove this comment to see the full error message
      if (touchending || !filter.call(this, event, d)) return
      // @ts-expect-error TS(2554) FIXME: Expected 6 arguments, but got 5.
      const gesture = beforestart(this, container.call(this, event, d), event, d, 'mouse')
      if (!gesture) return
      select(event.view).on('mousemove.drag', mousemoved, true).on('mouseup.drag', mouseupped, true)
      dragDisable(event.view)
      nopropagation(event)
      mousemoving = false
      mousedownx = event.clientX
      mousedowny = event.clientY
      // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
      gesture('start', event)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function mousemoved(event) {
      noevent(event)
      // @ts-expect-error TS(7005) FIXME: Variable 'mousemoving' implicitly has an 'any' typ... Remove this comment to see the full error message
      if (!mousemoving) {
        // @ts-expect-error TS(7005) FIXME: Variable 'mousedownx' implicitly has an 'any' type... Remove this comment to see the full error message
        const dx = event.clientX - mousedownx,
          // @ts-expect-error TS(7005) FIXME: Variable 'mousedowny' implicitly has an 'any' type... Remove this comment to see the full error message
          dy = event.clientY - mousedowny
        mousemoving = dx * dx + dy * dy > clickDistance2
      }
      // @ts-expect-error TS(2339) FIXME: Property 'mouse' does not exist on type '{}'.
      gestures.mouse('drag', event)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function mouseupped(event) {
      select(event.view).on('mousemove.drag mouseup.drag', null)
      // @ts-expect-error TS(7005) FIXME: Variable 'mousemoving' implicitly has an 'any' typ... Remove this comment to see the full error message
      yesdrag(event.view, mousemoving)
      noevent(event)
      // @ts-expect-error TS(2339) FIXME: Property 'mouse' does not exist on type '{}'.
      gestures.mouse('end', event)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function touchstarted(event, d) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (!filter.call(this, event, d)) return
      let touches = event.changedTouches,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        c = container.call(this, event, d),
        n = touches.length,
        i,
        gesture

      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        if ((gesture = beforestart(this, c, event, d, touches[i].identifier, touches[i]))) {
          nopropagation(event)
          gesture('start', event, touches[i])
        }
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function touchmoved(event) {
      let touches = event.changedTouches,
        n = touches.length,
        i,
        gesture

      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        if ((gesture = gestures[touches[i].identifier])) {
          noevent(event)
          gesture('drag', event, touches[i])
        }
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function touchended(event) {
      let touches = event.changedTouches,
        n = touches.length,
        i,
        gesture

      // @ts-expect-error TS(7005) FIXME: Variable 'touchending' implicitly has an 'any' typ... Remove this comment to see the full error message
      if (touchending) clearTimeout(touchending)
      touchending = setTimeout(function () {
        touchending = null
      }, 500) // Ghost clicks are delayed!
      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        if ((gesture = gestures[touches[i].identifier])) {
          nopropagation(event)
          gesture('end', event, touches[i])
        }
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'that' implicitly has an 'any' type.
    function beforestart(that, container, event, d, identifier, touch) {
      let dispatch = listeners.copy(),
        p = pointer(touch || event, container),
        // @ts-expect-error TS(7034) FIXME: Variable 'dx' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        dx,
        // @ts-expect-error TS(7034) FIXME: Variable 'dy' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        dy,
        // @ts-expect-error TS(7034) FIXME: Variable 's' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        s

      if (
        (s = subject.call(
          that,
          // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
          new DragEvent('beforestart', {
            sourceEvent: event,
            target: drag,
            identifier,
            active,
            x: p[0],
            y: p[1],
            dx: 0,
            dy: 0,
            dispatch,
          }),
          d
        )) == null
      )
        return

      dx = s.x - p[0] || 0
      dy = s.y - p[1] || 0

      // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
      return function gesture(type, event, touch) {
        let p0 = p,
          n
        switch (type) {
          case 'start':
            // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
            ;(gestures[identifier] = gesture), (n = active++)
            break
          case 'end':
            // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
            delete gestures[identifier], --active // nobreak
          case 'drag':
            ;(p = pointer(touch || event, container)), (n = active)
            break
        }
        dispatch.call(
          type,
          that,
          // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
          new DragEvent(type, {
            sourceEvent: event,
            // @ts-expect-error TS(7005) FIXME: Variable 's' implicitly has an 'any' type.
            subject: s,
            target: drag,
            identifier,
            active: n,
            // @ts-expect-error TS(7005) FIXME: Variable 'dx' implicitly has an 'any' type.
            x: p[0] + dx,
            // @ts-expect-error TS(7005) FIXME: Variable 'dy' implicitly has an 'any' type.
            y: p[1] + dy,
            dx: p[0] - p0[0],
            dy: p[1] - p0[1],
            dispatch,
          }),
          d
        )
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    drag.filter = function (_) {
      return arguments.length ? ((filter = typeof _ === 'function' ? _ : constant$2(!!_)), drag) : filter
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    drag.container = function (_) {
      return arguments.length ? ((container = typeof _ === 'function' ? _ : constant$2(_)), drag) : container
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    drag.subject = function (_) {
      return arguments.length ? ((subject = typeof _ === 'function' ? _ : constant$2(_)), drag) : subject
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    drag.touchable = function (_) {
      return arguments.length ? ((touchable = typeof _ === 'function' ? _ : constant$2(!!_)), drag) : touchable
    }

    drag.on = function () {
      const value = listeners.on.apply(listeners, arguments)
      return value === listeners ? drag : value
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    drag.clickDistance = function (_) {
      return arguments.length ? ((clickDistance2 = (_ = +_) * _), drag) : Math.sqrt(clickDistance2)
    }

    return drag
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'constructor' implicitly has an 'any' ty... Remove this comment to see the full error message
  function define(constructor, factory, prototype) {
    constructor.prototype = factory.prototype = prototype
    prototype.constructor = constructor
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.
  function extend(parent, definition) {
    const prototype = Object.create(parent.prototype)
    for (const key in definition) prototype[key] = definition[key]
    return prototype
  }

  function Color() {}

  const darker = 0.7
  const brighter = 1 / darker

  const reI = '\\s*([+-]?\\d+)\\s*',
    reN = '\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*',
    reP = '\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*',
    reHex = /^#([0-9a-f]{3,8})$/,
    reRgbInteger = new RegExp('^rgb\\(' + [reI, reI, reI] + '\\)$'),
    reRgbPercent = new RegExp('^rgb\\(' + [reP, reP, reP] + '\\)$'),
    reRgbaInteger = new RegExp('^rgba\\(' + [reI, reI, reI, reN] + '\\)$'),
    reRgbaPercent = new RegExp('^rgba\\(' + [reP, reP, reP, reN] + '\\)$'),
    reHslPercent = new RegExp('^hsl\\(' + [reN, reP, reP] + '\\)$'),
    reHslaPercent = new RegExp('^hsla\\(' + [reN, reP, reP, reN] + '\\)$')

  const named = {
    aliceblue: 0xf0f8ff,
    antiquewhite: 0xfaebd7,
    aqua: 0x00ffff,
    aquamarine: 0x7fffd4,
    azure: 0xf0ffff,
    beige: 0xf5f5dc,
    bisque: 0xffe4c4,
    black: 0x000000,
    blanchedalmond: 0xffebcd,
    blue: 0x0000ff,
    blueviolet: 0x8a2be2,
    brown: 0xa52a2a,
    burlywood: 0xdeb887,
    cadetblue: 0x5f9ea0,
    chartreuse: 0x7fff00,
    chocolate: 0xd2691e,
    coral: 0xff7f50,
    cornflowerblue: 0x6495ed,
    cornsilk: 0xfff8dc,
    crimson: 0xdc143c,
    cyan: 0x00ffff,
    darkblue: 0x00008b,
    darkcyan: 0x008b8b,
    darkgoldenrod: 0xb8860b,
    darkgray: 0xa9a9a9,
    darkgreen: 0x006400,
    darkgrey: 0xa9a9a9,
    darkkhaki: 0xbdb76b,
    darkmagenta: 0x8b008b,
    darkolivegreen: 0x556b2f,
    darkorange: 0xff8c00,
    darkorchid: 0x9932cc,
    darkred: 0x8b0000,
    darksalmon: 0xe9967a,
    darkseagreen: 0x8fbc8f,
    darkslateblue: 0x483d8b,
    darkslategray: 0x2f4f4f,
    darkslategrey: 0x2f4f4f,
    darkturquoise: 0x00ced1,
    darkviolet: 0x9400d3,
    deeppink: 0xff1493,
    deepskyblue: 0x00bfff,
    dimgray: 0x696969,
    dimgrey: 0x696969,
    dodgerblue: 0x1e90ff,
    firebrick: 0xb22222,
    floralwhite: 0xfffaf0,
    forestgreen: 0x228b22,
    fuchsia: 0xff00ff,
    gainsboro: 0xdcdcdc,
    ghostwhite: 0xf8f8ff,
    gold: 0xffd700,
    goldenrod: 0xdaa520,
    gray: 0x808080,
    green: 0x008000,
    greenyellow: 0xadff2f,
    grey: 0x808080,
    honeydew: 0xf0fff0,
    hotpink: 0xff69b4,
    indianred: 0xcd5c5c,
    indigo: 0x4b0082,
    ivory: 0xfffff0,
    khaki: 0xf0e68c,
    lavender: 0xe6e6fa,
    lavenderblush: 0xfff0f5,
    lawngreen: 0x7cfc00,
    lemonchiffon: 0xfffacd,
    lightblue: 0xadd8e6,
    lightcoral: 0xf08080,
    lightcyan: 0xe0ffff,
    lightgoldenrodyellow: 0xfafad2,
    lightgray: 0xd3d3d3,
    lightgreen: 0x90ee90,
    lightgrey: 0xd3d3d3,
    lightpink: 0xffb6c1,
    lightsalmon: 0xffa07a,
    lightseagreen: 0x20b2aa,
    lightskyblue: 0x87cefa,
    lightslategray: 0x778899,
    lightslategrey: 0x778899,
    lightsteelblue: 0xb0c4de,
    lightyellow: 0xffffe0,
    lime: 0x00ff00,
    limegreen: 0x32cd32,
    linen: 0xfaf0e6,
    magenta: 0xff00ff,
    maroon: 0x800000,
    mediumaquamarine: 0x66cdaa,
    mediumblue: 0x0000cd,
    mediumorchid: 0xba55d3,
    mediumpurple: 0x9370db,
    mediumseagreen: 0x3cb371,
    mediumslateblue: 0x7b68ee,
    mediumspringgreen: 0x00fa9a,
    mediumturquoise: 0x48d1cc,
    mediumvioletred: 0xc71585,
    midnightblue: 0x191970,
    mintcream: 0xf5fffa,
    mistyrose: 0xffe4e1,
    moccasin: 0xffe4b5,
    navajowhite: 0xffdead,
    navy: 0x000080,
    oldlace: 0xfdf5e6,
    olive: 0x808000,
    olivedrab: 0x6b8e23,
    orange: 0xffa500,
    orangered: 0xff4500,
    orchid: 0xda70d6,
    palegoldenrod: 0xeee8aa,
    palegreen: 0x98fb98,
    paleturquoise: 0xafeeee,
    palevioletred: 0xdb7093,
    papayawhip: 0xffefd5,
    peachpuff: 0xffdab9,
    peru: 0xcd853f,
    pink: 0xffc0cb,
    plum: 0xdda0dd,
    powderblue: 0xb0e0e6,
    purple: 0x800080,
    rebeccapurple: 0x663399,
    red: 0xff0000,
    rosybrown: 0xbc8f8f,
    royalblue: 0x4169e1,
    saddlebrown: 0x8b4513,
    salmon: 0xfa8072,
    sandybrown: 0xf4a460,
    seagreen: 0x2e8b57,
    seashell: 0xfff5ee,
    sienna: 0xa0522d,
    silver: 0xc0c0c0,
    skyblue: 0x87ceeb,
    slateblue: 0x6a5acd,
    slategray: 0x708090,
    slategrey: 0x708090,
    snow: 0xfffafa,
    springgreen: 0x00ff7f,
    steelblue: 0x4682b4,
    tan: 0xd2b48c,
    teal: 0x008080,
    thistle: 0xd8bfd8,
    tomato: 0xff6347,
    turquoise: 0x40e0d0,
    violet: 0xee82ee,
    wheat: 0xf5deb3,
    white: 0xffffff,
    whitesmoke: 0xf5f5f5,
    yellow: 0xffff00,
    yellowgreen: 0x9acd32,
  }

  define(Color, color, {
    // @ts-expect-error TS(7006) FIXME: Parameter 'channels' implicitly has an 'any' type.
    copy: function (channels) {
      // @ts-expect-error TS(2550) FIXME: Property 'assign' does not exist on type 'ObjectCo... Remove this comment to see the full error message
      return Object.assign(new this.constructor(), this, channels)
    },
    displayable: function () {
      return this.rgb().displayable()
    },
    hex: color_formatHex, // Deprecated! Use color.formatHex.
    formatHex: color_formatHex,
    formatHsl: color_formatHsl,
    formatRgb: color_formatRgb,
    toString: color_formatRgb,
  })

  function color_formatHex() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.rgb().formatHex()
  }

  function color_formatHsl() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return hslConvert(this).formatHsl()
  }

  function color_formatRgb() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.rgb().formatRgb()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'format' implicitly has an 'any' type.
  function color(format) {
    let m, l
    format = (format + '').trim().toLowerCase()
    return (m = reHex.exec(format))
      ? ((l = m[1].length),
        (m = parseInt(m[1], 16)),
        l === 6
          ? rgbn(m) // #ff0000
          : l === 3
          ? // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
            new Rgb(
              ((m >> 8) & 0xf) | ((m >> 4) & 0xf0),
              ((m >> 4) & 0xf) | (m & 0xf0),
              ((m & 0xf) << 4) | (m & 0xf),
              1
            ) // #f00
          : l === 8
          ? rgba((m >> 24) & 0xff, (m >> 16) & 0xff, (m >> 8) & 0xff, (m & 0xff) / 0xff) // #ff000000
          : l === 4
          ? rgba(
              ((m >> 12) & 0xf) | ((m >> 8) & 0xf0),
              ((m >> 8) & 0xf) | ((m >> 4) & 0xf0),
              ((m >> 4) & 0xf) | (m & 0xf0),
              (((m & 0xf) << 4) | (m & 0xf)) / 0xff
            ) // #f000
          : null) // invalid hex
      : (m = reRgbInteger.exec(format))
      ? // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
      : (m = reRgbPercent.exec(format))
      ? // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        new Rgb((m[1] * 255) / 100, (m[2] * 255) / 100, (m[3] * 255) / 100, 1) // rgb(100%, 0%, 0%)
      : (m = reRgbaInteger.exec(format))
      ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
      : (m = reRgbaPercent.exec(format))
      ? // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
        rgba((m[1] * 255) / 100, (m[2] * 255) / 100, (m[3] * 255) / 100, m[4]) // rgb(100%, 0%, 0%, 1)
      : (m = reHslPercent.exec(format))
      ? // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
        hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
      : (m = reHslaPercent.exec(format))
      ? // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
        hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
      : named.hasOwnProperty(format)
      ? // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        rgbn(named[format]) // eslint-disable-line no-prototype-builtins
      : format === 'transparent'
      ? // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        new Rgb(NaN, NaN, NaN, 0)
      : null
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'n' implicitly has an 'any' type.
  function rgbn(n) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Rgb((n >> 16) & 0xff, (n >> 8) & 0xff, n & 0xff, 1)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'r' implicitly has an 'any' type.
  function rgba(r, g, b, a) {
    if (a <= 0) r = g = b = NaN
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Rgb(r, g, b, a)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'o' implicitly has an 'any' type.
  function rgbConvert(o) {
    if (!(o instanceof Color)) o = color(o)
    // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 0.
    if (!o) return new Rgb()
    o = o.rgb()
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Rgb(o.r, o.g, o.b, o.opacity)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'r' implicitly has an 'any' type.
  function rgb(r, g, b, opacity) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'r' implicitly has an 'any' type.
  function Rgb(r, g, b, opacity) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.r = +r
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.g = +g
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.b = +b
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.opacity = +opacity
  }

  define(
    Rgb,
    rgb,
    extend(Color, {
      // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
      brighter: function (k) {
        k = k == null ? brighter : Math.pow(brighter, k)
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity)
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
      darker: function (k) {
        k = k == null ? darker : Math.pow(darker, k)
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity)
      },
      rgb: function () {
        return this
      },
      displayable: function () {
        return (
          -0.5 <= this.r &&
          this.r < 255.5 &&
          -0.5 <= this.g &&
          this.g < 255.5 &&
          -0.5 <= this.b &&
          this.b < 255.5 &&
          0 <= this.opacity &&
          this.opacity <= 1
        )
      },
      hex: rgb_formatHex, // Deprecated! Use color.formatHex.
      formatHex: rgb_formatHex,
      formatRgb: rgb_formatRgb,
      toString: rgb_formatRgb,
    })
  )

  function rgb_formatHex() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return '#' + hex(this.r) + hex(this.g) + hex(this.b)
  }

  function rgb_formatRgb() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    let a = this.opacity
    a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a))
    return (
      (a === 1 ? 'rgb(' : 'rgba(') +
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      Math.max(0, Math.min(255, Math.round(this.r) || 0)) +
      ', ' +
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      Math.max(0, Math.min(255, Math.round(this.g) || 0)) +
      ', ' +
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      Math.max(0, Math.min(255, Math.round(this.b) || 0)) +
      (a === 1 ? ')' : ', ' + a + ')')
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function hex(value) {
    value = Math.max(0, Math.min(255, Math.round(value) || 0))
    return (value < 16 ? '0' : '') + value.toString(16)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'h' implicitly has an 'any' type.
  function hsla(h, s, l, a) {
    if (a <= 0) h = s = l = NaN
    else if (l <= 0 || l >= 1) h = s = NaN
    else if (s <= 0) h = NaN
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Hsl(h, s, l, a)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'o' implicitly has an 'any' type.
  function hslConvert(o) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity)
    if (!(o instanceof Color)) o = color(o)
    // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 0.
    if (!o) return new Hsl()
    if (o instanceof Hsl) return o
    o = o.rgb()
    let r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      h = NaN,
      s = max - min,
      l = (max + min) / 2
    if (s) {
      // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
      if (r === max) h = (g - b) / s + (g < b) * 6
      else if (g === max) h = (b - r) / s + 2
      else h = (r - g) / s + 4
      s /= l < 0.5 ? max + min : 2 - max - min
      h *= 60
    } else {
      s = l > 0 && l < 1 ? 0 : h
    }
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Hsl(h, s, l, o.opacity)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'h' implicitly has an 'any' type.
  function hsl(h, s, l, opacity) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'h' implicitly has an 'any' type.
  function Hsl(h, s, l, opacity) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.h = +h
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.s = +s
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.l = +l
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.opacity = +opacity
  }

  define(
    Hsl,
    hsl,
    extend(Color, {
      // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
      brighter: function (k) {
        k = k == null ? brighter : Math.pow(brighter, k)
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Hsl(this.h, this.s, this.l * k, this.opacity)
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
      darker: function (k) {
        k = k == null ? darker : Math.pow(darker, k)
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Hsl(this.h, this.s, this.l * k, this.opacity)
      },
      rgb: function () {
        // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
        const h = (this.h % 360) + (this.h < 0) * 360,
          s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
          l = this.l,
          m2 = l + (l < 0.5 ? l : 1 - l) * s,
          m1 = 2 * l - m2
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Rgb(
          hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
          hsl2rgb(h, m1, m2),
          hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
          this.opacity
        )
      },
      displayable: function () {
        return (
          ((0 <= this.s && this.s <= 1) || isNaN(this.s)) &&
          0 <= this.l &&
          this.l <= 1 &&
          0 <= this.opacity &&
          this.opacity <= 1
        )
      },
      formatHsl: function () {
        let a = this.opacity
        a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a))
        return (
          (a === 1 ? 'hsl(' : 'hsla(') +
          (this.h || 0) +
          ', ' +
          (this.s || 0) * 100 +
          '%, ' +
          (this.l || 0) * 100 +
          '%' +
          (a === 1 ? ')' : ', ' + a + ')')
        )
      },
    })
  )

  /* From FvD 13.37, CSS Color Module Level 3 */
  // @ts-expect-error TS(7006) FIXME: Parameter 'h' implicitly has an 'any' type.
  function hsl2rgb(h, m1, m2) {
    return (h < 60 ? m1 + ((m2 - m1) * h) / 60 : h < 180 ? m2 : h < 240 ? m1 + ((m2 - m1) * (240 - h)) / 60 : m1) * 255
  }

  const radians = Math.PI / 180
  const degrees = 180 / Math.PI

  // https://observablehq.com/@mbostock/lab-and-rgb
  const K = 18,
    Xn = 0.96422,
    Yn = 1,
    Zn = 0.82521,
    t0 = 4 / 29,
    t1 = 6 / 29,
    t2 = 3 * t1 * t1,
    t3 = t1 * t1 * t1

  // @ts-expect-error TS(7006) FIXME: Parameter 'o' implicitly has an 'any' type.
  function labConvert(o) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity)
    if (o instanceof Hcl) return hcl2lab(o)
    if (!(o instanceof Rgb)) o = rgbConvert(o)
    let r = rgb2lrgb(o.r),
      g = rgb2lrgb(o.g),
      b = rgb2lrgb(o.b),
      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn),
      x,
      z
    if (r === g && g === b) x = z = y
    else {
      x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn)
      z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn)
    }
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'l' implicitly has an 'any' type.
  function gray(l, opacity) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Lab(l, 0, 0, opacity == null ? 1 : opacity)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'l' implicitly has an 'any' type.
  function lab(l, a, b, opacity) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'l' implicitly has an 'any' type.
  function Lab(l, a, b, opacity) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.l = +l
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.a = +a
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.b = +b
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.opacity = +opacity
  }

  define(
    Lab,
    lab,
    extend(Color, {
      // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
      brighter: function (k) {
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity)
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
      darker: function (k) {
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity)
      },
      rgb: function () {
        let y = (this.l + 16) / 116,
          x = isNaN(this.a) ? y : y + this.a / 500,
          z = isNaN(this.b) ? y : y - this.b / 200
        x = Xn * lab2xyz(x)
        y = Yn * lab2xyz(y)
        z = Zn * lab2xyz(z)
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Rgb(
          lrgb2rgb(3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
          lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.033454 * z),
          lrgb2rgb(0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
          this.opacity
        )
      },
    })
  )

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function xyz2lab(t) {
    return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function lab2xyz(t) {
    return t > t1 ? t * t * t : t2 * (t - t0)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function lrgb2rgb(x) {
    return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function rgb2lrgb(x) {
    return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'o' implicitly has an 'any' type.
  function hclConvert(o) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity)
    if (!(o instanceof Lab)) o = labConvert(o)
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0 < o.l && o.l < 100 ? 0 : NaN, o.l, o.opacity)
    const h = Math.atan2(o.b, o.a) * degrees
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'l' implicitly has an 'any' type.
  function lch(l, c, h, opacity) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'h' implicitly has an 'any' type.
  function hcl(h, c, l, opacity) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'h' implicitly has an 'any' type.
  function Hcl(h, c, l, opacity) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.h = +h
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.c = +c
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.l = +l
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.opacity = +opacity
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'o' implicitly has an 'any' type.
  function hcl2lab(o) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity)
    const h = o.h * radians
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity)
  }

  define(
    Hcl,
    hcl,
    extend(Color, {
      // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
      brighter: function (k) {
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity)
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
      darker: function (k) {
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity)
      },
      rgb: function () {
        return hcl2lab(this).rgb()
      },
    })
  )

  const A = -0.14861,
    B = +1.78277,
    C = -0.29227,
    D = -0.90649,
    E = +1.97294,
    ED = E * D,
    EB = E * B,
    BC_DA = B * C - D * A

  // @ts-expect-error TS(7006) FIXME: Parameter 'o' implicitly has an 'any' type.
  function cubehelixConvert(o) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity)
    if (!(o instanceof Rgb)) o = rgbConvert(o)
    const r = o.r / 255,
      g = o.g / 255,
      b = o.b / 255,
      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
      bl = b - l,
      k = (E * (g - l) - C * bl) / D,
      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
      h = s ? Math.atan2(k, bl) * degrees - 120 : NaN
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'h' implicitly has an 'any' type.
  function cubehelix(h, s, l, opacity) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'h' implicitly has an 'any' type.
  function Cubehelix(h, s, l, opacity) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.h = +h
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.s = +s
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.l = +l
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.opacity = +opacity
  }

  define(
    Cubehelix,
    cubehelix,
    extend(Color, {
      // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
      brighter: function (k) {
        k = k == null ? brighter : Math.pow(brighter, k)
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity)
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
      darker: function (k) {
        k = k == null ? darker : Math.pow(darker, k)
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Cubehelix(this.h, this.s, this.l * k, this.opacity)
      },
      rgb: function () {
        const h = isNaN(this.h) ? 0 : (this.h + 120) * radians,
          l = +this.l,
          a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
          cosh = Math.cos(h),
          sinh = Math.sin(h)
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        return new Rgb(
          255 * (l + a * (A * cosh + B * sinh)),
          255 * (l + a * (C * cosh + D * sinh)),
          255 * (l + a * (E * cosh)),
          this.opacity
        )
      },
    })
  )

  // @ts-expect-error TS(7006) FIXME: Parameter 't1' implicitly has an 'any' type.
  function basis(t1, v0, v1, v2, v3) {
    const t2 = t1 * t1,
      t3 = t2 * t1
    return (
      ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function basis$1(values) {
    const n = values.length - 1
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      const i = t <= 0 ? (t = 0) : t >= 1 ? ((t = 1), n - 1) : Math.floor(t * n),
        v1 = values[i],
        v2 = values[i + 1],
        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1
      return basis((t - i / n) * n, v0, v1, v2, v3)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
  function basisClosed(values) {
    const n = values.length
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      const i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
        v0 = values[(i + n - 1) % n],
        v1 = values[i % n],
        v2 = values[(i + 1) % n],
        v3 = values[(i + 2) % n]
      return basis((t - i / n) * n, v0, v1, v2, v3)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  const constant$3 = x => () => x

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function linear(a, d) {
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      return a + t * d
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function exponential(a, b, y) {
    return (
      (a = Math.pow(a, y)),
      (b = Math.pow(b, y) - a),
      (y = 1 / y),
      // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
      function (t) {
        return Math.pow(a + t * b, y)
      }
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function hue(a, b) {
    const d = b - a
    return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant$3(isNaN(a) ? b : a)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
  function gamma(y) {
    return (y = +y) === 1
      ? nogamma
      : // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
        function (a, b) {
          return b - a ? exponential(a, b, y) : constant$3(isNaN(a) ? b : a)
        }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function nogamma(a, b) {
    const d = b - a
    return d ? linear(a, d) : constant$3(isNaN(a) ? b : a)
  }

  const interpolateRgb = (function rgbGamma(y) {
    const color = gamma(y)

    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    function rgb$1(start, end) {
      // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 1.
      const r = color((start = rgb(start)).r, (end = rgb(end)).r),
        g = color(start.g, end.g),
        b = color(start.b, end.b),
        opacity = nogamma(start.opacity, end.opacity)
      // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
      return function (t) {
        start.r = r(t)
        start.g = g(t)
        start.b = b(t)
        start.opacity = opacity(t)
        return start + ''
      }
    }

    rgb$1.gamma = rgbGamma

    return rgb$1
  })(1)

  // @ts-expect-error TS(7006) FIXME: Parameter 'spline' implicitly has an 'any' type.
  function rgbSpline(spline) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'colors' implicitly has an 'any' type.
    return function (colors) {
      let n = colors.length,
        r = new Array(n),
        g = new Array(n),
        b = new Array(n),
        i,
        // @ts-expect-error TS(7034) FIXME: Variable 'color' implicitly has type 'any' in some... Remove this comment to see the full error message
        color
      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 1.
        color = rgb(colors[i])
        r[i] = color.r || 0
        g[i] = color.g || 0
        b[i] = color.b || 0
      }
      r = spline(r)
      g = spline(g)
      b = spline(b)
      color.opacity = 1
      // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
      return function (t) {
        // @ts-expect-error TS(7005) FIXME: Variable 'color' implicitly has an 'any' type.
        color.r = r(t)
        // @ts-expect-error TS(7005) FIXME: Variable 'color' implicitly has an 'any' type.
        color.g = g(t)
        // @ts-expect-error TS(7005) FIXME: Variable 'color' implicitly has an 'any' type.
        color.b = b(t)
        // @ts-expect-error TS(7005) FIXME: Variable 'color' implicitly has an 'any' type.
        return color + ''
      }
    }
  }

  const rgbBasis = rgbSpline(basis$1)
  const rgbBasisClosed = rgbSpline(basisClosed)

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function numberArray(a, b) {
    if (!b) b = []
    let n = a ? Math.min(b.length, a.length) : 0,
      c = b.slice(),
      i
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      for (i = 0; i < n; ++i) c[i] = a[i] * (1 - t) + b[i] * t
      return c
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function isNumberArray(x) {
    return ArrayBuffer.isView(x) && !(x instanceof DataView)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function array$2(a, b) {
    return (isNumberArray(b) ? numberArray : genericArray)(a, b)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function genericArray(a, b) {
    let nb = b ? b.length : 0,
      na = a ? Math.min(nb, a.length) : 0,
      x = new Array(na),
      c = new Array(nb),
      i

    for (i = 0; i < na; ++i) x[i] = interpolate(a[i], b[i])
    for (; i < nb; ++i) c[i] = b[i]

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      for (i = 0; i < na; ++i) c[i] = x[i](t)
      return c
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function date(a, b) {
    const d = new Date()
    return (
      (a = +a),
      (b = +b),
      // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
      function (t) {
        return d.setTime(a * (1 - t) + b * t), d
      }
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function interpolateNumber(a, b) {
    return (
      (a = +a),
      (b = +b),
      // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
      function (t) {
        return a * (1 - t) + b * t
      }
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function object(a, b) {
    let i = {},
      c = {},
      k

    if (a === null || typeof a !== 'object') a = {}
    if (b === null || typeof b !== 'object') b = {}

    for (k in b) {
      if (k in a) {
        // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        i[k] = interpolate(a[k], b[k])
      } else {
        // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        c[k] = b[k]
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      for (k in i) c[k] = i[k](t)
      return c
    }
  }

  const reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
    reB = new RegExp(reA.source, 'g')

  // @ts-expect-error TS(7006) FIXME: Parameter 'b' implicitly has an 'any' type.
  function zero(b) {
    return function () {
      return b
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'b' implicitly has an 'any' type.
  function one(b) {
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      return b(t) + ''
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function interpolateString(a, b) {
    let bi = (reA.lastIndex = reB.lastIndex = 0), // scan index for next number in b
      am, // current match in a
      bm, // current match in b
      bs, // string preceding current number in b, if any
      i = -1, // index in s
      // @ts-expect-error TS(7034) FIXME: Variable 's' implicitly has type 'any[]' in some l... Remove this comment to see the full error message
      s = [], // string constants and placeholders
      // @ts-expect-error TS(7034) FIXME: Variable 'q' implicitly has type 'any[]' in some l... Remove this comment to see the full error message
      q = [] // number interpolators

    // Coerce inputs to strings.
    ;(a = a + ''), (b = b + '')

    // Interpolate pairs of numbers in a & b.
    while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
      if ((bs = bm.index) > bi) {
        // a string precedes the next number in b
        bs = b.slice(bi, bs)
        if (s[i]) s[i] += bs // coalesce with previous string
        else s[++i] = bs
      }
      if ((am = am[0]) === (bm = bm[0])) {
        // numbers in a & b match
        if (s[i]) s[i] += bm // coalesce with previous string
        else s[++i] = bm
      } else {
        // interpolate non-matching numbers
        s[++i] = null
        q.push({ i: i, x: interpolateNumber(am, bm) })
      }
      bi = reB.lastIndex
    }

    // Add remains of b.
    if (bi < b.length) {
      bs = b.slice(bi)
      if (s[i]) s[i] += bs // coalesce with previous string
      else s[++i] = bs
    }

    // Special optimization for only a single match.
    // Otherwise, interpolate each of the numbers and rejoin the string.
    return s.length < 2
      ? q[0]
        ? one(q[0].x)
        : zero(b)
      : ((b = q.length),
        // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
        function (t) {
          // @ts-expect-error TS(7005) FIXME: Variable 'q' implicitly has an 'any[]' type.
          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t)
          // @ts-expect-error TS(7005) FIXME: Variable 's' implicitly has an 'any[]' type.
          return s.join('')
        })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function interpolate(a, b) {
    let t = typeof b,
      c
    return b == null || t === 'boolean'
      ? constant$3(b)
      : (t === 'number'
          ? interpolateNumber
          : t === 'string'
          ? (c = color(b))
            ? ((b = c), interpolateRgb)
            : interpolateString
          : b instanceof color
          ? interpolateRgb
          : b instanceof Date
          ? date
          : isNumberArray(b)
          ? numberArray
          : Array.isArray(b)
          ? genericArray
          : (typeof b.valueOf !== 'function' && typeof b.toString !== 'function') || isNaN(b)
          ? object
          : interpolateNumber)(a, b)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'range' implicitly has an 'any' type.
  function discrete(range) {
    const n = range.length
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))]
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function hue$1(a, b) {
    const i = hue(+a, +b)
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      const x = i(t)
      return x - 360 * Math.floor(x / 360)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function interpolateRound(a, b) {
    return (
      (a = +a),
      (b = +b),
      // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
      function (t) {
        return Math.round(a * (1 - t) + b * t)
      }
    )
  }

  const degrees$1 = 180 / Math.PI

  const identity$2 = {
    translateX: 0,
    translateY: 0,
    rotate: 0,
    skewX: 0,
    scaleX: 1,
    scaleY: 1,
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function decompose(a, b, c, d, e, f) {
    let scaleX, scaleY, skewX
    if ((scaleX = Math.sqrt(a * a + b * b))) (a /= scaleX), (b /= scaleX)
    if ((skewX = a * c + b * d)) (c -= a * skewX), (d -= b * skewX)
    if ((scaleY = Math.sqrt(c * c + d * d))) (c /= scaleY), (d /= scaleY), (skewX /= scaleY)
    if (a * d < b * c) (a = -a), (b = -b), (skewX = -skewX), (scaleX = -scaleX)
    return {
      translateX: e,
      translateY: f,
      rotate: Math.atan2(b, a) * degrees$1,
      skewX: Math.atan(skewX) * degrees$1,
      scaleX: scaleX,
      scaleY: scaleY,
    }
  }

  // @ts-expect-error TS(7034) FIXME: Variable 'svgNode' implicitly has type 'any' in so... Remove this comment to see the full error message
  let svgNode

  /* eslint-disable no-undef */
  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function parseCss(value) {
    const m = new (typeof DOMMatrix === 'function' ? DOMMatrix : WebKitCSSMatrix)(value + '')
    return m.isIdentity ? identity$2 : decompose(m.a, m.b, m.c, m.d, m.e, m.f)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function parseSvg(value) {
    if (value == null) return identity$2
    // @ts-expect-error TS(7005) FIXME: Variable 'svgNode' implicitly has an 'any' type.
    if (!svgNode) svgNode = document.createElementNS('http://www.w3.org/2000/svg', 'g')
    // @ts-expect-error TS(7005) FIXME: Variable 'svgNode' implicitly has an 'any' type.
    svgNode.setAttribute('transform', value)
    // @ts-expect-error TS(7005) FIXME: Variable 'svgNode' implicitly has an 'any' type.
    if (!(value = svgNode.transform.baseVal.consolidate())) return identity$2
    value = value.matrix
    return decompose(value.a, value.b, value.c, value.d, value.e, value.f)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'parse' implicitly has an 'any' type.
  function interpolateTransform(parse, pxComma, pxParen, degParen) {
    // @ts-expect-error TS(7006) FIXME: Parameter 's' implicitly has an 'any' type.
    function pop(s) {
      return s.length ? s.pop() + ' ' : ''
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'xa' implicitly has an 'any' type.
    function translate(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        const i = s.push('translate(', null, pxComma, null, pxParen)
        q.push({ i: i - 4, x: interpolateNumber(xa, xb) }, { i: i - 2, x: interpolateNumber(ya, yb) })
      } else if (xb || yb) {
        s.push('translate(' + xb + pxComma + yb + pxParen)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    function rotate(a, b, s, q) {
      if (a !== b) {
        if (a - b > 180) b += 360
        else if (b - a > 180) a += 360 // shortest path
        q.push({ i: s.push(pop(s) + 'rotate(', null, degParen) - 2, x: interpolateNumber(a, b) })
      } else if (b) {
        s.push(pop(s) + 'rotate(' + b + degParen)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    function skewX(a, b, s, q) {
      if (a !== b) {
        q.push({ i: s.push(pop(s) + 'skewX(', null, degParen) - 2, x: interpolateNumber(a, b) })
      } else if (b) {
        s.push(pop(s) + 'skewX(' + b + degParen)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'xa' implicitly has an 'any' type.
    function scale(xa, ya, xb, yb, s, q) {
      if (xa !== xb || ya !== yb) {
        const i = s.push(pop(s) + 'scale(', null, ',', null, ')')
        q.push({ i: i - 4, x: interpolateNumber(xa, xb) }, { i: i - 2, x: interpolateNumber(ya, yb) })
      } else if (xb !== 1 || yb !== 1) {
        s.push(pop(s) + 'scale(' + xb + ',' + yb + ')')
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    return function (a, b) {
      // @ts-expect-error TS(7034) FIXME: Variable 's' implicitly has type 'any[]' in some l... Remove this comment to see the full error message
      const s = [], // string constants and placeholders
        // @ts-expect-error TS(7034) FIXME: Variable 'q' implicitly has type 'any[]' in some l... Remove this comment to see the full error message
        q = [] // number interpolators
      ;(a = parse(a)), (b = parse(b))
      // @ts-expect-error TS(7005) FIXME: Variable 's' implicitly has an 'any[]' type.
      translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q)
      // @ts-expect-error TS(7005) FIXME: Variable 's' implicitly has an 'any[]' type.
      rotate(a.rotate, b.rotate, s, q)
      // @ts-expect-error TS(7005) FIXME: Variable 's' implicitly has an 'any[]' type.
      skewX(a.skewX, b.skewX, s, q)
      // @ts-expect-error TS(7005) FIXME: Variable 's' implicitly has an 'any[]' type.
      scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q)
      a = b = null // gc
      // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
      return function (t) {
        let i = -1,
          n = q.length,
          o
        // @ts-expect-error TS(7005) FIXME: Variable 'q' implicitly has an 'any[]' type.
        while (++i < n) s[(o = q[i]).i] = o.x(t)
        // @ts-expect-error TS(7005) FIXME: Variable 's' implicitly has an 'any[]' type.
        return s.join('')
      }
    }
  }

  const interpolateTransformCss = interpolateTransform(parseCss, 'px, ', 'px)', 'deg)')
  const interpolateTransformSvg = interpolateTransform(parseSvg, ', ', ')', ')')

  const epsilon2 = 1e-12

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function cosh(x) {
    return ((x = Math.exp(x)) + 1 / x) / 2
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function sinh(x) {
    return ((x = Math.exp(x)) - 1 / x) / 2
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function tanh(x) {
    return ((x = Math.exp(2 * x)) - 1) / (x + 1)
  }

  const interpolateZoom = (function zoomRho(rho, rho2, rho4) {
    // p0 = [ux0, uy0, w0]
    // p1 = [ux1, uy1, w1]
    // @ts-expect-error TS(7006) FIXME: Parameter 'p0' implicitly has an 'any' type.
    function zoom(p0, p1) {
      let ux0 = p0[0],
        uy0 = p0[1],
        w0 = p0[2],
        ux1 = p1[0],
        uy1 = p1[1],
        w1 = p1[2],
        dx = ux1 - ux0,
        dy = uy1 - uy0,
        d2 = dx * dx + dy * dy,
        i,
        // @ts-expect-error TS(7034) FIXME: Variable 'S' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        S

      // Special case for u0 ≅ u1.
      if (d2 < epsilon2) {
        S = Math.log(w1 / w0) / rho
        // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
        i = function (t) {
          return [
            ux0 + t * dx,
            uy0 + t * dy,
            // @ts-expect-error TS(7005) FIXME: Variable 'S' implicitly has an 'any' type.
            w0 * Math.exp(rho * t * S),
          ]
        }
      }

      // General case.
      else {
        const d1 = Math.sqrt(d2),
          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1)
        S = (r1 - r0) / rho
        // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
        i = function (t) {
          // @ts-expect-error TS(7005) FIXME: Variable 'S' implicitly has an 'any' type.
          const s = t * S,
            coshr0 = cosh(r0),
            u = (w0 / (rho2 * d1)) * (coshr0 * tanh(rho * s + r0) - sinh(r0))
          return [ux0 + u * dx, uy0 + u * dy, (w0 * coshr0) / cosh(rho * s + r0)]
        }
      }

      // @ts-expect-error TS(2339) FIXME: Property 'duration' does not exist on type '(t: an... Remove this comment to see the full error message
      i.duration = (S * 1000 * rho) / Math.SQRT2

      return i
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    zoom.rho = function (_) {
      const _1 = Math.max(1e-3, +_),
        _2 = _1 * _1,
        _4 = _2 * _2
      return zoomRho(_1, _2, _4)
    }

    return zoom
  })(Math.SQRT2, 2, 4)

  // @ts-expect-error TS(7006) FIXME: Parameter 'hue' implicitly has an 'any' type.
  function hsl$1(hue) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    return function (start, end) {
      // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 1.
      const h = hue((start = hsl(start)).h, (end = hsl(end)).h),
        s = nogamma(start.s, end.s),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity)
      // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
      return function (t) {
        start.h = h(t)
        start.s = s(t)
        start.l = l(t)
        start.opacity = opacity(t)
        return start + ''
      }
    }
  }

  const hsl$2 = hsl$1(hue)
  const hslLong = hsl$1(nogamma)

  // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
  function lab$1(start, end) {
    // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 1.
    const l = nogamma((start = lab(start)).l, (end = lab(end)).l),
      a = nogamma(start.a, end.a),
      b = nogamma(start.b, end.b),
      opacity = nogamma(start.opacity, end.opacity)
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      start.l = l(t)
      start.a = a(t)
      start.b = b(t)
      start.opacity = opacity(t)
      return start + ''
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'hue' implicitly has an 'any' type.
  function hcl$1(hue) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    return function (start, end) {
      // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 1.
      const h = hue((start = hcl(start)).h, (end = hcl(end)).h),
        c = nogamma(start.c, end.c),
        l = nogamma(start.l, end.l),
        opacity = nogamma(start.opacity, end.opacity)
      // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
      return function (t) {
        start.h = h(t)
        start.c = c(t)
        start.l = l(t)
        start.opacity = opacity(t)
        return start + ''
      }
    }
  }

  const hcl$2 = hcl$1(hue)
  const hclLong = hcl$1(nogamma)

  // @ts-expect-error TS(7006) FIXME: Parameter 'hue' implicitly has an 'any' type.
  function cubehelix$1(hue) {
    return (function cubehelixGamma(y) {
      y = +y

      // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
      function cubehelix$1(start, end) {
        // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 1.
        const h = hue((start = cubehelix(start)).h, (end = cubehelix(end)).h),
          s = nogamma(start.s, end.s),
          l = nogamma(start.l, end.l),
          opacity = nogamma(start.opacity, end.opacity)
        // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
        return function (t) {
          start.h = h(t)
          start.s = s(t)
          start.l = l(Math.pow(t, y))
          start.opacity = opacity(t)
          return start + ''
        }
      }

      cubehelix$1.gamma = cubehelixGamma

      return cubehelix$1
    })(1)
  }

  const cubehelix$2 = cubehelix$1(hue)
  const cubehelixLong = cubehelix$1(nogamma)

  // @ts-expect-error TS(7006) FIXME: Parameter 'interpolate$1' implicitly has an 'any' ... Remove this comment to see the full error message
  function piecewise(interpolate$1, values) {
    if (values === undefined) (values = interpolate$1), (interpolate$1 = interpolate)
    let i = 0,
      n = values.length - 1,
      v = values[0],
      I = new Array(n < 0 ? 0 : n)
    while (i < n) I[i] = interpolate$1(v, (v = values[++i]))
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      const i = Math.max(0, Math.min(n - 1, Math.floor((t *= n))))
      return I[i](t - i)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'interpolator' implicitly has an 'any' t... Remove this comment to see the full error message
  function quantize(interpolator, n) {
    const samples = new Array(n)
    for (let i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1))
    return samples
  }

  let frame = 0, // is an animation frame pending?
    timeout = 0, // is a timeout pending?
    interval = 0, // are any timers active?
    pokeDelay = 1000, // how frequently we check for clock skew
    // @ts-expect-error TS(7034) FIXME: Variable 'taskHead' implicitly has type 'any' in s... Remove this comment to see the full error message
    taskHead,
    // @ts-expect-error TS(7034) FIXME: Variable 'taskTail' implicitly has type 'any' in s... Remove this comment to see the full error message
    taskTail,
    clockLast = 0,
    clockNow = 0,
    clockSkew = 0,
    // @ts-expect-error TS(2774) FIXME: This condition will always return true since this ... Remove this comment to see the full error message
    clock = typeof performance === 'object' && performance.now ? performance : Date,
    setFrame =
      typeof window === 'object' && window.requestAnimationFrame
        ? window.requestAnimationFrame.bind(window)
        : // @ts-expect-error TS(7006) FIXME: Parameter 'f' implicitly has an 'any' type.
          function (f) {
            setTimeout(f, 17)
          }

  function now() {
    return clockNow || (setFrame(clearNow), (clockNow = clock.now() + clockSkew))
  }

  function clearNow() {
    clockNow = 0
  }

  function Timer() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._call =
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this._time =
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this._next =
        null
  }

  Timer.prototype = timer.prototype = {
    constructor: Timer,
    // @ts-expect-error TS(7006) FIXME: Parameter 'callback' implicitly has an 'any' type.
    restart: function (callback, delay, time) {
      if (typeof callback !== 'function') throw new TypeError('callback is not a function')
      time = (time == null ? now() : +time) + (delay == null ? 0 : +delay)
      // @ts-expect-error TS(7005) FIXME: Variable 'taskTail' implicitly has an 'any' type.
      if (!this._next && taskTail !== this) {
        // @ts-expect-error TS(7005) FIXME: Variable 'taskTail' implicitly has an 'any' type.
        if (taskTail) taskTail._next = this
        else taskHead = this
        taskTail = this
      }
      this._call = callback
      this._time = time
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
      sleep()
    },
    stop: function () {
      if (this._call) {
        this._call = null
        this._time = Infinity
        // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
        sleep()
      }
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'callback' implicitly has an 'any' type.
  function timer(callback, delay, time) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    const t = new Timer()
    t.restart(callback, delay, time)
    return t
  }

  function timerFlush() {
    now() // Get the current time, if not already set.
    ++frame // Pretend we’ve set an alarm, if we haven’t already.
    // @ts-expect-error TS(7005) FIXME: Variable 'taskHead' implicitly has an 'any' type.
    let t = taskHead,
      e
    while (t) {
      if ((e = clockNow - t._time) >= 0) t._call.call(null, e)
      t = t._next
    }
    --frame
  }

  function wake() {
    clockNow = (clockLast = clock.now()) + clockSkew
    frame = timeout = 0
    try {
      timerFlush()
    } finally {
      frame = 0
      nap()
      clockNow = 0
    }
  }

  function poke() {
    const now = clock.now(),
      delay = now - clockLast
    if (delay > pokeDelay) (clockSkew -= delay), (clockLast = now)
  }

  function nap() {
    let t0,
      // @ts-expect-error TS(7005) FIXME: Variable 'taskHead' implicitly has an 'any' type.
      t1 = taskHead,
      t2,
      time = Infinity
    while (t1) {
      if (t1._call) {
        if (time > t1._time) time = t1._time
        ;(t0 = t1), (t1 = t1._next)
      } else {
        ;(t2 = t1._next), (t1._next = null)
        t1 = t0 ? (t0._next = t2) : (taskHead = t2)
      }
    }
    taskTail = t0
    sleep(time)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'time' implicitly has an 'any' type.
  function sleep(time) {
    if (frame) return // Soonest alarm already set, or will be.
    // @ts-expect-error TS(2322) FIXME: Type 'void' is not assignable to type 'number'.
    if (timeout) timeout = clearTimeout(timeout)
    const delay = time - clockNow // Strictly less than if we recomputed clockNow.
    if (delay > 24) {
      if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew)
      // @ts-expect-error TS(2322) FIXME: Type 'void' is not assignable to type 'number'.
      if (interval) interval = clearInterval(interval)
    } else {
      if (!interval) (clockLast = clock.now()), (interval = setInterval(poke, pokeDelay))
      ;(frame = 1), setFrame(wake)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'callback' implicitly has an 'any' type.
  function timeout$1(callback, delay, time) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    const t = new Timer()
    delay = delay == null ? 0 : +delay
    t.restart(
      // @ts-expect-error TS(7006) FIXME: Parameter 'elapsed' implicitly has an 'any' type.
      elapsed => {
        t.stop()
        callback(elapsed + delay)
      },
      delay,
      time
    )
    return t
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'callback' implicitly has an 'any' type.
  function interval$1(callback, delay, time) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    let t = new Timer(),
      total = delay
    if (delay == null) return t.restart(callback, delay, time), t
    t._restart = t.restart
    // @ts-expect-error TS(7006) FIXME: Parameter 'callback' implicitly has an 'any' type.
    t.restart = function (callback, delay, time) {
      ;(delay = +delay), (time = time == null ? now() : +time)
      t._restart(
        // @ts-expect-error TS(7006) FIXME: Parameter 'elapsed' implicitly has an 'any' type.
        function tick(elapsed) {
          elapsed += total
          t._restart(tick, (total += delay), time)
          callback(elapsed)
        },
        delay,
        time
      )
    }
    t.restart(callback, delay, time)
    return t
  }

  // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 4.
  const emptyOn = dispatch('start', 'end', 'cancel', 'interrupt')
  // @ts-expect-error TS(7034) FIXME: Variable 'emptyTween' implicitly has type 'any[]' ... Remove this comment to see the full error message
  const emptyTween = []

  const CREATED = 0
  const SCHEDULED = 1
  const STARTING = 2
  const STARTED = 3
  const RUNNING = 4
  const ENDING = 5
  const ENDED = 6

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function schedule(node, name, id, index, group, timing) {
    const schedules = node.__transition
    if (!schedules) node.__transition = {}
    else if (id in schedules) return
    create$1(node, id, {
      name: name,
      index: index, // For context during callback.
      group: group, // For context during callback.
      on: emptyOn,
      // @ts-expect-error TS(7005) FIXME: Variable 'emptyTween' implicitly has an 'any[]' ty... Remove this comment to see the full error message
      tween: emptyTween,
      time: timing.time,
      delay: timing.delay,
      duration: timing.duration,
      ease: timing.ease,
      timer: null,
      state: CREATED,
    })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function init(node, id) {
    const schedule = get$1(node, id)
    if (schedule.state > CREATED) throw new Error('too late; already scheduled')
    return schedule
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function set$2(node, id) {
    const schedule = get$1(node, id)
    if (schedule.state > STARTED) throw new Error('too late; already running')
    return schedule
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function get$1(node, id) {
    let schedule = node.__transition
    if (!schedule || !(schedule = schedule[id])) throw new Error('transition not found')
    return schedule
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function create$1(node, id, self) {
    let schedules = node.__transition,
      // @ts-expect-error TS(7034) FIXME: Variable 'tween' implicitly has type 'any' in some... Remove this comment to see the full error message
      tween

    // Initialize the self timer when the transition is created.
    // Note the actual delay is not known until the first callback!
    schedules[id] = self
    self.timer = timer(schedule, 0, self.time)

    // @ts-expect-error TS(7006) FIXME: Parameter 'elapsed' implicitly has an 'any' type.
    function schedule(elapsed) {
      self.state = SCHEDULED
      self.timer.restart(start, self.delay, self.time)

      // If the elapsed delay is less than our first sleep, start immediately.
      if (self.delay <= elapsed) start(elapsed - self.delay)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'elapsed' implicitly has an 'any' type.
    function start(elapsed) {
      let i, j, n, o

      // If the state is not SCHEDULED, then we previously errored on start.
      if (self.state !== SCHEDULED) return stop()

      for (i in schedules) {
        o = schedules[i]
        if (o.name !== self.name) continue

        // While this element already has a starting transition during this frame,
        // defer starting an interrupting transition until that transition has a
        // chance to tick (and possibly end); see d3/d3-transition#54!
        // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 1.
        if (o.state === STARTED) return timeout$1(start)

        // Interrupt the active transition, if any.
        if (o.state === RUNNING) {
          o.state = ENDED
          o.timer.stop()
          o.on.call('interrupt', node, node.__data__, o.index, o.group)
          delete schedules[i]
        }

        // Cancel any pre-empted transitions.
        else if (+i < id) {
          o.state = ENDED
          o.timer.stop()
          o.on.call('cancel', node, node.__data__, o.index, o.group)
          delete schedules[i]
        }
      }

      // Defer the first tick to end of the current frame; see d3/d3#1576.
      // Note the transition may be canceled after start and before the first tick!
      // Note this must be scheduled before the start event; see d3/d3-transition#16!
      // Assuming this is successful, subsequent callbacks go straight to tick.
      // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 1.
      timeout$1(function () {
        if (self.state === STARTED) {
          self.state = RUNNING
          self.timer.restart(tick, self.delay, self.time)
          tick(elapsed)
        }
      })

      // Dispatch the start event.
      // Note this must be done before the tween are initialized.
      self.state = STARTING
      self.on.call('start', node, node.__data__, self.index, self.group)
      if (self.state !== STARTING) return // interrupted
      self.state = STARTED

      // Initialize the tween, deleting null tween.
      tween = new Array((n = self.tween.length))
      for (i = 0, j = -1; i < n; ++i) {
        if ((o = self.tween[i].value.call(node, node.__data__, self.index, self.group))) {
          tween[++j] = o
        }
      }
      tween.length = j + 1
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'elapsed' implicitly has an 'any' type.
    function tick(elapsed) {
      let t =
          elapsed < self.duration
            ? self.ease.call(null, elapsed / self.duration)
            : (self.timer.restart(stop), (self.state = ENDING), 1),
        i = -1,
        // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        n = tween.length

      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      while (++i < n) {
        // @ts-expect-error TS(7005) FIXME: Variable 'tween' implicitly has an 'any' type.
        tween[i].call(node, t)
      }

      // Dispatch the end event.
      if (self.state === ENDING) {
        self.on.call('end', node, node.__data__, self.index, self.group)
        stop()
      }
    }

    function stop() {
      self.state = ENDED
      self.timer.stop()
      delete schedules[id]
      for (const i in schedules) return // eslint-disable-line no-unused-vars
      delete node.__transition
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function interrupt(node, name) {
    let schedules = node.__transition,
      schedule,
      active,
      empty = true,
      i

    if (!schedules) return

    name = name == null ? null : name + ''

    for (i in schedules) {
      if ((schedule = schedules[i]).name !== name) {
        empty = false
        continue
      }
      active = schedule.state > STARTING && schedule.state < ENDING
      schedule.state = ENDED
      schedule.timer.stop()
      schedule.on.call(active ? 'interrupt' : 'cancel', node, node.__data__, schedule.index, schedule.group)
      delete schedules[i]
    }

    if (empty) delete node.__transition
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function selection_interrupt(name) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.each(function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      interrupt(this, name)
    })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'id' implicitly has an 'any' type.
  function tweenRemove(id, name) {
    // @ts-expect-error TS(7034) FIXME: Variable 'tween0' implicitly has type 'any' in som... Remove this comment to see the full error message
    let tween0, tween1
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const schedule = set$2(this, id),
        tween = schedule.tween

      // If this node shared tween with the previous node,
      // just assign the updated shared tween and we’re done!
      // Otherwise, copy-on-write.
      // @ts-expect-error TS(7005) FIXME: Variable 'tween0' implicitly has an 'any' type.
      if (tween !== tween0) {
        tween1 = tween0 = tween
        for (let i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name) {
            tween1 = tween1.slice()
            tween1.splice(i, 1)
            break
          }
        }
      }

      // @ts-expect-error TS(7005) FIXME: Variable 'tween1' implicitly has an 'any' type.
      schedule.tween = tween1
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'id' implicitly has an 'any' type.
  function tweenFunction(id, name, value) {
    // @ts-expect-error TS(7034) FIXME: Variable 'tween0' implicitly has type 'any' in som... Remove this comment to see the full error message
    let tween0, tween1
    if (typeof value !== 'function') throw new Error()
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const schedule = set$2(this, id),
        tween = schedule.tween

      // If this node shared tween with the previous node,
      // just assign the updated shared tween and we’re done!
      // Otherwise, copy-on-write.
      // @ts-expect-error TS(7005) FIXME: Variable 'tween0' implicitly has an 'any' type.
      if (tween !== tween0) {
        tween1 = (tween0 = tween).slice()
        for (var t = { name: name, value: value }, i = 0, n = tween1.length; i < n; ++i) {
          if (tween1[i].name === name) {
            tween1[i] = t
            break
          }
        }
        if (i === n) tween1.push(t)
      }

      // @ts-expect-error TS(7005) FIXME: Variable 'tween1' implicitly has an 'any' type.
      schedule.tween = tween1
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function transition_tween(name, value) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const id = this._id

    name += ''

    if (arguments.length < 2) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const tween = get$1(this.node(), id).tween
      for (var i = 0, n = tween.length, t; i < n; ++i) {
        if ((t = tween[i]).name === name) {
          return t.value
        }
      }
      return null
    }

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'transition' implicitly has an 'any' typ... Remove this comment to see the full error message
  function tweenValue(transition, name, value) {
    const id = transition._id

    transition.each(function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const schedule = set$2(this, id)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      ;(schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments)
    })

    // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
    return function (node) {
      return get$1(node, id).value[name]
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function interpolate$1(a, b) {
    let c
    return (
      typeof b === 'number'
        ? interpolateNumber
        : b instanceof color
        ? interpolateRgb
        : (c = color(b))
        ? ((b = c), interpolateRgb)
        : interpolateString
    )(a, b)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function attrRemove$1(name) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.removeAttribute(name)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'fullname' implicitly has an 'any' type.
  function attrRemoveNS$1(fullname) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.removeAttributeNS(fullname.space, fullname.local)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function attrConstant$1(name, interpolate, value1) {
    // @ts-expect-error TS(7034) FIXME: Variable 'string00' implicitly has type 'any' in s... Remove this comment to see the full error message
    let string00,
      string1 = value1 + '',
      // @ts-expect-error TS(7034) FIXME: Variable 'interpolate0' implicitly has type 'any' ... Remove this comment to see the full error message
      interpolate0
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const string0 = this.getAttribute(name)
      return string0 === string1
        ? null
        : // @ts-expect-error TS(7005) FIXME: Variable 'string00' implicitly has an 'any' type.
        string0 === string00
        ? // @ts-expect-error TS(7005) FIXME: Variable 'interpolate0' implicitly has an 'any' ty... Remove this comment to see the full error message
          interpolate0
        : (interpolate0 = interpolate((string00 = string0), value1))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'fullname' implicitly has an 'any' type.
  function attrConstantNS$1(fullname, interpolate, value1) {
    // @ts-expect-error TS(7034) FIXME: Variable 'string00' implicitly has type 'any' in s... Remove this comment to see the full error message
    let string00,
      string1 = value1 + '',
      // @ts-expect-error TS(7034) FIXME: Variable 'interpolate0' implicitly has type 'any' ... Remove this comment to see the full error message
      interpolate0
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const string0 = this.getAttributeNS(fullname.space, fullname.local)
      return string0 === string1
        ? null
        : // @ts-expect-error TS(7005) FIXME: Variable 'string00' implicitly has an 'any' type.
        string0 === string00
        ? // @ts-expect-error TS(7005) FIXME: Variable 'interpolate0' implicitly has an 'any' ty... Remove this comment to see the full error message
          interpolate0
        : (interpolate0 = interpolate((string00 = string0), value1))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function attrFunction$1(name, interpolate, value) {
    // @ts-expect-error TS(7034) FIXME: Variable 'string00' implicitly has type 'any' in s... Remove this comment to see the full error message
    let string00,
      // @ts-expect-error TS(7034) FIXME: Variable 'string10' implicitly has type 'any' in s... Remove this comment to see the full error message
      string10,
      // @ts-expect-error TS(7034) FIXME: Variable 'interpolate0' implicitly has type 'any' ... Remove this comment to see the full error message
      interpolate0
    return function () {
      let string0,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        value1 = value(this),
        string1
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (value1 == null) return void this.removeAttribute(name)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      string0 = this.getAttribute(name)
      string1 = value1 + ''
      return string0 === string1
        ? null
        : // @ts-expect-error TS(7005) FIXME: Variable 'string00' implicitly has an 'any' type.
        string0 === string00 && string1 === string10
        ? // @ts-expect-error TS(7005) FIXME: Variable 'interpolate0' implicitly has an 'any' ty... Remove this comment to see the full error message
          interpolate0
        : ((string10 = string1), (interpolate0 = interpolate((string00 = string0), value1)))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'fullname' implicitly has an 'any' type.
  function attrFunctionNS$1(fullname, interpolate, value) {
    // @ts-expect-error TS(7034) FIXME: Variable 'string00' implicitly has type 'any' in s... Remove this comment to see the full error message
    let string00,
      // @ts-expect-error TS(7034) FIXME: Variable 'string10' implicitly has type 'any' in s... Remove this comment to see the full error message
      string10,
      // @ts-expect-error TS(7034) FIXME: Variable 'interpolate0' implicitly has type 'any' ... Remove this comment to see the full error message
      interpolate0
    return function () {
      let string0,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        value1 = value(this),
        string1
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      string0 = this.getAttributeNS(fullname.space, fullname.local)
      string1 = value1 + ''
      return string0 === string1
        ? null
        : // @ts-expect-error TS(7005) FIXME: Variable 'string00' implicitly has an 'any' type.
        string0 === string00 && string1 === string10
        ? // @ts-expect-error TS(7005) FIXME: Variable 'interpolate0' implicitly has an 'any' ty... Remove this comment to see the full error message
          interpolate0
        : ((string10 = string1), (interpolate0 = interpolate((string00 = string0), value1)))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function transition_attr(name, value) {
    const fullname = namespace(name),
      i = fullname === 'transform' ? interpolateTransformSvg : interpolate$1
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.attrTween(
      name,
      typeof value === 'function'
        ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          (fullname.local ? attrFunctionNS$1 : attrFunction$1)(fullname, i, tweenValue(this, 'attr.' + name, value))
        : value == null
        ? (fullname.local ? attrRemoveNS$1 : attrRemove$1)(fullname)
        : (fullname.local ? attrConstantNS$1 : attrConstant$1)(fullname, i, value)
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function attrInterpolate(name, i) {
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.setAttribute(name, i.call(this, t))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'fullname' implicitly has an 'any' type.
  function attrInterpolateNS(fullname, i) {
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.setAttributeNS(fullname.space, fullname.local, i.call(this, t))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'fullname' implicitly has an 'any' type.
  function attrTweenNS(fullname, value) {
    // @ts-expect-error TS(7034) FIXME: Variable 't0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    let t0, i0
    function tween() {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const i = value.apply(this, arguments)
      // @ts-expect-error TS(7005) FIXME: Variable 'i0' implicitly has an 'any' type.
      if (i !== i0) t0 = (i0 = i) && attrInterpolateNS(fullname, i)
      // @ts-expect-error TS(7005) FIXME: Variable 't0' implicitly has an 'any' type.
      return t0
    }
    tween._value = value
    return tween
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function attrTween(name, value) {
    // @ts-expect-error TS(7034) FIXME: Variable 't0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    let t0, i0
    function tween() {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const i = value.apply(this, arguments)
      // @ts-expect-error TS(7005) FIXME: Variable 'i0' implicitly has an 'any' type.
      if (i !== i0) t0 = (i0 = i) && attrInterpolate(name, i)
      // @ts-expect-error TS(7005) FIXME: Variable 't0' implicitly has an 'any' type.
      return t0
    }
    tween._value = value
    return tween
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function transition_attrTween(name, value) {
    let key = 'attr.' + name
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (arguments.length < 2) return (key = this.tween(key)) && key._value
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (value == null) return this.tween(key, null)
    if (typeof value !== 'function') throw new Error()
    const fullname = namespace(name)
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'id' implicitly has an 'any' type.
  function delayFunction(id, value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      init(this, id).delay = +value.apply(this, arguments)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'id' implicitly has an 'any' type.
  function delayConstant(id, value) {
    return (
      (value = +value),
      function () {
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        init(this, id).delay = value
      }
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function transition_delay(value) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const id = this._id

    return arguments.length
      ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.each((typeof value === 'function' ? delayFunction : delayConstant)(id, value))
      : // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        get$1(this.node(), id).delay
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'id' implicitly has an 'any' type.
  function durationFunction(id, value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      set$2(this, id).duration = +value.apply(this, arguments)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'id' implicitly has an 'any' type.
  function durationConstant(id, value) {
    return (
      (value = +value),
      function () {
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        set$2(this, id).duration = value
      }
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function transition_duration(value) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const id = this._id

    return arguments.length
      ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.each((typeof value === 'function' ? durationFunction : durationConstant)(id, value))
      : // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        get$1(this.node(), id).duration
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'id' implicitly has an 'any' type.
  function easeConstant(id, value) {
    if (typeof value !== 'function') throw new Error()
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      set$2(this, id).ease = value
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function transition_ease(value) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const id = this._id

    return arguments.length
      ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.each(easeConstant(id, value))
      : // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        get$1(this.node(), id).ease
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'id' implicitly has an 'any' type.
  function easeVarying(id, value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const v = value.apply(this, arguments)
      if (typeof v !== 'function') throw new Error()
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      set$2(this, id).ease = v
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function transition_easeVarying(value) {
    if (typeof value !== 'function') throw new Error()
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.each(easeVarying(this._id, value))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'match' implicitly has an 'any' type.
  function transition_filter(match) {
    if (typeof match !== 'function') match = matcher(match)

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, subgroup = (subgroups[j] = []), node, i = 0; i < n; ++i) {
        if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
          // @ts-expect-error TS(2345) FIXME: Argument of type 'any' is not assignable to parame... Remove this comment to see the full error message
          subgroup.push(node)
        }
      }
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Transition(subgroups, this._parents, this._name, this._id)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'transition' implicitly has an 'any' typ... Remove this comment to see the full error message
  function transition_merge(transition) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (transition._id !== this._id) throw new Error()

    for (
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      var groups0 = this._groups,
        groups1 = transition._groups,
        m0 = groups0.length,
        m1 = groups1.length,
        m = Math.min(m0, m1),
        merges = new Array(m0),
        j = 0;
      j < m;
      ++j
    ) {
      for (
        var group0 = groups0[j],
          group1 = groups1[j],
          n = group0.length,
          merge = (merges[j] = new Array(n)),
          node,
          i = 0;
        i < n;
        ++i
      ) {
        if ((node = group0[i] || group1[i])) {
          merge[i] = node
        }
      }
    }

    for (; j < m0; ++j) {
      merges[j] = groups0[j]
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Transition(merges, this._parents, this._name, this._id)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function start(name) {
    return (name + '')
      .trim()
      .split(/^|\s+/)
      .every(function (t) {
        const i = t.indexOf('.')
        if (i >= 0) t = t.slice(0, i)
        return !t || t === 'start'
      })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'id' implicitly has an 'any' type.
  function onFunction(id, name, listener) {
    // @ts-expect-error TS(7034) FIXME: Variable 'on0' implicitly has type 'any' in some l... Remove this comment to see the full error message
    let on0,
      // @ts-expect-error TS(7034) FIXME: Variable 'on1' implicitly has type 'any' in some l... Remove this comment to see the full error message
      on1,
      sit = start(name) ? init : set$2
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const schedule = sit(this, id),
        on = schedule.on

      // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.
      // @ts-expect-error TS(7005) FIXME: Variable 'on0' implicitly has an 'any' type.
      if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener)

      // @ts-expect-error TS(7005) FIXME: Variable 'on1' implicitly has an 'any' type.
      schedule.on = on1
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function transition_on(name, listener) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const id = this._id

    return arguments.length < 2
      ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        get$1(this.node(), id).on.on(name)
      : // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.each(onFunction(id, name, listener))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'id' implicitly has an 'any' type.
  function removeFunction(id) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const parent = this.parentNode
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      for (const i in this.__transition) if (+i !== id) return
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (parent) parent.removeChild(this)
    }
  }

  function transition_remove() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.on('end.remove', removeFunction(this._id))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'select' implicitly has an 'any' type.
  function transition_select(select) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const name = this._name,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      id = this._id

    if (typeof select !== 'function') select = selector(select)

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
      for (
        var group = groups[j], n = group.length, subgroup = (subgroups[j] = new Array(n)), node, subnode, i = 0;
        i < n;
        ++i
      ) {
        if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
          if ('__data__' in node) subnode.__data__ = node.__data__
          subgroup[i] = subnode
          schedule(subgroup[i], name, id, i, subgroup, get$1(node, id))
        }
      }
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Transition(subgroups, this._parents, name, id)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'select' implicitly has an 'any' type.
  function transition_selectAll(select) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const name = this._name,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      id = this._id

    if (typeof select !== 'function') select = selectorAll(select)

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if ((node = group[i])) {
          for (
            var children = select.call(node, node.__data__, i, group),
              child,
              inherit = get$1(node, id),
              k = 0,
              l = children.length;
            k < l;
            ++k
          ) {
            if ((child = children[k])) {
              schedule(child, name, id, k, children, inherit)
            }
          }
          subgroups.push(children)
          parents.push(node)
        }
      }
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Transition(subgroups, parents, name, id)
  }

  const Selection$1 = selection.prototype.constructor

  function transition_selection() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return new Selection$1(this._groups, this._parents)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function styleNull(name, interpolate) {
    // @ts-expect-error TS(7034) FIXME: Variable 'string00' implicitly has type 'any' in s... Remove this comment to see the full error message
    let string00,
      // @ts-expect-error TS(7034) FIXME: Variable 'string10' implicitly has type 'any' in s... Remove this comment to see the full error message
      string10,
      // @ts-expect-error TS(7034) FIXME: Variable 'interpolate0' implicitly has type 'any' ... Remove this comment to see the full error message
      interpolate0
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const string0 = styleValue(this, name),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        string1 = (this.style.removeProperty(name), styleValue(this, name))
      return string0 === string1
        ? null
        : // @ts-expect-error TS(7005) FIXME: Variable 'string00' implicitly has an 'any' type.
        string0 === string00 && string1 === string10
        ? // @ts-expect-error TS(7005) FIXME: Variable 'interpolate0' implicitly has an 'any' ty... Remove this comment to see the full error message
          interpolate0
        : (interpolate0 = interpolate((string00 = string0), (string10 = string1)))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function styleRemove$1(name) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.style.removeProperty(name)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function styleConstant$1(name, interpolate, value1) {
    // @ts-expect-error TS(7034) FIXME: Variable 'string00' implicitly has type 'any' in s... Remove this comment to see the full error message
    let string00,
      string1 = value1 + '',
      // @ts-expect-error TS(7034) FIXME: Variable 'interpolate0' implicitly has type 'any' ... Remove this comment to see the full error message
      interpolate0
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const string0 = styleValue(this, name)
      return string0 === string1
        ? null
        : // @ts-expect-error TS(7005) FIXME: Variable 'string00' implicitly has an 'any' type.
        string0 === string00
        ? // @ts-expect-error TS(7005) FIXME: Variable 'interpolate0' implicitly has an 'any' ty... Remove this comment to see the full error message
          interpolate0
        : (interpolate0 = interpolate((string00 = string0), value1))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function styleFunction$1(name, interpolate, value) {
    // @ts-expect-error TS(7034) FIXME: Variable 'string00' implicitly has type 'any' in s... Remove this comment to see the full error message
    let string00,
      // @ts-expect-error TS(7034) FIXME: Variable 'string10' implicitly has type 'any' in s... Remove this comment to see the full error message
      string10,
      // @ts-expect-error TS(7034) FIXME: Variable 'interpolate0' implicitly has type 'any' ... Remove this comment to see the full error message
      interpolate0
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      let string0 = styleValue(this, name),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        value1 = value(this),
        string1 = value1 + ''
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (value1 == null) string1 = value1 = (this.style.removeProperty(name), styleValue(this, name))
      return string0 === string1
        ? null
        : // @ts-expect-error TS(7005) FIXME: Variable 'string00' implicitly has an 'any' type.
        string0 === string00 && string1 === string10
        ? // @ts-expect-error TS(7005) FIXME: Variable 'interpolate0' implicitly has an 'any' ty... Remove this comment to see the full error message
          interpolate0
        : ((string10 = string1), (interpolate0 = interpolate((string00 = string0), value1)))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'id' implicitly has an 'any' type.
  function styleMaybeRemove(id, name) {
    // @ts-expect-error TS(7034) FIXME: Variable 'on0' implicitly has type 'any' in some l... Remove this comment to see the full error message
    let on0,
      // @ts-expect-error TS(7034) FIXME: Variable 'on1' implicitly has type 'any' in some l... Remove this comment to see the full error message
      on1,
      // @ts-expect-error TS(7034) FIXME: Variable 'listener0' implicitly has type 'any' in ... Remove this comment to see the full error message
      listener0,
      key = 'style.' + name,
      event = 'end.' + key,
      // @ts-expect-error TS(7034) FIXME: Variable 'remove' implicitly has type 'any' in som... Remove this comment to see the full error message
      remove
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const schedule = set$2(this, id),
        on = schedule.on,
        // @ts-expect-error TS(7005) FIXME: Variable 'remove' implicitly has an 'any' type.
        listener = schedule.value[key] == null ? remove || (remove = styleRemove$1(name)) : undefined

      // If this node shared a dispatch with the previous node,
      // just assign the updated shared dispatch and we’re done!
      // Otherwise, copy-on-write.
      // @ts-expect-error TS(7005) FIXME: Variable 'on0' implicitly has an 'any' type.
      if (on !== on0 || listener0 !== listener) (on1 = (on0 = on).copy()).on(event, (listener0 = listener))

      // @ts-expect-error TS(7005) FIXME: Variable 'on1' implicitly has an 'any' type.
      schedule.on = on1
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function transition_style(name, value, priority) {
    const i = (name += '') === 'transform' ? interpolateTransformCss : interpolate$1
    return value == null
      ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.styleTween(name, styleNull(name, i)).on('end.style.' + name, styleRemove$1(name))
      : typeof value === 'function'
      ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          .styleTween(name, styleFunction$1(name, i, tweenValue(this, 'style.' + name, value)))
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          .each(styleMaybeRemove(this._id, name))
      : // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.styleTween(name, styleConstant$1(name, i, value), priority).on('end.style.' + name, null)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function styleInterpolate(name, i, priority) {
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.style.setProperty(name, i.call(this, t), priority)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function styleTween(name, value, priority) {
    // @ts-expect-error TS(7034) FIXME: Variable 't' implicitly has type 'any' in some loc... Remove this comment to see the full error message
    let t, i0
    function tween() {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const i = value.apply(this, arguments)
      // @ts-expect-error TS(7005) FIXME: Variable 'i0' implicitly has an 'any' type.
      if (i !== i0) t = (i0 = i) && styleInterpolate(name, i, priority)
      // @ts-expect-error TS(7005) FIXME: Variable 't' implicitly has an 'any' type.
      return t
    }
    tween._value = value
    return tween
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function transition_styleTween(name, value, priority) {
    let key = 'style.' + (name += '')
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (arguments.length < 2) return (key = this.tween(key)) && key._value
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (value == null) return this.tween(key, null)
    if (typeof value !== 'function') throw new Error()
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.tween(key, styleTween(name, value, priority == null ? '' : priority))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function textConstant$1(value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.textContent = value
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function textFunction$1(value) {
    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const value1 = value(this)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.textContent = value1 == null ? '' : value1
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function transition_text(value) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.tween(
      'text',
      typeof value === 'function'
        ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          textFunction$1(tweenValue(this, 'text', value))
        : textConstant$1(value == null ? '' : value + '')
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
  function textInterpolate(i) {
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.textContent = i.call(this, t)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function textTween(value) {
    // @ts-expect-error TS(7034) FIXME: Variable 't0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    let t0, i0
    function tween() {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const i = value.apply(this, arguments)
      // @ts-expect-error TS(7005) FIXME: Variable 'i0' implicitly has an 'any' type.
      if (i !== i0) t0 = (i0 = i) && textInterpolate(i)
      // @ts-expect-error TS(7005) FIXME: Variable 't0' implicitly has an 'any' type.
      return t0
    }
    tween._value = value
    return tween
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function transition_textTween(value) {
    let key = 'text'
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (arguments.length < 1) return (key = this.tween(key)) && key._value
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (value == null) return this.tween(key, null)
    if (typeof value !== 'function') throw new Error()
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.tween(key, textTween(value))
  }

  function transition_transition() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const name = this._name,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      id0 = this._id,
      id1 = newId()

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if ((node = group[i])) {
          const inherit = get$1(node, id0)
          schedule(node, name, id1, i, group, {
            time: inherit.time + inherit.delay + inherit.duration,
            delay: 0,
            duration: inherit.duration,
            ease: inherit.ease,
          })
        }
      }
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Transition(groups, this._parents, name, id1)
  }

  function transition_end() {
    // @ts-expect-error TS(7034) FIXME: Variable 'on0' implicitly has type 'any' in some l... Remove this comment to see the full error message
    let on0,
      // @ts-expect-error TS(7034) FIXME: Variable 'on1' implicitly has type 'any' in some l... Remove this comment to see the full error message
      on1,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      that = this,
      id = that._id,
      size = that.size()
    // @ts-expect-error TS(2585) FIXME: 'Promise' only refers to a type, but is being used... Remove this comment to see the full error message
    return new Promise(function (resolve, reject) {
      const cancel = { value: reject },
        end = {
          value: function () {
            if (--size === 0) resolve()
          },
        }

      that.each(function () {
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        const schedule = set$2(this, id),
          on = schedule.on

        // If this node shared a dispatch with the previous node,
        // just assign the updated shared dispatch and we’re done!
        // Otherwise, copy-on-write.
        // @ts-expect-error TS(7005) FIXME: Variable 'on0' implicitly has an 'any' type.
        if (on !== on0) {
          on1 = (on0 = on).copy()
          on1._.cancel.push(cancel)
          on1._.interrupt.push(cancel)
          on1._.end.push(end)
        }

        // @ts-expect-error TS(7005) FIXME: Variable 'on1' implicitly has an 'any' type.
        schedule.on = on1
      })

      // The selection was empty, resolve end immediately
      if (size === 0) resolve()
    })
  }

  let id = 0

  // @ts-expect-error TS(7006) FIXME: Parameter 'groups' implicitly has an 'any' type.
  function Transition(groups, parents, name, id) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._groups = groups
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._parents = parents
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._name = name
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._id = id
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function transition(name) {
    return selection().transition(name)
  }

  function newId() {
    return ++id
  }

  const selection_prototype = selection.prototype

  Transition.prototype = transition.prototype = {
    constructor: Transition,
    select: transition_select,
    selectAll: transition_selectAll,
    filter: transition_filter,
    merge: transition_merge,
    selection: transition_selection,
    transition: transition_transition,
    call: selection_prototype.call,
    nodes: selection_prototype.nodes,
    node: selection_prototype.node,
    size: selection_prototype.size,
    empty: selection_prototype.empty,
    each: selection_prototype.each,
    on: transition_on,
    attr: transition_attr,
    attrTween: transition_attrTween,
    style: transition_style,
    styleTween: transition_styleTween,
    text: transition_text,
    textTween: transition_textTween,
    remove: transition_remove,
    tween: transition_tween,
    delay: transition_delay,
    duration: transition_duration,
    ease: transition_ease,
    easeVarying: transition_easeVarying,
    end: transition_end,
    // @ts-expect-error TS(2585) FIXME: 'Symbol' only refers to a type, but is being used ... Remove this comment to see the full error message
    [Symbol.iterator]: selection_prototype[Symbol.iterator],
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  const linear$1 = t => +t

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function quadIn(t) {
    return t * t
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function quadOut(t) {
    return t * (2 - t)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function quadInOut(t) {
    return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function cubicIn(t) {
    return t * t * t
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function cubicOut(t) {
    return --t * t * t + 1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function cubicInOut(t) {
    return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2
  }

  const exponent = 3

  const polyIn = (function custom(e) {
    e = +e

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    function polyIn(t) {
      return Math.pow(t, e)
    }

    polyIn.exponent = custom

    return polyIn
  })(exponent)

  const polyOut = (function custom(e) {
    e = +e

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    function polyOut(t) {
      return 1 - Math.pow(1 - t, e)
    }

    polyOut.exponent = custom

    return polyOut
  })(exponent)

  const polyInOut = (function custom(e) {
    e = +e

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    function polyInOut(t) {
      return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2
    }

    polyInOut.exponent = custom

    return polyInOut
  })(exponent)

  const pi = Math.PI,
    halfPi = pi / 2

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function sinIn(t) {
    return +t === 1 ? 1 : 1 - Math.cos(t * halfPi)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function sinOut(t) {
    return Math.sin(t * halfPi)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function sinInOut(t) {
    return (1 - Math.cos(pi * t)) / 2
  }

  // tpmt is two power minus ten times t scaled to [0,1]
  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function tpmt(x) {
    return (Math.pow(2, -10 * x) - 0.0009765625) * 1.0009775171065494
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function expIn(t) {
    return tpmt(1 - +t)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function expOut(t) {
    return 1 - tpmt(t)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function expInOut(t) {
    return ((t *= 2) <= 1 ? tpmt(1 - t) : 2 - tpmt(t - 1)) / 2
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function circleIn(t) {
    return 1 - Math.sqrt(1 - t * t)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function circleOut(t) {
    return Math.sqrt(1 - --t * t)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function circleInOut(t) {
    return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2
  }

  const b1 = 4 / 11,
    b2 = 6 / 11,
    b3 = 8 / 11,
    b4 = 3 / 4,
    b5 = 9 / 11,
    b6 = 10 / 11,
    b7 = 15 / 16,
    b8 = 21 / 22,
    b9 = 63 / 64,
    b0 = 1 / b1 / b1

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function bounceIn(t) {
    return 1 - bounceOut(1 - t)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function bounceOut(t) {
    return (t = +t) < b1
      ? b0 * t * t
      : t < b3
      ? b0 * (t -= b2) * t + b4
      : t < b6
      ? b0 * (t -= b5) * t + b7
      : b0 * (t -= b8) * t + b9
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function bounceInOut(t) {
    return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2
  }

  const overshoot = 1.70158

  const backIn = (function custom(s) {
    s = +s

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    function backIn(t) {
      return (t = +t) * t * (s * (t - 1) + t)
    }

    backIn.overshoot = custom

    return backIn
  })(overshoot)

  const backOut = (function custom(s) {
    s = +s

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    function backOut(t) {
      return --t * t * ((t + 1) * s + t) + 1
    }

    backOut.overshoot = custom

    return backOut
  })(overshoot)

  const backInOut = (function custom(s) {
    s = +s

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    function backInOut(t) {
      return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2
    }

    backInOut.overshoot = custom

    return backInOut
  })(overshoot)

  const tau = 2 * Math.PI,
    amplitude = 1,
    period = 0.3

  const elasticIn = (function custom(a, p) {
    const s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau)

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    function elasticIn(t) {
      return a * tpmt(-(--t)) * Math.sin((s - t) / p)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    elasticIn.amplitude = function (a) {
      return custom(a, p * tau)
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
    elasticIn.period = function (p) {
      return custom(a, p)
    }

    return elasticIn
  })(amplitude, period)

  const elasticOut = (function custom(a, p) {
    const s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau)

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    function elasticOut(t) {
      return 1 - a * tpmt((t = +t)) * Math.sin((t + s) / p)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    elasticOut.amplitude = function (a) {
      return custom(a, p * tau)
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
    elasticOut.period = function (p) {
      return custom(a, p)
    }

    return elasticOut
  })(amplitude, period)

  const elasticInOut = (function custom(a, p) {
    const s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau)

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    function elasticInOut(t) {
      return ((t = t * 2 - 1) < 0 ? a * tpmt(-t) * Math.sin((s - t) / p) : 2 - a * tpmt(t) * Math.sin((s + t) / p)) / 2
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    elasticInOut.amplitude = function (a) {
      return custom(a, p * tau)
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
    elasticInOut.period = function (p) {
      return custom(a, p)
    }

    return elasticInOut
  })(amplitude, period)

  const defaultTiming = {
    time: null, // Set on use.
    delay: 0,
    duration: 250,
    ease: cubicInOut,
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function inherit(node, id) {
    let timing
    while (!(timing = node.__transition) || !(timing = timing[id])) {
      if (!(node = node.parentNode)) {
        throw new Error(`transition ${id} not found`)
      }
    }
    return timing
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
  function selection_transition(name) {
    let id, timing

    if (name instanceof Transition) {
      // @ts-expect-error TS(2339) FIXME: Property '_id' does not exist on type '{}'.
      ;(id = name._id), (name = name._name)
    } else {
      // @ts-expect-error TS(2322) FIXME: Type 'number' is not assignable to type 'null'.
      ;(id = newId()), ((timing = defaultTiming).time = now()), (name = name == null ? null : name + '')
    }

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
      for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
        if ((node = group[i])) {
          schedule(node, name, id, i, group, timing || inherit(node, id))
        }
      }
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Transition(groups, this._parents, name, id)
  }

  selection.prototype.interrupt = selection_interrupt
  selection.prototype.transition = selection_transition

  const root$1 = [null]

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function active(node, name) {
    let schedules = node.__transition,
      schedule,
      i

    if (schedules) {
      name = name == null ? null : name + ''
      for (i in schedules) {
        if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
          // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
          return new Transition([[node]], root$1, name, +i)
        }
      }
    }

    return null
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  const constant$4 = x => () => x

  function BrushEvent(
    // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
    type,
    {
      // @ts-expect-error TS(7031) FIXME: Binding element 'sourceEvent' implicitly has an 'a... Remove this comment to see the full error message
      sourceEvent,
      // @ts-expect-error TS(7031) FIXME: Binding element 'target' implicitly has an 'any' t... Remove this comment to see the full error message
      target,
      // @ts-expect-error TS(7031) FIXME: Binding element 'selection' implicitly has an 'any... Remove this comment to see the full error message
      selection,
      // @ts-expect-error TS(7031) FIXME: Binding element 'mode' implicitly has an 'any' typ... Remove this comment to see the full error message
      mode,
      // @ts-expect-error TS(7031) FIXME: Binding element 'dispatch' implicitly has an 'any'... Remove this comment to see the full error message
      dispatch,
    }
  ) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    Object.defineProperties(this, {
      type: { value: type, enumerable: true, configurable: true },
      sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
      target: { value: target, enumerable: true, configurable: true },
      selection: { value: selection, enumerable: true, configurable: true },
      mode: { value: mode, enumerable: true, configurable: true },
      _: { value: dispatch },
    })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function nopropagation$1(event) {
    event.stopImmediatePropagation()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function noevent$1(event) {
    event.preventDefault()
    event.stopImmediatePropagation()
  }

  const MODE_DRAG = { name: 'drag' },
    MODE_SPACE = { name: 'space' },
    MODE_HANDLE = { name: 'handle' },
    MODE_CENTER = { name: 'center' }

  const { abs, max: max$1, min: min$1 } = Math

  // @ts-expect-error TS(7006) FIXME: Parameter 'e' implicitly has an 'any' type.
  function number1(e) {
    return [+e[0], +e[1]]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'e' implicitly has an 'any' type.
  function number2(e) {
    return [number1(e[0]), number1(e[1])]
  }

  const X = {
    name: 'x',
    handles: ['w', 'e'].map(type),
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    input: function (x, e) {
      return x == null
        ? null
        : [
            [+x[0], e[0][1]],
            [+x[1], e[1][1]],
          ]
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'xy' implicitly has an 'any' type.
    output: function (xy) {
      return xy && [xy[0][0], xy[1][0]]
    },
  }

  const Y = {
    name: 'y',
    handles: ['n', 's'].map(type),
    // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
    input: function (y, e) {
      return y == null
        ? null
        : [
            [e[0][0], +y[0]],
            [e[1][0], +y[1]],
          ]
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'xy' implicitly has an 'any' type.
    output: function (xy) {
      return xy && [xy[0][1], xy[1][1]]
    },
  }

  const XY = {
    name: 'xy',
    handles: ['n', 'w', 'e', 's', 'nw', 'ne', 'sw', 'se'].map(type),
    // @ts-expect-error TS(7006) FIXME: Parameter 'xy' implicitly has an 'any' type.
    input: function (xy) {
      return xy == null ? null : number2(xy)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'xy' implicitly has an 'any' type.
    output: function (xy) {
      return xy
    },
  }

  const cursors = {
    overlay: 'crosshair',
    selection: 'move',
    n: 'ns-resize',
    e: 'ew-resize',
    s: 'ns-resize',
    w: 'ew-resize',
    nw: 'nwse-resize',
    ne: 'nesw-resize',
    se: 'nwse-resize',
    sw: 'nesw-resize',
  }

  const flipX = {
    e: 'w',
    w: 'e',
    nw: 'ne',
    ne: 'nw',
    se: 'sw',
    sw: 'se',
  }

  const flipY = {
    n: 's',
    s: 'n',
    nw: 'sw',
    ne: 'se',
    se: 'ne',
    sw: 'nw',
  }

  const signsX = {
    overlay: +1,
    selection: +1,
    n: null,
    e: +1,
    s: null,
    w: -1,
    nw: -1,
    ne: +1,
    se: +1,
    sw: -1,
  }

  const signsY = {
    overlay: +1,
    selection: +1,
    n: -1,
    e: null,
    s: +1,
    w: null,
    nw: -1,
    ne: -1,
    se: +1,
    sw: +1,
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function type(t) {
    return { type: t }
  }

  // Ignore right-click, since that should open the context menu.
  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function defaultFilter$1(event) {
    return !event.ctrlKey && !event.button
  }

  function defaultExtent() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    let svg = this.ownerSVGElement || this
    if (svg.hasAttribute('viewBox')) {
      svg = svg.viewBox.baseVal
      return [
        [svg.x, svg.y],
        [svg.x + svg.width, svg.y + svg.height],
      ]
    }
    return [
      [0, 0],
      [svg.width.baseVal.value, svg.height.baseVal.value],
    ]
  }

  function defaultTouchable$1() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return navigator.maxTouchPoints || 'ontouchstart' in this
  }

  // Like d3.local, but with the name “__brush” rather than auto-generated.
  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function local$1(node) {
    while (!node.__brush) if (!(node = node.parentNode)) return
    return node.__brush
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'extent' implicitly has an 'any' type.
  function empty$2(extent) {
    return extent[0][0] === extent[1][0] || extent[0][1] === extent[1][1]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function brushSelection(node) {
    const state = node.__brush
    return state ? state.dim.output(state.selection) : null
  }

  function brushX() {
    return brush$1(X)
  }

  function brushY() {
    return brush$1(Y)
  }

  function brush() {
    return brush$1(XY)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'dim' implicitly has an 'any' type.
  function brush$1(dim) {
    let extent = defaultExtent,
      filter = defaultFilter$1,
      touchable = defaultTouchable$1,
      keys = true,
      // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 3.
      listeners = dispatch('start', 'brush', 'end'),
      handleSize = 6,
      // @ts-expect-error TS(7034) FIXME: Variable 'touchending' implicitly has type 'any' i... Remove this comment to see the full error message
      touchending

    // @ts-expect-error TS(7006) FIXME: Parameter 'group' implicitly has an 'any' type.
    function brush(group) {
      const overlay = group
        .property('__brush', initialize)
        .selectAll('.overlay')
        .data([type('overlay')])

      overlay
        .enter()
        .append('rect')
        .attr('class', 'overlay')
        .attr('pointer-events', 'all')
        .attr('cursor', cursors.overlay)
        .merge(overlay)
        .each(function () {
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          const extent = local$1(this).extent
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          select(this)
            .attr('x', extent[0][0])
            .attr('y', extent[0][1])
            .attr('width', extent[1][0] - extent[0][0])
            .attr('height', extent[1][1] - extent[0][1])
        })

      group
        .selectAll('.selection')
        .data([type('selection')])
        .enter()
        .append('rect')
        .attr('class', 'selection')
        .attr('cursor', cursors.selection)
        .attr('fill', '#777')
        .attr('fill-opacity', 0.3)
        .attr('stroke', '#fff')
        .attr('shape-rendering', 'crispEdges')

      const handle = group
        .selectAll('.handle')
        // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
        .data(dim.handles, function (d) {
          return d.type
        })

      handle.exit().remove()

      handle
        .enter()
        .append('rect')
        // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
        .attr('class', function (d) {
          return 'handle handle--' + d.type
        })
        // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
        .attr('cursor', function (d) {
          // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
          return cursors[d.type]
        })

      group
        .each(redraw)
        .attr('fill', 'none')
        .attr('pointer-events', 'all')
        .on('mousedown.brush', started)
        .filter(touchable)
        .on('touchstart.brush', started)
        .on('touchmove.brush', touchmoved)
        .on('touchend.brush touchcancel.brush', touchended)
        .style('touch-action', 'none')
        .style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)')
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'group' implicitly has an 'any' type.
    brush.move = function (group, selection) {
      if (group.tween) {
        group
          // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
          .on('start.brush', function (event) {
            // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
            emitter(this, arguments).beforestart().start(event)
          })
          // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
          .on('interrupt.brush end.brush', function (event) {
            // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
            emitter(this, arguments).end(event)
          })
          .tween('brush', function () {
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            const that = this,
              state = that.__brush,
              // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
              emit = emitter(that, arguments),
              selection0 = state.selection,
              selection1 = dim.input(
                // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
                typeof selection === 'function' ? selection.apply(this, arguments) : selection,
                state.extent
              ),
              i = interpolate(selection0, selection1)

            // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
            function tween(t) {
              state.selection = t === 1 && selection1 === null ? null : i(t)
              redraw.call(that)
              emit.brush()
            }

            return selection0 !== null && selection1 !== null ? tween : tween(1)
          })
      } else {
        group.each(function () {
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          const that = this,
            args = arguments,
            state = that.__brush,
            selection1 = dim.input(
              typeof selection === 'function' ? selection.apply(that, args) : selection,
              state.extent
            ),
            // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
            emit = emitter(that, args).beforestart()

          // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
          interrupt(that)
          state.selection = selection1 === null ? null : selection1
          redraw.call(that)
          emit.start().brush().end()
        })
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'group' implicitly has an 'any' type.
    brush.clear = function (group) {
      brush.move(group, null)
    }

    function redraw() {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const group = select(this),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        selection = local$1(this).selection

      if (selection) {
        group
          .selectAll('.selection')
          .style('display', null)
          .attr('x', selection[0][0])
          .attr('y', selection[0][1])
          .attr('width', selection[1][0] - selection[0][0])
          .attr('height', selection[1][1] - selection[0][1])

        group
          .selectAll('.handle')
          .style('display', null)
          // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
          .attr('x', function (d) {
            return d.type[d.type.length - 1] === 'e'
              ? selection[1][0] - handleSize / 2
              : selection[0][0] - handleSize / 2
          })
          // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
          .attr('y', function (d) {
            return d.type[0] === 's' ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2
          })
          // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
          .attr('width', function (d) {
            return d.type === 'n' || d.type === 's' ? selection[1][0] - selection[0][0] + handleSize : handleSize
          })
          // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
          .attr('height', function (d) {
            return d.type === 'e' || d.type === 'w' ? selection[1][1] - selection[0][1] + handleSize : handleSize
          })
      } else {
        group
          .selectAll('.selection,.handle')
          .style('display', 'none')
          .attr('x', null)
          .attr('y', null)
          .attr('width', null)
          .attr('height', null)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'that' implicitly has an 'any' type.
    function emitter(that, args, clean) {
      const emit = that.__brush.emitter
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return emit && (!clean || !emit.clean) ? emit : new Emitter(that, args, clean)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'that' implicitly has an 'any' type.
    function Emitter(that, args, clean) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.that = that
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.args = args
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.state = that.__brush
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.active = 0
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.clean = clean
    }

    Emitter.prototype = {
      beforestart: function () {
        if (++this.active === 1) (this.state.emitter = this), (this.starting = true)
        return this
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
      start: function (event, mode) {
        if (this.starting) (this.starting = false), this.emit('start', event, mode)
        else this.emit('brush', event)
        return this
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
      brush: function (event, mode) {
        this.emit('brush', event, mode)
        return this
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
      end: function (event, mode) {
        if (--this.active === 0) delete this.state.emitter, this.emit('end', event, mode)
        return this
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
      emit: function (type, event, mode) {
        const d = select(this.that).datum()
        listeners.call(
          type,
          this.that,
          // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
          new BrushEvent(type, {
            sourceEvent: event,
            target: brush,
            selection: dim.output(this.state.selection),
            mode,
            dispatch: listeners,
          }),
          d
        )
      },
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function started(event) {
      // @ts-expect-error TS(7005) FIXME: Variable 'touchending' implicitly has an 'any' typ... Remove this comment to see the full error message
      if (touchending && !event.touches) return
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (!filter.apply(this, arguments)) return

      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      let that = this,
        type = event.target.__data__.type,
        mode =
          (keys && event.metaKey ? (type = 'overlay') : type) === 'selection'
            ? MODE_DRAG
            : keys && event.altKey
            ? MODE_CENTER
            : MODE_HANDLE,
        // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        signX = dim === Y ? null : signsX[type],
        // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        signY = dim === X ? null : signsY[type],
        state = local$1(that),
        extent = state.extent,
        selection = state.selection,
        W = extent[0][0],
        // @ts-expect-error TS(7034) FIXME: Variable 'w0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        w0,
        // @ts-expect-error TS(7034) FIXME: Variable 'w1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        w1,
        N = extent[0][1],
        // @ts-expect-error TS(7034) FIXME: Variable 'n0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        n0,
        // @ts-expect-error TS(7034) FIXME: Variable 'n1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        n1,
        E = extent[1][0],
        // @ts-expect-error TS(7034) FIXME: Variable 'e0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        e0,
        // @ts-expect-error TS(7034) FIXME: Variable 'e1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        e1,
        S = extent[1][1],
        // @ts-expect-error TS(7034) FIXME: Variable 's0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        s0,
        // @ts-expect-error TS(7034) FIXME: Variable 's1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        s1,
        dx = 0,
        dy = 0,
        // @ts-expect-error TS(7034) FIXME: Variable 'moving' implicitly has type 'any' in som... Remove this comment to see the full error message
        moving,
        shifting = signX && signY && keys && event.shiftKey,
        // @ts-expect-error TS(7034) FIXME: Variable 'lockX' implicitly has type 'any' in some... Remove this comment to see the full error message
        lockX,
        // @ts-expect-error TS(7034) FIXME: Variable 'lockY' implicitly has type 'any' in some... Remove this comment to see the full error message
        lockY,
        // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
        points = Array.from(event.touches || [event], t => {
          const i = t.identifier
          t = pointer(t, that)
          t.point0 = t.slice()
          t.identifier = i
          return t
        })

      if (type === 'overlay') {
        if (selection) moving = true
        const pts = [points[0], points[1] || points[0]]
        state.selection = selection = [
          [(w0 = dim === Y ? W : min$1(pts[0][0], pts[1][0])), (n0 = dim === X ? N : min$1(pts[0][1], pts[1][1]))],
          [(e0 = dim === Y ? E : max$1(pts[0][0], pts[1][0])), (s0 = dim === X ? S : max$1(pts[0][1], pts[1][1]))],
        ]
        // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
        if (points.length > 1) move()
      } else {
        w0 = selection[0][0]
        n0 = selection[0][1]
        e0 = selection[1][0]
        s0 = selection[1][1]
      }

      w1 = w0
      n1 = n0
      e1 = e0
      s1 = s0

      const group = select(that).attr('pointer-events', 'none')

      const overlay = group
        .selectAll('.overlay')
        // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        .attr('cursor', cursors[type])

      // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
      interrupt(that)
      const emit = emitter(that, arguments, true).beforestart()

      if (event.touches) {
        emit.moved = moved
        emit.ended = ended
      } else {
        var view = select(event.view).on('mousemove.brush', moved, true).on('mouseup.brush', ended, true)
        if (keys) view.on('keydown.brush', keydowned, true).on('keyup.brush', keyupped, true)

        dragDisable(event.view)
      }

      redraw.call(that)
      emit.start(event, mode.name)

      // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
      function moved(event) {
        for (const p of event.changedTouches || [event]) {
          for (const d of points) if (d.identifier === p.identifier) d.cur = pointer(p, that)
        }
        // @ts-expect-error TS(7005) FIXME: Variable 'lockX' implicitly has an 'any' type.
        if (shifting && !lockX && !lockY && points.length === 1) {
          const point = points[0]
          if (abs(point.cur[0] - point[0]) > abs(point.cur[1] - point[1])) lockY = true
          else lockX = true
        }
        for (const point of points) if (point.cur) (point[0] = point.cur[0]), (point[1] = point.cur[1])
        moving = true
        noevent$1(event)
        move(event)
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
      function move(event) {
        const point = points[0],
          point0 = point.point0
        let t

        dx = point[0] - point0[0]
        dy = point[1] - point0[1]

        switch (mode) {
          case MODE_SPACE:
          case MODE_DRAG: {
            // @ts-expect-error TS(7005) FIXME: Variable 'w0' implicitly has an 'any' type.
            if (signX) (dx = max$1(W - w0, min$1(E - e0, dx))), (w1 = w0 + dx), (e1 = e0 + dx)
            // @ts-expect-error TS(7005) FIXME: Variable 'n0' implicitly has an 'any' type.
            if (signY) (dy = max$1(N - n0, min$1(S - s0, dy))), (n1 = n0 + dy), (s1 = s0 + dy)
            break
          }
          case MODE_HANDLE: {
            if (points[1]) {
              if (signX) (w1 = max$1(W, min$1(E, points[0][0]))), (e1 = max$1(W, min$1(E, points[1][0]))), (signX = 1)
              if (signY) (n1 = max$1(N, min$1(S, points[0][1]))), (s1 = max$1(N, min$1(S, points[1][1]))), (signY = 1)
            } else {
              // @ts-expect-error TS(7005) FIXME: Variable 'w0' implicitly has an 'any' type.
              if (signX < 0) (dx = max$1(W - w0, min$1(E - w0, dx))), (w1 = w0 + dx), (e1 = e0)
              // @ts-expect-error TS(7005) FIXME: Variable 'e0' implicitly has an 'any' type.
              else if (signX > 0) (dx = max$1(W - e0, min$1(E - e0, dx))), (w1 = w0), (e1 = e0 + dx)
              // @ts-expect-error TS(7005) FIXME: Variable 'n0' implicitly has an 'any' type.
              if (signY < 0) (dy = max$1(N - n0, min$1(S - n0, dy))), (n1 = n0 + dy), (s1 = s0)
              // @ts-expect-error TS(7005) FIXME: Variable 's0' implicitly has an 'any' type.
              else if (signY > 0) (dy = max$1(N - s0, min$1(S - s0, dy))), (n1 = n0), (s1 = s0 + dy)
            }
            break
          }
          case MODE_CENTER: {
            // @ts-expect-error TS(7005) FIXME: Variable 'w0' implicitly has an 'any' type.
            if (signX) (w1 = max$1(W, min$1(E, w0 - dx * signX))), (e1 = max$1(W, min$1(E, e0 + dx * signX)))
            // @ts-expect-error TS(7005) FIXME: Variable 'n0' implicitly has an 'any' type.
            if (signY) (n1 = max$1(N, min$1(S, n0 - dy * signY))), (s1 = max$1(N, min$1(S, s0 + dy * signY)))
            break
          }
        }

        // @ts-expect-error TS(7005) FIXME: Variable 'e1' implicitly has an 'any' type.
        if (e1 < w1) {
          signX *= -1
          // @ts-expect-error TS(7005) FIXME: Variable 'w0' implicitly has an 'any' type.
          ;(t = w0), (w0 = e0), (e0 = t)
          // @ts-expect-error TS(7005) FIXME: Variable 'w1' implicitly has an 'any' type.
          ;(t = w1), (w1 = e1), (e1 = t)
          // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
          if (type in flipX) overlay.attr('cursor', cursors[(type = flipX[type])])
        }

        // @ts-expect-error TS(7005) FIXME: Variable 's1' implicitly has an 'any' type.
        if (s1 < n1) {
          signY *= -1
          // @ts-expect-error TS(7005) FIXME: Variable 'n0' implicitly has an 'any' type.
          ;(t = n0), (n0 = s0), (s0 = t)
          // @ts-expect-error TS(7005) FIXME: Variable 'n1' implicitly has an 'any' type.
          ;(t = n1), (n1 = s1), (s1 = t)
          // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
          if (type in flipY) overlay.attr('cursor', cursors[(type = flipY[type])])
        }

        if (state.selection) selection = state.selection // May be set by brush.move!
        // @ts-expect-error TS(7005) FIXME: Variable 'lockX' implicitly has an 'any' type.
        if (lockX) (w1 = selection[0][0]), (e1 = selection[1][0])
        // @ts-expect-error TS(7005) FIXME: Variable 'lockY' implicitly has an 'any' type.
        if (lockY) (n1 = selection[0][1]), (s1 = selection[1][1])

        if (
          // @ts-expect-error TS(7005) FIXME: Variable 'w1' implicitly has an 'any' type.
          selection[0][0] !== w1 ||
          // @ts-expect-error TS(7005) FIXME: Variable 'n1' implicitly has an 'any' type.
          selection[0][1] !== n1 ||
          // @ts-expect-error TS(7005) FIXME: Variable 'e1' implicitly has an 'any' type.
          selection[1][0] !== e1 ||
          // @ts-expect-error TS(7005) FIXME: Variable 's1' implicitly has an 'any' type.
          selection[1][1] !== s1
        ) {
          state.selection = [
            // @ts-expect-error TS(7005) FIXME: Variable 'w1' implicitly has an 'any' type.
            [w1, n1],
            // @ts-expect-error TS(7005) FIXME: Variable 'e1' implicitly has an 'any' type.
            [e1, s1],
          ]
          redraw.call(that)
          emit.brush(event, mode.name)
        }
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
      function ended(event) {
        nopropagation$1(event)
        if (event.touches) {
          if (event.touches.length) return
          // @ts-expect-error TS(7005) FIXME: Variable 'touchending' implicitly has an 'any' typ... Remove this comment to see the full error message
          if (touchending) clearTimeout(touchending)
          touchending = setTimeout(function () {
            touchending = null
          }, 500) // Ghost clicks are delayed!
        } else {
          // @ts-expect-error TS(7005) FIXME: Variable 'moving' implicitly has an 'any' type.
          yesdrag(event.view, moving)
          view.on('keydown.brush keyup.brush mousemove.brush mouseup.brush', null)
        }
        group.attr('pointer-events', 'all')
        overlay.attr('cursor', cursors.overlay)
        if (state.selection) selection = state.selection // May be set by brush.move (on start)!
        if (empty$2(selection)) (state.selection = null), redraw.call(that)
        emit.end(event, mode.name)
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
      function keydowned(event) {
        switch (event.keyCode) {
          case 16: {
            // SHIFT
            shifting = signX && signY
            break
          }
          case 18: {
            // ALT
            if (mode === MODE_HANDLE) {
              // @ts-expect-error TS(7005) FIXME: Variable 'e1' implicitly has an 'any' type.
              if (signX) (e0 = e1 - dx * signX), (w0 = w1 + dx * signX)
              // @ts-expect-error TS(7005) FIXME: Variable 's1' implicitly has an 'any' type.
              if (signY) (s0 = s1 - dy * signY), (n0 = n1 + dy * signY)
              mode = MODE_CENTER
              // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
              move()
            }
            break
          }
          case 32: {
            // SPACE; takes priority over ALT
            if (mode === MODE_HANDLE || mode === MODE_CENTER) {
              // @ts-expect-error TS(7005) FIXME: Variable 'e1' implicitly has an 'any' type.
              if (signX < 0) e0 = e1 - dx
              // @ts-expect-error TS(7005) FIXME: Variable 'w1' implicitly has an 'any' type.
              else if (signX > 0) w0 = w1 - dx
              // @ts-expect-error TS(7005) FIXME: Variable 's1' implicitly has an 'any' type.
              if (signY < 0) s0 = s1 - dy
              // @ts-expect-error TS(7005) FIXME: Variable 'n1' implicitly has an 'any' type.
              else if (signY > 0) n0 = n1 - dy
              mode = MODE_SPACE
              overlay.attr('cursor', cursors.selection)
              // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
              move()
            }
            break
          }
          default:
            return
        }
        noevent$1(event)
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
      function keyupped(event) {
        switch (event.keyCode) {
          case 16: {
            // SHIFT
            if (shifting) {
              lockX = lockY = shifting = false
              // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
              move()
            }
            break
          }
          case 18: {
            // ALT
            if (mode === MODE_CENTER) {
              // @ts-expect-error TS(7005) FIXME: Variable 'e1' implicitly has an 'any' type.
              if (signX < 0) e0 = e1
              // @ts-expect-error TS(7005) FIXME: Variable 'w1' implicitly has an 'any' type.
              else if (signX > 0) w0 = w1
              // @ts-expect-error TS(7005) FIXME: Variable 's1' implicitly has an 'any' type.
              if (signY < 0) s0 = s1
              // @ts-expect-error TS(7005) FIXME: Variable 'n1' implicitly has an 'any' type.
              else if (signY > 0) n0 = n1
              mode = MODE_HANDLE
              // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
              move()
            }
            break
          }
          case 32: {
            // SPACE
            if (mode === MODE_SPACE) {
              if (event.altKey) {
                // @ts-expect-error TS(7005) FIXME: Variable 'e1' implicitly has an 'any' type.
                if (signX) (e0 = e1 - dx * signX), (w0 = w1 + dx * signX)
                // @ts-expect-error TS(7005) FIXME: Variable 's1' implicitly has an 'any' type.
                if (signY) (s0 = s1 - dy * signY), (n0 = n1 + dy * signY)
                mode = MODE_CENTER
              } else {
                // @ts-expect-error TS(7005) FIXME: Variable 'e1' implicitly has an 'any' type.
                if (signX < 0) e0 = e1
                // @ts-expect-error TS(7005) FIXME: Variable 'w1' implicitly has an 'any' type.
                else if (signX > 0) w0 = w1
                // @ts-expect-error TS(7005) FIXME: Variable 's1' implicitly has an 'any' type.
                if (signY < 0) s0 = s1
                // @ts-expect-error TS(7005) FIXME: Variable 'n1' implicitly has an 'any' type.
                else if (signY > 0) n0 = n1
                mode = MODE_HANDLE
              }
              // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
              overlay.attr('cursor', cursors[type])
              // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
              move()
            }
            break
          }
          default:
            return
        }
        noevent$1(event)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function touchmoved(event) {
      // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
      emitter(this, arguments).moved(event)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function touchended(event) {
      // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
      emitter(this, arguments).ended(event)
    }

    function initialize() {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const state = this.__brush || { selection: null }
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      state.extent = number2(extent.apply(this, arguments))
      state.dim = dim
      return state
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    brush.extent = function (_) {
      return arguments.length ? ((extent = typeof _ === 'function' ? _ : constant$4(number2(_))), brush) : extent
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    brush.filter = function (_) {
      return arguments.length ? ((filter = typeof _ === 'function' ? _ : constant$4(!!_)), brush) : filter
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    brush.touchable = function (_) {
      return arguments.length ? ((touchable = typeof _ === 'function' ? _ : constant$4(!!_)), brush) : touchable
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    brush.handleSize = function (_) {
      return arguments.length ? ((handleSize = +_), brush) : handleSize
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    brush.keyModifiers = function (_) {
      return arguments.length ? ((keys = !!_), brush) : keys
    }

    brush.on = function () {
      const value = listeners.on.apply(listeners, arguments)
      return value === listeners ? brush : value
    }

    return brush
  }

  const abs$1 = Math.abs
  const cos = Math.cos
  const sin = Math.sin
  const pi$1 = Math.PI
  const halfPi$1 = pi$1 / 2
  const tau$1 = pi$1 * 2
  const max$2 = Math.max
  const epsilon$1 = 1e-12

  // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
  function range(i, j) {
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return Array.from({ length: j - i }, (_, k) => i + k)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'compare' implicitly has an 'any' type.
  function compareValue(compare) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    return function (a, b) {
      return compare(a.source.value + a.target.value, b.source.value + b.target.value)
    }
  }

  function chord() {
    return chord$1(false, false)
  }

  function chordTranspose() {
    return chord$1(false, true)
  }

  function chordDirected() {
    return chord$1(true, false)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'directed' implicitly has an 'any' type.
  function chord$1(directed, transpose) {
    let padAngle = 0,
      // @ts-expect-error TS(7034) FIXME: Variable 'sortGroups' implicitly has type 'any' in... Remove this comment to see the full error message
      sortGroups = null,
      // @ts-expect-error TS(7034) FIXME: Variable 'sortSubgroups' implicitly has type 'any'... Remove this comment to see the full error message
      sortSubgroups = null,
      // @ts-expect-error TS(7034) FIXME: Variable 'sortChords' implicitly has type 'any' in... Remove this comment to see the full error message
      sortChords = null

    // @ts-expect-error TS(7006) FIXME: Parameter 'matrix' implicitly has an 'any' type.
    function chord(matrix) {
      let n = matrix.length,
        groupSums = new Array(n),
        groupIndex = range(0, n),
        chords = new Array(n * n),
        groups = new Array(n),
        k = 0,
        dx

      matrix = Float64Array.from(
        { length: n * n },
        transpose ? (_, i) => matrix[i % n][(i / n) | 0] : (_, i) => matrix[(i / n) | 0][i % n]
      )

      // Compute the scaling factor from value to angle in [0, 2pi].
      for (let i = 0; i < n; ++i) {
        let x = 0
        for (let j = 0; j < n; ++j) x += matrix[i * n + j] + directed * matrix[j * n + i]
        k += groupSums[i] = x
      }
      k = max$2(0, tau$1 - padAngle * n) / k
      dx = k ? padAngle : tau$1 / n

      // Compute the angles for each group and constituent chord.
      {
        let x = 0
        // @ts-expect-error TS(7005) FIXME: Variable 'sortGroups' implicitly has an 'any' type... Remove this comment to see the full error message
        if (sortGroups) groupIndex.sort((a, b) => sortGroups(groupSums[a], groupSums[b]))
        for (const i of groupIndex) {
          const x0 = x
          if (directed) {
            // @ts-expect-error TS(7006) FIXME: Parameter 'j' implicitly has an 'any' type.
            const subgroupIndex = range(~n + 1, n).filter(j => (j < 0 ? matrix[~j * n + i] : matrix[i * n + j]))
            // @ts-expect-error TS(7005) FIXME: Variable 'sortSubgroups' implicitly has an 'any' t... Remove this comment to see the full error message
            if (sortSubgroups)
              // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
              subgroupIndex.sort((a, b) =>
                // @ts-expect-error TS(7005) FIXME: Variable 'sortSubgroups' implicitly has an 'any' t... Remove this comment to see the full error message
                sortSubgroups(
                  a < 0 ? -matrix[~a * n + i] : matrix[i * n + a],
                  b < 0 ? -matrix[~b * n + i] : matrix[i * n + b]
                )
              )
            for (const j of subgroupIndex) {
              if (j < 0) {
                const chord = chords[~j * n + i] || (chords[~j * n + i] = { source: null, target: null })
                chord.target = {
                  index: i,
                  startAngle: x,
                  endAngle: (x += matrix[~j * n + i] * k),
                  value: matrix[~j * n + i],
                }
              } else {
                const chord = chords[i * n + j] || (chords[i * n + j] = { source: null, target: null })
                chord.source = {
                  index: i,
                  startAngle: x,
                  endAngle: (x += matrix[i * n + j] * k),
                  value: matrix[i * n + j],
                }
              }
            }
            groups[i] = { index: i, startAngle: x0, endAngle: x, value: groupSums[i] }
          } else {
            // @ts-expect-error TS(7006) FIXME: Parameter 'j' implicitly has an 'any' type.
            const subgroupIndex = range(0, n).filter(j => matrix[i * n + j] || matrix[j * n + i])
            // @ts-expect-error TS(7005) FIXME: Variable 'sortSubgroups' implicitly has an 'any' t... Remove this comment to see the full error message
            if (sortSubgroups) subgroupIndex.sort((a, b) => sortSubgroups(matrix[i * n + a], matrix[i * n + b]))
            for (const j of subgroupIndex) {
              let chord
              if (i < j) {
                chord = chords[i * n + j] || (chords[i * n + j] = { source: null, target: null })
                chord.source = {
                  index: i,
                  startAngle: x,
                  endAngle: (x += matrix[i * n + j] * k),
                  value: matrix[i * n + j],
                }
              } else {
                chord = chords[j * n + i] || (chords[j * n + i] = { source: null, target: null })
                chord.target = {
                  index: i,
                  startAngle: x,
                  endAngle: (x += matrix[i * n + j] * k),
                  value: matrix[i * n + j],
                }
                if (i === j) chord.source = chord.target
              }
              if (chord.source && chord.target && chord.source.value < chord.target.value) {
                const source = chord.source
                chord.source = chord.target
                chord.target = source
              }
            }
            groups[i] = { index: i, startAngle: x0, endAngle: x, value: groupSums[i] }
          }
          x += dx
        }
      }

      // Remove empty chords.
      // @ts-expect-error TS(2550) FIXME: Property 'values' does not exist on type 'ObjectCo... Remove this comment to see the full error message
      chords = Object.values(chords)
      // @ts-expect-error TS(2339) FIXME: Property 'groups' does not exist on type 'any[]'.
      chords.groups = groups
      // @ts-expect-error TS(7005) FIXME: Variable 'sortChords' implicitly has an 'any' type... Remove this comment to see the full error message
      return sortChords ? chords.sort(sortChords) : chords
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    chord.padAngle = function (_) {
      return arguments.length ? ((padAngle = max$2(0, _)), chord) : padAngle
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    chord.sortGroups = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'sortGroups' implicitly has an 'any' type... Remove this comment to see the full error message
      return arguments.length ? ((sortGroups = _), chord) : sortGroups
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    chord.sortSubgroups = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'sortSubgroups' implicitly has an 'any' t... Remove this comment to see the full error message
      return arguments.length ? ((sortSubgroups = _), chord) : sortSubgroups
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    chord.sortChords = function (_) {
      return arguments.length
        ? // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type '(a: any, b: a... Remove this comment to see the full error message
          (_ == null ? (sortChords = null) : ((sortChords = compareValue(_))._ = _), chord)
        : // @ts-expect-error TS(7005) FIXME: Variable 'sortChords' implicitly has an 'any' type... Remove this comment to see the full error message
          sortChords && sortChords._
    }

    return chord
  }

  const pi$2 = Math.PI,
    tau$2 = 2 * pi$2,
    epsilon$2 = 1e-6,
    tauEpsilon = tau$2 - epsilon$2

  function Path() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._x0 =
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this._y0 = // start of current subpath
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this._x1 =
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this._y1 =
        null // end of current subpath
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._ = ''
  }

  function path() {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Path()
  }

  Path.prototype = path.prototype = {
    constructor: Path,
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    moveTo: function (x, y) {
      this._ += 'M' + (this._x0 = this._x1 = +x) + ',' + (this._y0 = this._y1 = +y)
    },
    closePath: function () {
      if (this._x1 !== null) {
        ;(this._x1 = this._x0), (this._y1 = this._y0)
        this._ += 'Z'
      }
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    lineTo: function (x, y) {
      this._ += 'L' + (this._x1 = +x) + ',' + (this._y1 = +y)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x1' implicitly has an 'any' type.
    quadraticCurveTo: function (x1, y1, x, y) {
      this._ += 'Q' + +x1 + ',' + +y1 + ',' + (this._x1 = +x) + ',' + (this._y1 = +y)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x1' implicitly has an 'any' type.
    bezierCurveTo: function (x1, y1, x2, y2, x, y) {
      this._ += 'C' + +x1 + ',' + +y1 + ',' + +x2 + ',' + +y2 + ',' + (this._x1 = +x) + ',' + (this._y1 = +y)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x1' implicitly has an 'any' type.
    arcTo: function (x1, y1, x2, y2, r) {
      ;(x1 = +x1), (y1 = +y1), (x2 = +x2), (y2 = +y2), (r = +r)
      const x0 = this._x1,
        y0 = this._y1,
        x21 = x2 - x1,
        y21 = y2 - y1,
        x01 = x0 - x1,
        y01 = y0 - y1,
        l01_2 = x01 * x01 + y01 * y01

      // Is the radius negative? Error.
      if (r < 0) throw new Error('negative radius: ' + r)

      // Is this path empty? Move to (x1,y1).
      if (this._x1 === null) {
        this._ += 'M' + (this._x1 = x1) + ',' + (this._y1 = y1)
      }

      // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
      // @ts-expect-error TS(1313) FIXME: The body of an 'if' statement cannot be the empty ... Remove this comment to see the full error message
      else if (!(l01_2 > epsilon$2));
      else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon$2) || !r) {
        // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
        // Equivalently, is (x1,y1) coincident with (x2,y2)?
        // Or, is the radius zero? Line to (x1,y1).
        this._ += 'L' + (this._x1 = x1) + ',' + (this._y1 = y1)
      }

      // Otherwise, draw an arc!
      else {
        const x20 = x2 - x0,
          y20 = y2 - y0,
          l21_2 = x21 * x21 + y21 * y21,
          l20_2 = x20 * x20 + y20 * y20,
          l21 = Math.sqrt(l21_2),
          l01 = Math.sqrt(l01_2),
          l = r * Math.tan((pi$2 - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
          t01 = l / l01,
          t21 = l / l21

        // If the start tangent is not coincident with (x0,y0), line to.
        if (Math.abs(t01 - 1) > epsilon$2) {
          this._ += 'L' + (x1 + t01 * x01) + ',' + (y1 + t01 * y01)
        }

        this._ +=
          'A' +
          r +
          ',' +
          r +
          ',0,0,' +
          +(y01 * x20 > x01 * y20) +
          ',' +
          (this._x1 = x1 + t21 * x21) +
          ',' +
          (this._y1 = y1 + t21 * y21)
      }
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    arc: function (x, y, r, a0, a1, ccw) {
      ;(x = +x), (y = +y), (r = +r), (ccw = !!ccw)
      let dx = r * Math.cos(a0),
        dy = r * Math.sin(a0),
        x0 = x + dx,
        y0 = y + dy,
        cw = 1 ^ ccw,
        da = ccw ? a0 - a1 : a1 - a0

      // Is the radius negative? Error.
      if (r < 0) throw new Error('negative radius: ' + r)

      // Is this path empty? Move to (x0,y0).
      if (this._x1 === null) {
        this._ += 'M' + x0 + ',' + y0
      }

      // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
      else if (Math.abs(this._x1 - x0) > epsilon$2 || Math.abs(this._y1 - y0) > epsilon$2) {
        this._ += 'L' + x0 + ',' + y0
      }

      // Is this arc empty? We’re done.
      if (!r) return

      // Does the angle go the wrong way? Flip the direction.
      if (da < 0) da = (da % tau$2) + tau$2

      // Is this a complete circle? Draw two arcs to complete the circle.
      if (da > tauEpsilon) {
        this._ +=
          'A' +
          r +
          ',' +
          r +
          ',0,1,' +
          cw +
          ',' +
          (x - dx) +
          ',' +
          (y - dy) +
          'A' +
          r +
          ',' +
          r +
          ',0,1,' +
          cw +
          ',' +
          (this._x1 = x0) +
          ',' +
          (this._y1 = y0)
      }

      // Is this arc non-empty? Draw an arc!
      else if (da > epsilon$2) {
        this._ +=
          'A' +
          r +
          ',' +
          r +
          ',0,' +
          +(da >= pi$2) +
          ',' +
          cw +
          ',' +
          (this._x1 = x + r * Math.cos(a1)) +
          ',' +
          (this._y1 = y + r * Math.sin(a1))
      }
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    rect: function (x, y, w, h) {
      this._ +=
        'M' + (this._x0 = this._x1 = +x) + ',' + (this._y0 = this._y1 = +y) + 'h' + +w + 'v' + +h + 'h' + -w + 'Z'
    },
    toString: function () {
      return this._
    },
  }

  const slice$2 = Array.prototype.slice

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function constant$5(x) {
    return function () {
      return x
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function defaultSource(d) {
    return d.source
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function defaultTarget(d) {
    return d.target
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function defaultRadius(d) {
    return d.radius
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function defaultStartAngle(d) {
    return d.startAngle
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function defaultEndAngle(d) {
    return d.endAngle
  }

  function defaultPadAngle() {
    return 0
  }

  function defaultArrowheadRadius() {
    return 10
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'headRadius' implicitly has an 'any' typ... Remove this comment to see the full error message
  function ribbon(headRadius) {
    let source = defaultSource,
      target = defaultTarget,
      sourceRadius = defaultRadius,
      targetRadius = defaultRadius,
      startAngle = defaultStartAngle,
      endAngle = defaultEndAngle,
      padAngle = defaultPadAngle,
      // @ts-expect-error TS(7034) FIXME: Variable 'context' implicitly has type 'any' in so... Remove this comment to see the full error message
      context = null

    function ribbon() {
      let buffer,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        s = source.apply(this, arguments),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        t = target.apply(this, arguments),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        ap = padAngle.apply(this, arguments) / 2,
        argv = slice$2.call(arguments),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        sr = +sourceRadius.apply(this, ((argv[0] = s), argv)),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        sa0 = startAngle.apply(this, argv) - halfPi$1,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        sa1 = endAngle.apply(this, argv) - halfPi$1,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        tr = +targetRadius.apply(this, ((argv[0] = t), argv)),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        ta0 = startAngle.apply(this, argv) - halfPi$1,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        ta1 = endAngle.apply(this, argv) - halfPi$1

      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      if (!context) context = buffer = path()

      if (ap > epsilon$1) {
        if (abs$1(sa1 - sa0) > ap * 2 + epsilon$1) sa1 > sa0 ? ((sa0 += ap), (sa1 -= ap)) : ((sa0 -= ap), (sa1 += ap))
        else sa0 = sa1 = (sa0 + sa1) / 2
        if (abs$1(ta1 - ta0) > ap * 2 + epsilon$1) ta1 > ta0 ? ((ta0 += ap), (ta1 -= ap)) : ((ta0 -= ap), (ta1 += ap))
        else ta0 = ta1 = (ta0 + ta1) / 2
      }

      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      context.moveTo(sr * cos(sa0), sr * sin(sa0))
      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      context.arc(0, 0, sr, sa0, sa1)
      if (sa0 !== ta0 || sa1 !== ta1) {
        if (headRadius) {
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          const hr = +headRadius.apply(this, arguments),
            tr2 = tr - hr,
            ta2 = (ta0 + ta1) / 2
          // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          context.quadraticCurveTo(0, 0, tr2 * cos(ta0), tr2 * sin(ta0))
          // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          context.lineTo(tr * cos(ta2), tr * sin(ta2))
          // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          context.lineTo(tr2 * cos(ta1), tr2 * sin(ta1))
        } else {
          // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0))
          // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          context.arc(0, 0, tr, ta0, ta1)
        }
      }
      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      context.quadraticCurveTo(0, 0, sr * cos(sa0), sr * sin(sa0))
      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      context.closePath()

      if (buffer) return (context = null), buffer + '' || null
    }

    if (headRadius)
      // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
      ribbon.headRadius = function (_) {
        return arguments.length ? ((headRadius = typeof _ === 'function' ? _ : constant$5(+_)), ribbon) : headRadius
      }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    ribbon.radius = function (_) {
      return arguments.length
        ? ((sourceRadius = targetRadius = typeof _ === 'function' ? _ : constant$5(+_)), ribbon)
        : sourceRadius
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    ribbon.sourceRadius = function (_) {
      return arguments.length ? ((sourceRadius = typeof _ === 'function' ? _ : constant$5(+_)), ribbon) : sourceRadius
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    ribbon.targetRadius = function (_) {
      return arguments.length ? ((targetRadius = typeof _ === 'function' ? _ : constant$5(+_)), ribbon) : targetRadius
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    ribbon.startAngle = function (_) {
      return arguments.length ? ((startAngle = typeof _ === 'function' ? _ : constant$5(+_)), ribbon) : startAngle
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    ribbon.endAngle = function (_) {
      return arguments.length ? ((endAngle = typeof _ === 'function' ? _ : constant$5(+_)), ribbon) : endAngle
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    ribbon.padAngle = function (_) {
      return arguments.length ? ((padAngle = typeof _ === 'function' ? _ : constant$5(+_)), ribbon) : padAngle
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    ribbon.source = function (_) {
      return arguments.length ? ((source = _), ribbon) : source
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    ribbon.target = function (_) {
      return arguments.length ? ((target = _), ribbon) : target
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    ribbon.context = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      return arguments.length ? ((context = _ == null ? null : _), ribbon) : context
    }

    return ribbon
  }

  function ribbon$1() {
    // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
    return ribbon()
  }

  function ribbonArrow() {
    return ribbon(defaultArrowheadRadius)
  }

  const array$3 = Array.prototype

  const slice$3 = array$3.slice

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function ascending$2(a, b) {
    return a - b
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'ring' implicitly has an 'any' type.
  function area(ring) {
    let i = 0,
      n = ring.length,
      area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1]
    while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1]
    return area
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  const constant$6 = x => () => x

  // @ts-expect-error TS(7006) FIXME: Parameter 'ring' implicitly has an 'any' type.
  function contains(ring, hole) {
    let i = -1,
      n = hole.length,
      c
    while (++i < n) if ((c = ringContains(ring, hole[i]))) return c
    return 0
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'ring' implicitly has an 'any' type.
  function ringContains(ring, point) {
    let x = point[0],
      y = point[1],
      contains = -1
    for (let i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
      const pi = ring[i],
        xi = pi[0],
        yi = pi[1],
        pj = ring[j],
        xj = pj[0],
        yj = pj[1]
      if (segmentContains(pi, pj, point)) return 0
      if (yi > y !== yj > y && x < ((xj - xi) * (y - yi)) / (yj - yi) + xi) contains = -contains
    }
    return contains
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function segmentContains(a, b, c) {
    let i
    return collinear(a, b, c) && within(a[(i = +(a[0] === b[0]))], c[i], b[i])
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function collinear(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1])
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
  function within(p, q, r) {
    return (p <= q && q <= r) || (r <= q && q <= p)
  }

  function noop$1() {}

  const cases = [
    [],
    [
      [
        [1.0, 1.5],
        [0.5, 1.0],
      ],
    ],
    [
      [
        [1.5, 1.0],
        [1.0, 1.5],
      ],
    ],
    [
      [
        [1.5, 1.0],
        [0.5, 1.0],
      ],
    ],
    [
      [
        [1.0, 0.5],
        [1.5, 1.0],
      ],
    ],
    [
      [
        [1.0, 1.5],
        [0.5, 1.0],
      ],
      [
        [1.0, 0.5],
        [1.5, 1.0],
      ],
    ],
    [
      [
        [1.0, 0.5],
        [1.0, 1.5],
      ],
    ],
    [
      [
        [1.0, 0.5],
        [0.5, 1.0],
      ],
    ],
    [
      [
        [0.5, 1.0],
        [1.0, 0.5],
      ],
    ],
    [
      [
        [1.0, 1.5],
        [1.0, 0.5],
      ],
    ],
    [
      [
        [0.5, 1.0],
        [1.0, 0.5],
      ],
      [
        [1.5, 1.0],
        [1.0, 1.5],
      ],
    ],
    [
      [
        [1.5, 1.0],
        [1.0, 0.5],
      ],
    ],
    [
      [
        [0.5, 1.0],
        [1.5, 1.0],
      ],
    ],
    [
      [
        [1.0, 1.5],
        [1.5, 1.0],
      ],
    ],
    [
      [
        [0.5, 1.0],
        [1.0, 1.5],
      ],
    ],
    [],
  ]

  function contours() {
    let dx = 1,
      dy = 1,
      threshold = thresholdSturges,
      smooth = smoothLinear

    // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
    function contours(values) {
      let tz = threshold(values)

      // Convert number of thresholds into uniform thresholds.
      if (!Array.isArray(tz)) {
        // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
        const domain = extent(values),
          start = domain[0],
          stop = domain[1]
        tz = tickStep(start, stop, tz)
        // @ts-expect-error TS(2322) FIXME: Type 'any[]' is not assignable to type 'number'.
        tz = sequence(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz)
      } else {
        // @ts-expect-error TS(2322) FIXME: Type 'any[]' is not assignable to type 'number'.
        tz = tz.slice().sort(ascending$2)
      }

      // @ts-expect-error TS(2339) FIXME: Property 'map' does not exist on type 'number'.
      return tz.map(function (value) {
        return contour(values, value)
      })
    }

    // Accumulate, smooth contour rings, assign holes to exterior rings.
    // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
    // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
    function contour(values, value) {
      // @ts-expect-error TS(7034) FIXME: Variable 'polygons' implicitly has type 'any[]' in... Remove this comment to see the full error message
      const polygons = [],
        // @ts-expect-error TS(7034) FIXME: Variable 'holes' implicitly has type 'any[]' in so... Remove this comment to see the full error message
        holes = []

      // @ts-expect-error TS(7006) FIXME: Parameter 'ring' implicitly has an 'any' type.
      isorings(values, value, function (ring) {
        smooth(ring, values, value)
        if (area(ring) > 0) polygons.push([ring])
        else holes.push(ring)
      })

      // @ts-expect-error TS(7005) FIXME: Variable 'holes' implicitly has an 'any[]' type.
      holes.forEach(function (hole) {
        for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
          // @ts-expect-error TS(7005) FIXME: Variable 'polygons' implicitly has an 'any[]' type... Remove this comment to see the full error message
          if (contains((polygon = polygons[i])[0], hole) !== -1) {
            polygon.push(hole)
            return
          }
        }
      })

      return {
        type: 'MultiPolygon',
        value: value,
        // @ts-expect-error TS(7005) FIXME: Variable 'polygons' implicitly has an 'any[]' type... Remove this comment to see the full error message
        coordinates: polygons,
      }
    }

    // Marching squares with isolines stitched into rings.
    // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
    // @ts-expect-error TS(7006) FIXME: Parameter 'values' implicitly has an 'any' type.
    function isorings(values, value, callback) {
      let fragmentByStart = [],
        fragmentByEnd = [],
        // @ts-expect-error TS(7034) FIXME: Variable 'x' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        x,
        // @ts-expect-error TS(7034) FIXME: Variable 'y' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        y,
        t0,
        t1,
        t2,
        t3

      // Special case for the first row (y = -1, t2 = t3 = 0).
      x = y = -1
      t1 = values[0] >= value
      // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
      cases[t1 << 1].forEach(stitch)
      while (++x < dx - 1) {
        ;(t0 = t1), (t1 = values[x + 1] >= value)
        // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
        cases[t0 | (t1 << 1)].forEach(stitch)
      }
      // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
      cases[t1 << 0].forEach(stitch)

      // General case for the intermediate rows.
      while (++y < dy - 1) {
        x = -1
        t1 = values[y * dx + dx] >= value
        t2 = values[y * dx] >= value
        // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
        cases[(t1 << 1) | (t2 << 2)].forEach(stitch)
        while (++x < dx - 1) {
          ;(t0 = t1), (t1 = values[y * dx + dx + x + 1] >= value)
          ;(t3 = t2), (t2 = values[y * dx + x + 1] >= value)
          // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
          cases[t0 | (t1 << 1) | (t2 << 2) | (t3 << 3)].forEach(stitch)
        }
        // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
        cases[t1 | (t2 << 3)].forEach(stitch)
      }

      // Special case for the last row (y = dy - 1, t0 = t1 = 0).
      x = -1
      t2 = values[y * dx] >= value
      // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
      cases[t2 << 2].forEach(stitch)
      while (++x < dx - 1) {
        ;(t3 = t2), (t2 = values[y * dx + x + 1] >= value)
        // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
        cases[(t2 << 2) | (t3 << 3)].forEach(stitch)
      }
      // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
      cases[t2 << 3].forEach(stitch)

      // @ts-expect-error TS(7006) FIXME: Parameter 'line' implicitly has an 'any' type.
      function stitch(line) {
        // @ts-expect-error TS(7005) FIXME: Variable 'x' implicitly has an 'any' type.
        let start = [line[0][0] + x, line[0][1] + y],
          // @ts-expect-error TS(7005) FIXME: Variable 'x' implicitly has an 'any' type.
          end = [line[1][0] + x, line[1][1] + y],
          startIndex = index(start),
          endIndex = index(end),
          f,
          g
        if ((f = fragmentByEnd[startIndex])) {
          if ((g = fragmentByStart[endIndex])) {
            delete fragmentByEnd[f.end]
            delete fragmentByStart[g.start]
            if (f === g) {
              f.ring.push(end)
              callback(f.ring)
            } else {
              fragmentByStart[f.start] = fragmentByEnd[g.end] = {
                start: f.start,
                end: g.end,
                ring: f.ring.concat(g.ring),
              }
            }
          } else {
            delete fragmentByEnd[f.end]
            f.ring.push(end)
            fragmentByEnd[(f.end = endIndex)] = f
          }
        } else if ((f = fragmentByStart[endIndex])) {
          if ((g = fragmentByEnd[startIndex])) {
            delete fragmentByStart[f.start]
            delete fragmentByEnd[g.end]
            if (f === g) {
              f.ring.push(end)
              callback(f.ring)
            } else {
              fragmentByStart[g.start] = fragmentByEnd[f.end] = {
                start: g.start,
                end: f.end,
                ring: g.ring.concat(f.ring),
              }
            }
          } else {
            delete fragmentByStart[f.start]
            f.ring.unshift(start)
            fragmentByStart[(f.start = startIndex)] = f
          }
        } else {
          fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {
            start: startIndex,
            end: endIndex,
            ring: [start, end],
          }
        }
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'point' implicitly has an 'any' type.
    function index(point) {
      return point[0] * 2 + point[1] * (dx + 1) * 4
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'ring' implicitly has an 'any' type.
    function smoothLinear(ring, values, value) {
      // @ts-expect-error TS(7006) FIXME: Parameter 'point' implicitly has an 'any' type.
      ring.forEach(function (point) {
        let x = point[0],
          y = point[1],
          xt = x | 0,
          yt = y | 0,
          v0,
          v1 = values[yt * dx + xt]
        if (x > 0 && x < dx && xt === x) {
          v0 = values[yt * dx + xt - 1]
          point[0] = x + (value - v0) / (v1 - v0) - 0.5
        }
        if (y > 0 && y < dy && yt === y) {
          v0 = values[(yt - 1) * dx + xt]
          point[1] = y + (value - v0) / (v1 - v0) - 0.5
        }
      })
    }

    contours.contour = contour

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    contours.size = function (_) {
      if (!arguments.length) return [dx, dy]
      const _0 = Math.floor(_[0]),
        _1 = Math.floor(_[1])
      if (!(_0 >= 0 && _1 >= 0)) throw new Error('invalid size')
      return (dx = _0), (dy = _1), contours
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    contours.thresholds = function (_) {
      return arguments.length
        ? ((threshold = typeof _ === 'function' ? _ : Array.isArray(_) ? constant$6(slice$3.call(_)) : constant$6(_)),
          contours)
        : threshold
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    contours.smooth = function (_) {
      return arguments.length ? ((smooth = _ ? smoothLinear : noop$1), contours) : smooth === smoothLinear
    }

    return contours
  }

  // TODO Optimize edge cases.
  // TODO Optimize index calculation.
  // TODO Optimize arguments.
  // @ts-expect-error TS(7006) FIXME: Parameter 'source' implicitly has an 'any' type.
  function blurX(source, target, r) {
    const n = source.width,
      m = source.height,
      w = (r << 1) + 1
    for (let j = 0; j < m; ++j) {
      for (let i = 0, sr = 0; i < n + r; ++i) {
        if (i < n) {
          sr += source.data[i + j * n]
        }
        if (i >= r) {
          if (i >= w) {
            sr -= source.data[i - w + j * n]
          }
          target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w)
        }
      }
    }
  }

  // TODO Optimize edge cases.
  // TODO Optimize index calculation.
  // TODO Optimize arguments.
  // @ts-expect-error TS(7006) FIXME: Parameter 'source' implicitly has an 'any' type.
  function blurY(source, target, r) {
    const n = source.width,
      m = source.height,
      w = (r << 1) + 1
    for (let i = 0; i < n; ++i) {
      for (let j = 0, sr = 0; j < m + r; ++j) {
        if (j < m) {
          sr += source.data[i + j * n]
        }
        if (j >= r) {
          if (j >= w) {
            sr -= source.data[i + (j - w) * n]
          }
          target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w)
        }
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function defaultX(d) {
    return d[0]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function defaultY(d) {
    return d[1]
  }

  function defaultWeight() {
    return 1
  }

  function density() {
    let x = defaultX,
      y = defaultY,
      weight = defaultWeight,
      dx = 960,
      dy = 500,
      r = 20, // blur radius
      k = 2, // log2(grid cell size)
      o = r * 3, // grid offset, to pad for blur
      n = (dx + o * 2) >> k, // grid width
      m = (dy + o * 2) >> k, // grid height
      threshold = constant$6(20)

    // @ts-expect-error TS(7006) FIXME: Parameter 'data' implicitly has an 'any' type.
    function density(data) {
      const values0 = new Float32Array(n * m),
        values1 = new Float32Array(n * m)

      // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
      data.forEach(function (d, i, data) {
        // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 3.
        const xi = (+x(d, i, data) + o) >> k,
          // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 3.
          yi = (+y(d, i, data) + o) >> k,
          // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 3.
          wi = +weight(d, i, data)
        if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
          values0[xi + yi * n] += wi
        }
      })

      // TODO Optimize.
      blurX({ width: n, height: m, data: values0 }, { width: n, height: m, data: values1 }, r >> k)
      blurY({ width: n, height: m, data: values1 }, { width: n, height: m, data: values0 }, r >> k)
      blurX({ width: n, height: m, data: values0 }, { width: n, height: m, data: values1 }, r >> k)
      blurY({ width: n, height: m, data: values1 }, { width: n, height: m, data: values0 }, r >> k)
      blurX({ width: n, height: m, data: values0 }, { width: n, height: m, data: values1 }, r >> k)
      blurY({ width: n, height: m, data: values1 }, { width: n, height: m, data: values0 }, r >> k)

      // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 1.
      let tz = threshold(values0)

      // Convert number of thresholds into uniform thresholds.
      if (!Array.isArray(tz)) {
        // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
        const stop = max(values0)
        tz = tickStep(0, stop, tz)
        tz = sequence(0, Math.floor(stop / tz) * tz, tz)
        tz.shift()
      }

      return (
        contours()
          .thresholds(tz)
          // @ts-expect-error TS(2339) FIXME: Property 'size' does not exist on type '((values: ... Remove this comment to see the full error message
          .size([n, m])(values0)
          .map(transform)
      )
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'geometry' implicitly has an 'any' type.
    function transform(geometry) {
      geometry.value *= Math.pow(2, -2 * k) // Density in points per square pixel.
      geometry.coordinates.forEach(transformPolygon)
      return geometry
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'coordinates' implicitly has an 'any' ty... Remove this comment to see the full error message
    function transformPolygon(coordinates) {
      coordinates.forEach(transformRing)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'coordinates' implicitly has an 'any' ty... Remove this comment to see the full error message
    function transformRing(coordinates) {
      coordinates.forEach(transformPoint)
    }

    // TODO Optimize.
    // @ts-expect-error TS(7006) FIXME: Parameter 'coordinates' implicitly has an 'any' ty... Remove this comment to see the full error message
    function transformPoint(coordinates) {
      coordinates[0] = coordinates[0] * Math.pow(2, k) - o
      coordinates[1] = coordinates[1] * Math.pow(2, k) - o
    }

    function resize() {
      o = r * 3
      n = (dx + o * 2) >> k
      m = (dy + o * 2) >> k
      return density
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    density.x = function (_) {
      return arguments.length ? ((x = typeof _ === 'function' ? _ : constant$6(+_)), density) : x
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    density.y = function (_) {
      return arguments.length ? ((y = typeof _ === 'function' ? _ : constant$6(+_)), density) : y
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    density.weight = function (_) {
      return arguments.length ? ((weight = typeof _ === 'function' ? _ : constant$6(+_)), density) : weight
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    density.size = function (_) {
      if (!arguments.length) return [dx, dy]
      const _0 = +_[0],
        _1 = +_[1]
      if (!(_0 >= 0 && _1 >= 0)) throw new Error('invalid size')
      return (dx = _0), (dy = _1), resize()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    density.cellSize = function (_) {
      if (!arguments.length) return 1 << k
      if (!((_ = +_) >= 1)) throw new Error('invalid cell size')
      return (k = Math.floor(Math.log(_) / Math.LN2)), resize()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    density.thresholds = function (_) {
      return arguments.length
        ? ((threshold = typeof _ === 'function' ? _ : Array.isArray(_) ? constant$6(slice$3.call(_)) : constant$6(_)),
          density)
        : threshold
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    density.bandwidth = function (_) {
      if (!arguments.length) return Math.sqrt(r * (r + 1))
      if (!((_ = +_) >= 0)) throw new Error('invalid bandwidth')
      return (r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2)), resize()
    }

    return density
  }

  const EPSILON = Math.pow(2, -52)
  const EDGE_STACK = new Uint32Array(512)

  class Delaunator {
    // @ts-expect-error TS(7006) FIXME: Parameter 'points' implicitly has an 'any' type.
    static from(points, getX = defaultGetX, getY = defaultGetY) {
      const n = points.length
      const coords = new Float64Array(n * 2)

      for (let i = 0; i < n; i++) {
        const p = points[i]
        coords[2 * i] = getX(p)
        coords[2 * i + 1] = getY(p)
      }

      return new Delaunator(coords)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'coords' implicitly has an 'any' type.
    constructor(coords) {
      const n = coords.length >> 1
      if (n > 0 && typeof coords[0] !== 'number') throw new Error('Expected coords to contain numbers.')

      // @ts-expect-error TS(2339) FIXME: Property 'coords' does not exist on type 'Delaunat... Remove this comment to see the full error message
      this.coords = coords

      // arrays that will store the triangulation graph
      const maxTriangles = Math.max(2 * n - 5, 0)
      // @ts-expect-error TS(2551) FIXME: Property '_triangles' does not exist on type 'Dela... Remove this comment to see the full error message
      this._triangles = new Uint32Array(maxTriangles * 3)
      // @ts-expect-error TS(2339) FIXME: Property '_halfedges' does not exist on type 'Dela... Remove this comment to see the full error message
      this._halfedges = new Int32Array(maxTriangles * 3)

      // temporary arrays for tracking the edges of the advancing convex hull
      // @ts-expect-error TS(2339) FIXME: Property '_hashSize' does not exist on type 'Delau... Remove this comment to see the full error message
      this._hashSize = Math.ceil(Math.sqrt(n))
      // @ts-expect-error TS(2339) FIXME: Property '_hullPrev' does not exist on type 'Delau... Remove this comment to see the full error message
      this._hullPrev = new Uint32Array(n) // edge to prev edge
      // @ts-expect-error TS(2339) FIXME: Property '_hullNext' does not exist on type 'Delau... Remove this comment to see the full error message
      this._hullNext = new Uint32Array(n) // edge to next edge
      // @ts-expect-error TS(2339) FIXME: Property '_hullTri' does not exist on type 'Delaun... Remove this comment to see the full error message
      this._hullTri = new Uint32Array(n) // edge to adjacent triangle
      // @ts-expect-error TS(2339) FIXME: Property '_hullHash' does not exist on type 'Delau... Remove this comment to see the full error message
      this._hullHash = new Int32Array(this._hashSize).fill(-1) // angular edge hash

      // temporary arrays for sorting points
      // @ts-expect-error TS(2339) FIXME: Property '_ids' does not exist on type 'Delaunator... Remove this comment to see the full error message
      this._ids = new Uint32Array(n)
      // @ts-expect-error TS(2339) FIXME: Property '_dists' does not exist on type 'Delaunat... Remove this comment to see the full error message
      this._dists = new Float64Array(n)

      this.update()
    }

    update() {
      // @ts-expect-error TS(2339) FIXME: Property 'coords' does not exist on type 'Delaunat... Remove this comment to see the full error message
      const { coords, _hullPrev: hullPrev, _hullNext: hullNext, _hullTri: hullTri, _hullHash: hullHash } = this
      const n = coords.length >> 1

      // populate an array of point indices; calculate input data bbox
      let minX = Infinity
      let minY = Infinity
      let maxX = -Infinity
      let maxY = -Infinity

      for (let i = 0; i < n; i++) {
        const x = coords[2 * i]
        const y = coords[2 * i + 1]
        if (x < minX) minX = x
        if (y < minY) minY = y
        if (x > maxX) maxX = x
        if (y > maxY) maxY = y
        // @ts-expect-error TS(2339) FIXME: Property '_ids' does not exist on type 'Delaunator... Remove this comment to see the full error message
        this._ids[i] = i
      }
      const cx = (minX + maxX) / 2
      const cy = (minY + maxY) / 2

      let minDist = Infinity
      let i0, i1, i2

      // pick a seed point close to the center
      for (let i = 0; i < n; i++) {
        const d = dist(cx, cy, coords[2 * i], coords[2 * i + 1])
        if (d < minDist) {
          i0 = i
          minDist = d
        }
      }
      // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
      const i0x = coords[2 * i0]
      // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
      const i0y = coords[2 * i0 + 1]

      minDist = Infinity

      // find the point closest to the seed
      for (let i = 0; i < n; i++) {
        if (i === i0) continue
        const d = dist(i0x, i0y, coords[2 * i], coords[2 * i + 1])
        if (d < minDist && d > 0) {
          i1 = i
          minDist = d
        }
      }
      // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
      let i1x = coords[2 * i1]
      // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
      let i1y = coords[2 * i1 + 1]

      let minRadius = Infinity

      // find the third point which forms the smallest circumcircle with the first two
      for (let i = 0; i < n; i++) {
        if (i === i0 || i === i1) continue
        const r = circumradius(i0x, i0y, i1x, i1y, coords[2 * i], coords[2 * i + 1])
        if (r < minRadius) {
          i2 = i
          minRadius = r
        }
      }
      // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
      let i2x = coords[2 * i2]
      // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
      let i2y = coords[2 * i2 + 1]

      if (minRadius === Infinity) {
        // order collinear points by dx (or dy if all x are identical)
        // and return the list as a hull
        for (let i = 0; i < n; i++) {
          // @ts-expect-error TS(2339) FIXME: Property '_dists' does not exist on type 'Delaunat... Remove this comment to see the full error message
          this._dists[i] = coords[2 * i] - coords[0] || coords[2 * i + 1] - coords[1]
        }
        // @ts-expect-error TS(2339) FIXME: Property '_ids' does not exist on type 'Delaunator... Remove this comment to see the full error message
        quicksort(this._ids, this._dists, 0, n - 1)
        const hull = new Uint32Array(n)
        let j = 0
        for (let i = 0, d0 = -Infinity; i < n; i++) {
          // @ts-expect-error TS(2339) FIXME: Property '_ids' does not exist on type 'Delaunator... Remove this comment to see the full error message
          const id = this._ids[i]
          // @ts-expect-error TS(2339) FIXME: Property '_dists' does not exist on type 'Delaunat... Remove this comment to see the full error message
          if (this._dists[id] > d0) {
            hull[j++] = id
            // @ts-expect-error TS(2339) FIXME: Property '_dists' does not exist on type 'Delaunat... Remove this comment to see the full error message
            d0 = this._dists[id]
          }
        }
        // @ts-expect-error TS(2339) FIXME: Property 'hull' does not exist on type 'Delaunator... Remove this comment to see the full error message
        this.hull = hull.subarray(0, j)
        // @ts-expect-error TS(2339) FIXME: Property 'triangles' does not exist on type 'Delau... Remove this comment to see the full error message
        this.triangles = new Uint32Array(0)
        // @ts-expect-error TS(2339) FIXME: Property 'halfedges' does not exist on type 'Delau... Remove this comment to see the full error message
        this.halfedges = new Uint32Array(0)
        return
      }

      // swap the order of the seed points for counter-clockwise orientation
      if (orient(i0x, i0y, i1x, i1y, i2x, i2y)) {
        const i = i1
        const x = i1x
        const y = i1y
        i1 = i2
        i1x = i2x
        i1y = i2y
        i2 = i
        i2x = x
        i2y = y
      }

      const center = circumcenter(i0x, i0y, i1x, i1y, i2x, i2y)
      // @ts-expect-error TS(2339) FIXME: Property '_cx' does not exist on type 'Delaunator'... Remove this comment to see the full error message
      this._cx = center.x
      // @ts-expect-error TS(2339) FIXME: Property '_cy' does not exist on type 'Delaunator'... Remove this comment to see the full error message
      this._cy = center.y

      for (let i = 0; i < n; i++) {
        // @ts-expect-error TS(2339) FIXME: Property '_dists' does not exist on type 'Delaunat... Remove this comment to see the full error message
        this._dists[i] = dist(coords[2 * i], coords[2 * i + 1], center.x, center.y)
      }

      // sort the points by distance from the seed triangle circumcenter
      // @ts-expect-error TS(2339) FIXME: Property '_ids' does not exist on type 'Delaunator... Remove this comment to see the full error message
      quicksort(this._ids, this._dists, 0, n - 1)

      // set up the seed triangle as the starting hull
      // @ts-expect-error TS(2339) FIXME: Property '_hullStart' does not exist on type 'Dela... Remove this comment to see the full error message
      this._hullStart = i0
      let hullSize = 3

      hullNext[i0] = hullPrev[i2] = i1
      hullNext[i1] = hullPrev[i0] = i2
      hullNext[i2] = hullPrev[i1] = i0

      hullTri[i0] = 0
      hullTri[i1] = 1
      hullTri[i2] = 2

      hullHash.fill(-1)
      hullHash[this._hashKey(i0x, i0y)] = i0
      hullHash[this._hashKey(i1x, i1y)] = i1
      hullHash[this._hashKey(i2x, i2y)] = i2

      // @ts-expect-error TS(2339) FIXME: Property 'trianglesLen' does not exist on type 'De... Remove this comment to see the full error message
      this.trianglesLen = 0
      this._addTriangle(i0, i1, i2, -1, -1, -1)

      // @ts-expect-error TS(2339) FIXME: Property '_ids' does not exist on type 'Delaunator... Remove this comment to see the full error message
      for (let k = 0, xp, yp; k < this._ids.length; k++) {
        // @ts-expect-error TS(2339) FIXME: Property '_ids' does not exist on type 'Delaunator... Remove this comment to see the full error message
        const i = this._ids[k]
        const x = coords[2 * i]
        const y = coords[2 * i + 1]

        // skip near-duplicate points
        if (k > 0 && Math.abs(x - xp) <= EPSILON && Math.abs(y - yp) <= EPSILON) continue
        xp = x
        yp = y

        // skip seed triangle points
        if (i === i0 || i === i1 || i === i2) continue

        // find a visible edge on the convex hull using edge hash
        let start = 0
        // @ts-expect-error TS(2339) FIXME: Property '_hashSize' does not exist on type 'Delau... Remove this comment to see the full error message
        for (let j = 0, key = this._hashKey(x, y); j < this._hashSize; j++) {
          // @ts-expect-error TS(2339) FIXME: Property '_hashSize' does not exist on type 'Delau... Remove this comment to see the full error message
          start = hullHash[(key + j) % this._hashSize]
          if (start !== -1 && start !== hullNext[start]) break
        }

        start = hullPrev[start]
        let e = start,
          q
        while (((q = hullNext[e]), !orient(x, y, coords[2 * e], coords[2 * e + 1], coords[2 * q], coords[2 * q + 1]))) {
          e = q
          if (e === start) {
            e = -1
            break
          }
        }
        if (e === -1) continue // likely a near-duplicate point; skip it

        // add the first triangle from the point
        let t = this._addTriangle(e, i, hullNext[e], -1, -1, hullTri[e])

        // recursively flip triangles from the point until they satisfy the Delaunay condition
        hullTri[i] = this._legalize(t + 2)
        hullTri[e] = t // keep track of boundary triangles on the hull
        hullSize++

        // walk forward through the hull, adding more triangles and flipping recursively
        let n = hullNext[e]
        while (((q = hullNext[n]), orient(x, y, coords[2 * n], coords[2 * n + 1], coords[2 * q], coords[2 * q + 1]))) {
          t = this._addTriangle(n, i, q, hullTri[i], -1, hullTri[n])
          hullTri[i] = this._legalize(t + 2)
          hullNext[n] = n // mark as removed
          hullSize--
          n = q
        }

        // walk backward from the other side, adding more triangles and flipping
        if (e === start) {
          while (
            ((q = hullPrev[e]), orient(x, y, coords[2 * q], coords[2 * q + 1], coords[2 * e], coords[2 * e + 1]))
          ) {
            t = this._addTriangle(q, i, e, -1, hullTri[e], hullTri[q])
            this._legalize(t + 2)
            hullTri[q] = t
            hullNext[e] = e // mark as removed
            hullSize--
            e = q
          }
        }

        // update the hull indices
        // @ts-expect-error TS(2339) FIXME: Property '_hullStart' does not exist on type 'Dela... Remove this comment to see the full error message
        this._hullStart = hullPrev[i] = e
        hullNext[e] = hullPrev[n] = i
        hullNext[i] = n

        // save the two new edges in the hash table
        hullHash[this._hashKey(x, y)] = i
        hullHash[this._hashKey(coords[2 * e], coords[2 * e + 1])] = e
      }

      // @ts-expect-error TS(2339) FIXME: Property 'hull' does not exist on type 'Delaunator... Remove this comment to see the full error message
      this.hull = new Uint32Array(hullSize)
      // @ts-expect-error TS(2339) FIXME: Property '_hullStart' does not exist on type 'Dela... Remove this comment to see the full error message
      for (let i = 0, e = this._hullStart; i < hullSize; i++) {
        // @ts-expect-error TS(2339) FIXME: Property 'hull' does not exist on type 'Delaunator... Remove this comment to see the full error message
        this.hull[i] = e
        e = hullNext[e]
      }

      // trim typed triangle mesh arrays
      // @ts-expect-error TS(2339) FIXME: Property 'triangles' does not exist on type 'Delau... Remove this comment to see the full error message
      this.triangles = this._triangles.subarray(0, this.trianglesLen)
      // @ts-expect-error TS(2339) FIXME: Property 'halfedges' does not exist on type 'Delau... Remove this comment to see the full error message
      this.halfedges = this._halfedges.subarray(0, this.trianglesLen)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    _hashKey(x, y) {
      // @ts-expect-error TS(2339) FIXME: Property '_cx' does not exist on type 'Delaunator'... Remove this comment to see the full error message
      return Math.floor(pseudoAngle(x - this._cx, y - this._cy) * this._hashSize) % this._hashSize
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    _legalize(a) {
      // @ts-expect-error TS(2339) FIXME: Property '_triangles' does not exist on type 'Dela... Remove this comment to see the full error message
      const { _triangles: triangles, _halfedges: halfedges, coords } = this

      let i = 0
      let ar = 0

      // recursion eliminated with a fixed-size stack
      while (true) {
        const b = halfedges[a]

        /* if the pair of triangles doesn't satisfy the Delaunay condition
         * (p1 is inside the circumcircle of [p0, pl, pr]), flip them,
         * then do the same check/flip recursively for the new pair of triangles
         *
         *           pl                    pl
         *          /||\                  /  \
         *       al/ || \bl            al/    \a
         *        /  ||  \              /      \
         *       /  a||b  \    flip    /___ar___\
         *     p0\   ||   /p1   =>   p0\---bl---/p1
         *        \  ||  /              \      /
         *       ar\ || /br             b\    /br
         *          \||/                  \  /
         *           pr                    pr
         */
        const a0 = a - (a % 3)
        ar = a0 + ((a + 2) % 3)

        if (b === -1) {
          // convex hull edge
          if (i === 0) break
          a = EDGE_STACK[--i]
          continue
        }

        const b0 = b - (b % 3)
        const al = a0 + ((a + 1) % 3)
        const bl = b0 + ((b + 2) % 3)

        const p0 = triangles[ar]
        const pr = triangles[a]
        const pl = triangles[al]
        const p1 = triangles[bl]

        const illegal = inCircle(
          coords[2 * p0],
          coords[2 * p0 + 1],
          coords[2 * pr],
          coords[2 * pr + 1],
          coords[2 * pl],
          coords[2 * pl + 1],
          coords[2 * p1],
          coords[2 * p1 + 1]
        )

        if (illegal) {
          triangles[a] = p1
          triangles[b] = p0

          const hbl = halfedges[bl]

          // edge swapped on the other side of the hull (rare); fix the halfedge reference
          if (hbl === -1) {
            // @ts-expect-error TS(2339) FIXME: Property '_hullStart' does not exist on type 'Dela... Remove this comment to see the full error message
            let e = this._hullStart
            do {
              // @ts-expect-error TS(2339) FIXME: Property '_hullTri' does not exist on type 'Delaun... Remove this comment to see the full error message
              if (this._hullTri[e] === bl) {
                // @ts-expect-error TS(2339) FIXME: Property '_hullTri' does not exist on type 'Delaun... Remove this comment to see the full error message
                this._hullTri[e] = a
                break
              }
              // @ts-expect-error TS(2339) FIXME: Property '_hullPrev' does not exist on type 'Delau... Remove this comment to see the full error message
              e = this._hullPrev[e]
              // @ts-expect-error TS(2339) FIXME: Property '_hullStart' does not exist on type 'Dela... Remove this comment to see the full error message
            } while (e !== this._hullStart)
          }
          this._link(a, hbl)
          this._link(b, halfedges[ar])
          this._link(ar, bl)

          const br = b0 + ((b + 1) % 3)

          // don't worry about hitting the cap: it can only happen on extremely degenerate input
          if (i < EDGE_STACK.length) {
            EDGE_STACK[i++] = br
          }
        } else {
          if (i === 0) break
          a = EDGE_STACK[--i]
        }
      }

      return ar
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    _link(a, b) {
      // @ts-expect-error TS(2339) FIXME: Property '_halfedges' does not exist on type 'Dela... Remove this comment to see the full error message
      this._halfedges[a] = b
      // @ts-expect-error TS(2339) FIXME: Property '_halfedges' does not exist on type 'Dela... Remove this comment to see the full error message
      if (b !== -1) this._halfedges[b] = a
    }

    // add a new triangle given vertex indices and adjacent half-edge ids
    // @ts-expect-error TS(7006) FIXME: Parameter 'i0' implicitly has an 'any' type.
    _addTriangle(i0, i1, i2, a, b, c) {
      // @ts-expect-error TS(2339) FIXME: Property 'trianglesLen' does not exist on type 'De... Remove this comment to see the full error message
      const t = this.trianglesLen

      // @ts-expect-error TS(2551) FIXME: Property '_triangles' does not exist on type 'Dela... Remove this comment to see the full error message
      this._triangles[t] = i0
      // @ts-expect-error TS(2551) FIXME: Property '_triangles' does not exist on type 'Dela... Remove this comment to see the full error message
      this._triangles[t + 1] = i1
      // @ts-expect-error TS(2551) FIXME: Property '_triangles' does not exist on type 'Dela... Remove this comment to see the full error message
      this._triangles[t + 2] = i2

      this._link(t, a)
      this._link(t + 1, b)
      this._link(t + 2, c)

      // @ts-expect-error TS(2339) FIXME: Property 'trianglesLen' does not exist on type 'De... Remove this comment to see the full error message
      this.trianglesLen += 3

      return t
    }
  }

  // monotonically increases with real angle, but doesn't need expensive trigonometry
  // @ts-expect-error TS(7006) FIXME: Parameter 'dx' implicitly has an 'any' type.
  function pseudoAngle(dx, dy) {
    const p = dx / (Math.abs(dx) + Math.abs(dy))
    return (dy > 0 ? 3 - p : 1 + p) / 4 // [0..1]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'ax' implicitly has an 'any' type.
  function dist(ax, ay, bx, by) {
    const dx = ax - bx
    const dy = ay - by
    return dx * dx + dy * dy
  }

  // return 2d orientation sign if we're confident in it through J. Shewchuk's error bound check
  // @ts-expect-error TS(7006) FIXME: Parameter 'px' implicitly has an 'any' type.
  function orientIfSure(px, py, rx, ry, qx, qy) {
    const l = (ry - py) * (qx - px)
    const r = (rx - px) * (qy - py)
    return Math.abs(l - r) >= 3.3306690738754716e-16 * Math.abs(l + r) ? l - r : 0
  }

  // a more robust orientation test that's stable in a given triangle (to fix robustness issues)
  // @ts-expect-error TS(7006) FIXME: Parameter 'rx' implicitly has an 'any' type.
  function orient(rx, ry, qx, qy, px, py) {
    const sign =
      orientIfSure(px, py, rx, ry, qx, qy) ||
      orientIfSure(rx, ry, qx, qy, px, py) ||
      orientIfSure(qx, qy, px, py, rx, ry)
    return sign < 0
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'ax' implicitly has an 'any' type.
  function inCircle(ax, ay, bx, by, cx, cy, px, py) {
    const dx = ax - px
    const dy = ay - py
    const ex = bx - px
    const ey = by - py
    const fx = cx - px
    const fy = cy - py

    const ap = dx * dx + dy * dy
    const bp = ex * ex + ey * ey
    const cp = fx * fx + fy * fy

    return dx * (ey * cp - bp * fy) - dy * (ex * cp - bp * fx) + ap * (ex * fy - ey * fx) < 0
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'ax' implicitly has an 'any' type.
  function circumradius(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax
    const dy = by - ay
    const ex = cx - ax
    const ey = cy - ay

    const bl = dx * dx + dy * dy
    const cl = ex * ex + ey * ey
    const d = 0.5 / (dx * ey - dy * ex)

    const x = (ey * bl - dy * cl) * d
    const y = (dx * cl - ex * bl) * d

    return x * x + y * y
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'ax' implicitly has an 'any' type.
  function circumcenter(ax, ay, bx, by, cx, cy) {
    const dx = bx - ax
    const dy = by - ay
    const ex = cx - ax
    const ey = cy - ay

    const bl = dx * dx + dy * dy
    const cl = ex * ex + ey * ey
    const d = 0.5 / (dx * ey - dy * ex)

    const x = ax + (ey * bl - dy * cl) * d
    const y = ay + (dx * cl - ex * bl) * d

    return { x, y }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'ids' implicitly has an 'any' type.
  function quicksort(ids, dists, left, right) {
    if (right - left <= 20) {
      for (let i = left + 1; i <= right; i++) {
        const temp = ids[i]
        const tempDist = dists[temp]
        let j = i - 1
        while (j >= left && dists[ids[j]] > tempDist) ids[j + 1] = ids[j--]
        ids[j + 1] = temp
      }
    } else {
      const median = (left + right) >> 1
      let i = left + 1
      let j = right
      swap$1(ids, median, i)
      if (dists[ids[left]] > dists[ids[right]]) swap$1(ids, left, right)
      if (dists[ids[i]] > dists[ids[right]]) swap$1(ids, i, right)
      if (dists[ids[left]] > dists[ids[i]]) swap$1(ids, left, i)

      const temp = ids[i]
      const tempDist = dists[temp]
      while (true) {
        do i++
        while (dists[ids[i]] < tempDist)
        do j--
        while (dists[ids[j]] > tempDist)
        if (j < i) break
        swap$1(ids, i, j)
      }
      ids[left + 1] = ids[j]
      ids[j] = temp

      if (right - i + 1 >= j - left) {
        quicksort(ids, dists, i, right)
        quicksort(ids, dists, left, j - 1)
      } else {
        quicksort(ids, dists, left, j - 1)
        quicksort(ids, dists, i, right)
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'arr' implicitly has an 'any' type.
  function swap$1(arr, i, j) {
    const tmp = arr[i]
    arr[i] = arr[j]
    arr[j] = tmp
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
  function defaultGetX(p) {
    return p[0]
  }
  // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
  function defaultGetY(p) {
    return p[1]
  }

  const epsilon$3 = 1e-6

  class Path$1 {
    constructor() {
      // @ts-expect-error TS(2339) FIXME: Property '_x0' does not exist on type 'Path$1'.
      this._x0 =
        // @ts-expect-error TS(2339) FIXME: Property '_y0' does not exist on type 'Path$1'.
        this._y0 = // start of current subpath
        // @ts-expect-error TS(2339) FIXME: Property '_x1' does not exist on type 'Path$1'.
        this._x1 =
        // @ts-expect-error TS(2339) FIXME: Property '_y1' does not exist on type 'Path$1'.
        this._y1 =
          null // end of current subpath
      // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'Path$1'.
      this._ = ''
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    moveTo(x, y) {
      // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'Path$1'.
      this._ += `M${(this._x0 = this._x1 = +x)},${(this._y0 = this._y1 = +y)}`
    }
    closePath() {
      // @ts-expect-error TS(2339) FIXME: Property '_x1' does not exist on type 'Path$1'.
      if (this._x1 !== null) {
        // @ts-expect-error TS(2339) FIXME: Property '_x1' does not exist on type 'Path$1'.
        ;(this._x1 = this._x0), (this._y1 = this._y0)
        // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'Path$1'.
        this._ += 'Z'
      }
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    lineTo(x, y) {
      // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'Path$1'.
      this._ += `L${(this._x1 = +x)},${(this._y1 = +y)}`
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    arc(x, y, r) {
      ;(x = +x), (y = +y), (r = +r)
      const x0 = x + r
      const y0 = y
      if (r < 0) throw new Error('negative radius')
      // @ts-expect-error TS(2339) FIXME: Property '_x1' does not exist on type 'Path$1'.
      if (this._x1 === null) this._ += `M${x0},${y0}`
      // @ts-expect-error TS(2339) FIXME: Property '_x1' does not exist on type 'Path$1'.
      else if (Math.abs(this._x1 - x0) > epsilon$3 || Math.abs(this._y1 - y0) > epsilon$3) this._ += 'L' + x0 + ',' + y0
      if (!r) return
      // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'Path$1'.
      this._ += `A${r},${r},0,1,1,${x - r},${y}A${r},${r},0,1,1,${(this._x1 = x0)},${(this._y1 = y0)}`
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    rect(x, y, w, h) {
      // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'Path$1'.
      this._ += `M${(this._x0 = this._x1 = +x)},${(this._y0 = this._y1 = +y)}h${+w}v${+h}h${-w}Z`
    }
    value() {
      // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'Path$1'.
      return this._ || null
    }
  }

  class Polygon {
    constructor() {
      // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'Polygon'.
      this._ = []
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    moveTo(x, y) {
      // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'Polygon'.
      this._.push([x, y])
    }
    closePath() {
      // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'Polygon'.
      this._.push(this._[0].slice())
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    lineTo(x, y) {
      // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'Polygon'.
      this._.push([x, y])
    }
    value() {
      // @ts-expect-error TS(2339) FIXME: Property '_' does not exist on type 'Polygon'.
      return this._.length ? this._ : null
    }
  }

  class Voronoi {
    // @ts-expect-error TS(7006) FIXME: Parameter 'delaunay' implicitly has an 'any' type.
    constructor(delaunay, [xmin, ymin, xmax, ymax] = [0, 0, 960, 500]) {
      if (!((xmax = +xmax) >= (xmin = +xmin)) || !((ymax = +ymax) >= (ymin = +ymin))) throw new Error('invalid bounds')
      // @ts-expect-error TS(2339) FIXME: Property 'delaunay' does not exist on type 'Vorono... Remove this comment to see the full error message
      this.delaunay = delaunay
      // @ts-expect-error TS(2339) FIXME: Property '_circumcenters' does not exist on type '... Remove this comment to see the full error message
      this._circumcenters = new Float64Array(delaunay.points.length * 2)
      // @ts-expect-error TS(2339) FIXME: Property 'vectors' does not exist on type 'Voronoi... Remove this comment to see the full error message
      this.vectors = new Float64Array(delaunay.points.length * 2)
      // @ts-expect-error TS(2339) FIXME: Property 'xmax' does not exist on type 'Voronoi'.
      ;(this.xmax = xmax), (this.xmin = xmin)
      // @ts-expect-error TS(2339) FIXME: Property 'ymax' does not exist on type 'Voronoi'.
      ;(this.ymax = ymax), (this.ymin = ymin)
      this._init()
    }
    update() {
      // @ts-expect-error TS(2339) FIXME: Property 'delaunay' does not exist on type 'Vorono... Remove this comment to see the full error message
      this.delaunay.update()
      this._init()
      return this
    }
    _init() {
      const {
        // @ts-expect-error TS(2339) FIXME: Property 'delaunay' does not exist on type 'Vorono... Remove this comment to see the full error message
        delaunay: { points, hull, triangles },
        // @ts-expect-error TS(2339) FIXME: Property 'vectors' does not exist on type 'Voronoi... Remove this comment to see the full error message
        vectors,
      } = this

      // Compute circumcenters.
      // @ts-expect-error TS(2339) FIXME: Property 'circumcenters' does not exist on type 'V... Remove this comment to see the full error message
      const circumcenters = (this.circumcenters = this._circumcenters.subarray(0, (triangles.length / 3) * 2))
      for (let i = 0, j = 0, n = triangles.length, x, y; i < n; i += 3, j += 2) {
        const t1 = triangles[i] * 2
        const t2 = triangles[i + 1] * 2
        const t3 = triangles[i + 2] * 2
        const x1 = points[t1]
        const y1 = points[t1 + 1]
        const x2 = points[t2]
        const y2 = points[t2 + 1]
        const x3 = points[t3]
        const y3 = points[t3 + 1]

        const dx = x2 - x1
        const dy = y2 - y1
        const ex = x3 - x1
        const ey = y3 - y1
        const bl = dx * dx + dy * dy
        const cl = ex * ex + ey * ey
        const ab = (dx * ey - dy * ex) * 2

        if (!ab) {
          // degenerate case (collinear diagram)
          x = (x1 + x3) / 2 - 1e8 * ey
          y = (y1 + y3) / 2 + 1e8 * ex
        } else if (Math.abs(ab) < 1e-8) {
          // almost equal points (degenerate triangle)
          x = (x1 + x3) / 2
          y = (y1 + y3) / 2
        } else {
          const d = 1 / ab
          x = x1 + (ey * bl - dy * cl) * d
          y = y1 + (dx * cl - ex * bl) * d
        }
        circumcenters[j] = x
        circumcenters[j + 1] = y
      }

      // Compute exterior cell rays.
      let h = hull[hull.length - 1]
      let p0,
        p1 = h * 4
      let x0,
        x1 = points[2 * h]
      let y0,
        y1 = points[2 * h + 1]
      vectors.fill(0)
      for (let i = 0; i < hull.length; ++i) {
        h = hull[i]
        ;(p0 = p1), (x0 = x1), (y0 = y1)
        ;(p1 = h * 4), (x1 = points[2 * h]), (y1 = points[2 * h + 1])
        vectors[p0 + 2] = vectors[p1] = y0 - y1
        vectors[p0 + 3] = vectors[p1 + 1] = x1 - x0
      }
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    render(context) {
      const buffer = context == null ? (context = new Path$1()) : undefined
      const {
        // @ts-expect-error TS(2339) FIXME: Property 'delaunay' does not exist on type 'Vorono... Remove this comment to see the full error message
        delaunay: { halfedges, inedges, hull },
        // @ts-expect-error TS(2339) FIXME: Property 'circumcenters' does not exist on type 'V... Remove this comment to see the full error message
        circumcenters,
        // @ts-expect-error TS(2339) FIXME: Property 'vectors' does not exist on type 'Voronoi... Remove this comment to see the full error message
        vectors,
      } = this
      if (hull.length <= 1) return null
      for (let i = 0, n = halfedges.length; i < n; ++i) {
        const j = halfedges[i]
        if (j < i) continue
        const ti = Math.floor(i / 3) * 2
        const tj = Math.floor(j / 3) * 2
        const xi = circumcenters[ti]
        const yi = circumcenters[ti + 1]
        const xj = circumcenters[tj]
        const yj = circumcenters[tj + 1]
        this._renderSegment(xi, yi, xj, yj, context)
      }
      let h0,
        h1 = hull[hull.length - 1]
      for (let i = 0; i < hull.length; ++i) {
        ;(h0 = h1), (h1 = hull[i])
        const t = Math.floor(inedges[h1] / 3) * 2
        const x = circumcenters[t]
        const y = circumcenters[t + 1]
        const v = h0 * 4
        const p = this._project(x, y, vectors[v + 2], vectors[v + 3])
        if (p) this._renderSegment(x, y, p[0], p[1], context)
      }
      return buffer && buffer.value()
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    renderBounds(context) {
      const buffer = context == null ? (context = new Path$1()) : undefined
      // @ts-expect-error TS(2339) FIXME: Property 'xmin' does not exist on type 'Voronoi'.
      context.rect(this.xmin, this.ymin, this.xmax - this.xmin, this.ymax - this.ymin)
      return buffer && buffer.value()
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    renderCell(i, context) {
      const buffer = context == null ? (context = new Path$1()) : undefined
      const points = this._clip(i)
      if (points === null || !points.length) return
      context.moveTo(points[0], points[1])
      let n = points.length
      while (points[0] === points[n - 2] && points[1] === points[n - 1] && n > 1) n -= 2
      for (let i = 2; i < n; i += 2) {
        if (points[i] !== points[i - 2] || points[i + 1] !== points[i - 1]) context.lineTo(points[i], points[i + 1])
      }
      context.closePath()
      return buffer && buffer.value()
    }
    *cellPolygons() {
      const {
        // @ts-expect-error TS(2339) FIXME: Property 'delaunay' does not exist on type 'Vorono... Remove this comment to see the full error message
        delaunay: { points },
      } = this
      for (let i = 0, n = points.length / 2; i < n; ++i) {
        const cell = this.cellPolygon(i)
        if (cell) (cell.index = i), yield cell
      }
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    cellPolygon(i) {
      const polygon = new Polygon()
      this.renderCell(i, polygon)
      return polygon.value()
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x0' implicitly has an 'any' type.
    _renderSegment(x0, y0, x1, y1, context) {
      let S
      const c0 = this._regioncode(x0, y0)
      const c1 = this._regioncode(x1, y1)
      if (c0 === 0 && c1 === 0) {
        context.moveTo(x0, y0)
        context.lineTo(x1, y1)
      } else if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1))) {
        context.moveTo(S[0], S[1])
        context.lineTo(S[2], S[3])
      }
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    contains(i, x, y) {
      if (((x = +x), x !== x) || ((y = +y), y !== y)) return false
      // @ts-expect-error TS(2339) FIXME: Property 'delaunay' does not exist on type 'Vorono... Remove this comment to see the full error message
      return this.delaunay._step(i, x, y) === i
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    *neighbors(i) {
      const ci = this._clip(i)
      if (ci)
        // @ts-expect-error TS(2339) FIXME: Property 'delaunay' does not exist on type 'Vorono... Remove this comment to see the full error message
        for (const j of this.delaunay.neighbors(i)) {
          const cj = this._clip(j)
          // find the common edge
          if (cj)
            loop: for (let ai = 0, li = ci.length; ai < li; ai += 2) {
              for (let aj = 0, lj = cj.length; aj < lj; aj += 2) {
                if (
                  ci[ai] == cj[aj] &&
                  ci[ai + 1] == cj[aj + 1] &&
                  ci[(ai + 2) % li] == cj[(aj + lj - 2) % lj] &&
                  ci[(ai + 3) % li] == cj[(aj + lj - 1) % lj]
                ) {
                  yield j
                  break loop
                }
              }
            }
        }
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    _cell(i) {
      const {
        // @ts-expect-error TS(2339) FIXME: Property 'circumcenters' does not exist on type 'V... Remove this comment to see the full error message
        circumcenters,
        // @ts-expect-error TS(2339) FIXME: Property 'delaunay' does not exist on type 'Vorono... Remove this comment to see the full error message
        delaunay: { inedges, halfedges, triangles },
      } = this
      const e0 = inedges[i]
      if (e0 === -1) return null // coincident point
      const points = []
      let e = e0
      do {
        const t = Math.floor(e / 3)
        points.push(circumcenters[t * 2], circumcenters[t * 2 + 1])
        e = e % 3 === 2 ? e - 2 : e + 1
        if (triangles[e] !== i) break // bad triangulation
        e = halfedges[e]
      } while (e !== e0 && e !== -1)
      return points
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    _clip(i) {
      // degenerate case (1 valid point: return the box)
      // @ts-expect-error TS(2339) FIXME: Property 'delaunay' does not exist on type 'Vorono... Remove this comment to see the full error message
      if (i === 0 && this.delaunay.hull.length === 1) {
        // @ts-expect-error TS(2339) FIXME: Property 'xmax' does not exist on type 'Voronoi'.
        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin]
      }
      const points = this._cell(i)
      if (points === null) return null
      // @ts-expect-error TS(2339) FIXME: Property 'vectors' does not exist on type 'Voronoi... Remove this comment to see the full error message
      const { vectors: V } = this
      const v = i * 4
      return V[v] || V[v + 1]
        ? this._clipInfinite(i, points, V[v], V[v + 1], V[v + 2], V[v + 3])
        : this._clipFinite(i, points)
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    _clipFinite(i, points) {
      const n = points.length
      let P = null
      let x0,
        y0,
        x1 = points[n - 2],
        y1 = points[n - 1]
      let c0,
        c1 = this._regioncode(x1, y1)
      let e0, e1
      for (let j = 0; j < n; j += 2) {
        ;(x0 = x1), (y0 = y1), (x1 = points[j]), (y1 = points[j + 1])
        ;(c0 = c1), (c1 = this._regioncode(x1, y1))
        if (c0 === 0 && c1 === 0) {
          ;(e0 = e1), (e1 = 0)
          if (P) P.push(x1, y1)
          else P = [x1, y1]
        } else {
          let S, sx0, sy0, sx1, sy1
          if (c0 === 0) {
            if ((S = this._clipSegment(x0, y0, x1, y1, c0, c1)) === null) continue
            ;[sx0, sy0, sx1, sy1] = S
          } else {
            if ((S = this._clipSegment(x1, y1, x0, y0, c1, c0)) === null) continue
            ;[sx1, sy1, sx0, sy0] = S
            ;(e0 = e1), (e1 = this._edgecode(sx0, sy0))
            // @ts-expect-error TS(2531) FIXME: Object is possibly 'null'.
            if (e0 && e1) this._edge(i, e0, e1, P, P.length)
            if (P) P.push(sx0, sy0)
            else P = [sx0, sy0]
          }
          ;(e0 = e1), (e1 = this._edgecode(sx1, sy1))
          // @ts-expect-error TS(2531) FIXME: Object is possibly 'null'.
          if (e0 && e1) this._edge(i, e0, e1, P, P.length)
          if (P) P.push(sx1, sy1)
          else P = [sx1, sy1]
        }
      }
      if (P) {
        ;(e0 = e1), (e1 = this._edgecode(P[0], P[1]))
        if (e0 && e1) this._edge(i, e0, e1, P, P.length)
        // @ts-expect-error TS(2339) FIXME: Property 'xmin' does not exist on type 'Voronoi'.
      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
        // @ts-expect-error TS(2339) FIXME: Property 'xmax' does not exist on type 'Voronoi'.
        return [this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax, this.xmin, this.ymin]
      }
      return P
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x0' implicitly has an 'any' type.
    _clipSegment(x0, y0, x1, y1, c0, c1) {
      while (true) {
        if (c0 === 0 && c1 === 0) return [x0, y0, x1, y1]
        if (c0 & c1) return null
        let x,
          y,
          c = c0 || c1
        // @ts-expect-error TS(2339) FIXME: Property 'ymax' does not exist on type 'Voronoi'.
        if (c & 0b1000) (x = x0 + ((x1 - x0) * (this.ymax - y0)) / (y1 - y0)), (y = this.ymax)
        // @ts-expect-error TS(2339) FIXME: Property 'ymin' does not exist on type 'Voronoi'.
        else if (c & 0b0100) (x = x0 + ((x1 - x0) * (this.ymin - y0)) / (y1 - y0)), (y = this.ymin)
        // @ts-expect-error TS(2339) FIXME: Property 'xmax' does not exist on type 'Voronoi'.
        else if (c & 0b0010) (y = y0 + ((y1 - y0) * (this.xmax - x0)) / (x1 - x0)), (x = this.xmax)
        // @ts-expect-error TS(2339) FIXME: Property 'xmin' does not exist on type 'Voronoi'.
        else (y = y0 + ((y1 - y0) * (this.xmin - x0)) / (x1 - x0)), (x = this.xmin)
        if (c0) (x0 = x), (y0 = y), (c0 = this._regioncode(x0, y0))
        else (x1 = x), (y1 = y), (c1 = this._regioncode(x1, y1))
      }
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    _clipInfinite(i, points, vx0, vy0, vxn, vyn) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      let P = Array.from(points),
        p
      if ((p = this._project(P[0], P[1], vx0, vy0))) P.unshift(p[0], p[1])
      if ((p = this._project(P[P.length - 2], P[P.length - 1], vxn, vyn))) P.push(p[0], p[1])
      if ((P = this._clipFinite(i, P))) {
        for (let j = 0, n = P.length, c0, c1 = this._edgecode(P[n - 2], P[n - 1]); j < n; j += 2) {
          ;(c0 = c1), (c1 = this._edgecode(P[j], P[j + 1]))
          if (c0 && c1) (j = this._edge(i, c0, c1, P, j)), (n = P.length)
        }
        // @ts-expect-error TS(2339) FIXME: Property 'xmin' does not exist on type 'Voronoi'.
      } else if (this.contains(i, (this.xmin + this.xmax) / 2, (this.ymin + this.ymax) / 2)) {
        // @ts-expect-error TS(2339) FIXME: Property 'xmin' does not exist on type 'Voronoi'.
        P = [this.xmin, this.ymin, this.xmax, this.ymin, this.xmax, this.ymax, this.xmin, this.ymax]
      }
      return P
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    _edge(i, e0, e1, P, j) {
      while (e0 !== e1) {
        let x, y
        switch (e0) {
          case 0b0101:
            e0 = 0b0100
            continue // top-left
          case 0b0100:
            // @ts-expect-error TS(2339) FIXME: Property 'xmax' does not exist on type 'Voronoi'.
            ;(e0 = 0b0110), (x = this.xmax), (y = this.ymin)
            break // top
          case 0b0110:
            e0 = 0b0010
            continue // top-right
          case 0b0010:
            // @ts-expect-error TS(2339) FIXME: Property 'xmax' does not exist on type 'Voronoi'.
            ;(e0 = 0b1010), (x = this.xmax), (y = this.ymax)
            break // right
          case 0b1010:
            e0 = 0b1000
            continue // bottom-right
          case 0b1000:
            // @ts-expect-error TS(2339) FIXME: Property 'xmin' does not exist on type 'Voronoi'.
            ;(e0 = 0b1001), (x = this.xmin), (y = this.ymax)
            break // bottom
          case 0b1001:
            e0 = 0b0001
            continue // bottom-left
          case 0b0001:
            // @ts-expect-error TS(2339) FIXME: Property 'xmin' does not exist on type 'Voronoi'.
            ;(e0 = 0b0101), (x = this.xmin), (y = this.ymin)
            break // left
        }
        if ((P[j] !== x || P[j + 1] !== y) && this.contains(i, x, y)) {
          P.splice(j, 0, x, y), (j += 2)
        }
      }
      if (P.length > 4) {
        for (let i = 0; i < P.length; i += 2) {
          const j = (i + 2) % P.length,
            k = (i + 4) % P.length
          if ((P[i] === P[j] && P[j] === P[k]) || (P[i + 1] === P[j + 1] && P[j + 1] === P[k + 1]))
            P.splice(j, 2), (i -= 2)
        }
      }
      return j
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x0' implicitly has an 'any' type.
    _project(x0, y0, vx, vy) {
      let t = Infinity,
        c,
        x,
        y
      if (vy < 0) {
        // top
        // @ts-expect-error TS(2339) FIXME: Property 'ymin' does not exist on type 'Voronoi'.
        if (y0 <= this.ymin) return null
        // @ts-expect-error TS(2339) FIXME: Property 'ymin' does not exist on type 'Voronoi'.
        if ((c = (this.ymin - y0) / vy) < t) (y = this.ymin), (x = x0 + (t = c) * vx)
      } else if (vy > 0) {
        // bottom
        // @ts-expect-error TS(2339) FIXME: Property 'ymax' does not exist on type 'Voronoi'.
        if (y0 >= this.ymax) return null
        // @ts-expect-error TS(2339) FIXME: Property 'ymax' does not exist on type 'Voronoi'.
        if ((c = (this.ymax - y0) / vy) < t) (y = this.ymax), (x = x0 + (t = c) * vx)
      }
      if (vx > 0) {
        // right
        // @ts-expect-error TS(2339) FIXME: Property 'xmax' does not exist on type 'Voronoi'.
        if (x0 >= this.xmax) return null
        // @ts-expect-error TS(2339) FIXME: Property 'xmax' does not exist on type 'Voronoi'.
        if ((c = (this.xmax - x0) / vx) < t) (x = this.xmax), (y = y0 + (t = c) * vy)
      } else if (vx < 0) {
        // left
        // @ts-expect-error TS(2339) FIXME: Property 'xmin' does not exist on type 'Voronoi'.
        if (x0 <= this.xmin) return null
        // @ts-expect-error TS(2339) FIXME: Property 'xmin' does not exist on type 'Voronoi'.
        if ((c = (this.xmin - x0) / vx) < t) (x = this.xmin), (y = y0 + (t = c) * vy)
      }
      return [x, y]
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    _edgecode(x, y) {
      return (
        // @ts-expect-error TS(2339) FIXME: Property 'xmin' does not exist on type 'Voronoi'.
        (x === this.xmin
          ? 0b0001
          : // @ts-expect-error TS(2339) FIXME: Property 'xmax' does not exist on type 'Voronoi'.
          x === this.xmax
          ? 0b0010
          : 0b0000) |
        // @ts-expect-error TS(2339) FIXME: Property 'ymin' does not exist on type 'Voronoi'.
        (y === this.ymin
          ? 0b0100
          : // @ts-expect-error TS(2339) FIXME: Property 'ymax' does not exist on type 'Voronoi'.
          y === this.ymax
          ? 0b1000
          : 0b0000)
      )
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    _regioncode(x, y) {
      return (
        // @ts-expect-error TS(2339) FIXME: Property 'xmin' does not exist on type 'Voronoi'.
        (x < this.xmin
          ? 0b0001
          : // @ts-expect-error TS(2339) FIXME: Property 'xmax' does not exist on type 'Voronoi'.
          x > this.xmax
          ? 0b0010
          : 0b0000) |
        // @ts-expect-error TS(2339) FIXME: Property 'ymin' does not exist on type 'Voronoi'.
        (y < this.ymin
          ? 0b0100
          : // @ts-expect-error TS(2339) FIXME: Property 'ymax' does not exist on type 'Voronoi'.
          y > this.ymax
          ? 0b1000
          : 0b0000)
      )
    }
  }

  const tau$3 = 2 * Math.PI,
    pow = Math.pow

  // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
  function pointX(p) {
    return p[0]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
  function pointY(p) {
    return p[1]
  }

  // A triangulation is collinear if all its triangles have a non-null area
  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function collinear$1(d) {
    const { triangles, coords } = d
    for (let i = 0; i < triangles.length; i += 3) {
      const a = 2 * triangles[i],
        b = 2 * triangles[i + 1],
        c = 2 * triangles[i + 2],
        cross =
          (coords[c] - coords[a]) * (coords[b + 1] - coords[a + 1]) -
          (coords[b] - coords[a]) * (coords[c + 1] - coords[a + 1])
      if (cross > 1e-10) return false
    }
    return true
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function jitter(x, y, r) {
    return [x + Math.sin(x + y) * r, y + Math.cos(x - y) * r]
  }

  class Delaunay {
    // @ts-expect-error TS(7006) FIXME: Parameter 'points' implicitly has an 'any' type.
    static from(points, fx = pointX, fy = pointY, that) {
      return new Delaunay(
        // @ts-expect-error TS(2345) FIXME: Argument of type '{}' is not assignable to paramet... Remove this comment to see the full error message
        'length' in points ? flatArray(points, fx, fy, that) : Float64Array.from(flatIterable(points, fx, fy, that))
      )
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'points' implicitly has an 'any' type.
    constructor(points) {
      // @ts-expect-error TS(2339) FIXME: Property '_delaunator' does not exist on type 'Del... Remove this comment to see the full error message
      this._delaunator = new Delaunator(points)
      // @ts-expect-error TS(2339) FIXME: Property 'inedges' does not exist on type 'Delauna... Remove this comment to see the full error message
      this.inedges = new Int32Array(points.length / 2)
      // @ts-expect-error TS(2339) FIXME: Property '_hullIndex' does not exist on type 'Dela... Remove this comment to see the full error message
      this._hullIndex = new Int32Array(points.length / 2)
      // @ts-expect-error TS(2339) FIXME: Property 'points' does not exist on type 'Delaunay... Remove this comment to see the full error message
      this.points = this._delaunator.coords
      this._init()
    }
    update() {
      // @ts-expect-error TS(2339) FIXME: Property '_delaunator' does not exist on type 'Del... Remove this comment to see the full error message
      this._delaunator.update()
      this._init()
      return this
    }
    _init() {
      // @ts-expect-error TS(2339) FIXME: Property '_delaunator' does not exist on type 'Del... Remove this comment to see the full error message
      const d = this._delaunator,
        // @ts-expect-error TS(2339) FIXME: Property 'points' does not exist on type 'Delaunay... Remove this comment to see the full error message
        points = this.points

      // check for collinear
      if (d.hull && d.hull.length > 2 && collinear$1(d)) {
        // @ts-expect-error TS(2339) FIXME: Property 'collinear' does not exist on type 'Delau... Remove this comment to see the full error message
        this.collinear = Int32Array.from({ length: points.length / 2 }, (_, i) => i).sort(
          (i, j) => points[2 * i] - points[2 * j] || points[2 * i + 1] - points[2 * j + 1]
        ) // for exact neighbors
        // @ts-expect-error TS(2339) FIXME: Property 'collinear' does not exist on type 'Delau... Remove this comment to see the full error message
        const e = this.collinear[0],
          // @ts-expect-error TS(2339) FIXME: Property 'collinear' does not exist on type 'Delau... Remove this comment to see the full error message
          f = this.collinear[this.collinear.length - 1],
          bounds = [points[2 * e], points[2 * e + 1], points[2 * f], points[2 * f + 1]],
          // @ts-expect-error TS(2550) FIXME: Property 'hypot' does not exist on type 'Math'. Do... Remove this comment to see the full error message
          r = 1e-8 * Math.hypot(bounds[3] - bounds[1], bounds[2] - bounds[0])
        for (let i = 0, n = points.length / 2; i < n; ++i) {
          const p = jitter(points[2 * i], points[2 * i + 1], r)
          points[2 * i] = p[0]
          points[2 * i + 1] = p[1]
        }
        // @ts-expect-error TS(2339) FIXME: Property '_delaunator' does not exist on type 'Del... Remove this comment to see the full error message
        this._delaunator = new Delaunator(points)
      } else {
        // @ts-expect-error TS(2339) FIXME: Property 'collinear' does not exist on type 'Delau... Remove this comment to see the full error message
        delete this.collinear
      }

      // @ts-expect-error TS(2339) FIXME: Property 'halfedges' does not exist on type 'Delau... Remove this comment to see the full error message
      const halfedges = (this.halfedges = this._delaunator.halfedges)
      // @ts-expect-error TS(2339) FIXME: Property 'hull' does not exist on type 'Delaunay'.
      const hull = (this.hull = this._delaunator.hull)
      // @ts-expect-error TS(2339) FIXME: Property 'triangles' does not exist on type 'Delau... Remove this comment to see the full error message
      const triangles = (this.triangles = this._delaunator.triangles)
      // @ts-expect-error TS(2339) FIXME: Property 'inedges' does not exist on type 'Delauna... Remove this comment to see the full error message
      const inedges = this.inedges.fill(-1)
      // @ts-expect-error TS(2339) FIXME: Property '_hullIndex' does not exist on type 'Dela... Remove this comment to see the full error message
      const hullIndex = this._hullIndex.fill(-1)

      // Compute an index from each point to an (arbitrary) incoming halfedge
      // Used to give the first neighbor of each point; for this reason,
      // on the hull we give priority to exterior halfedges
      for (let e = 0, n = halfedges.length; e < n; ++e) {
        const p = triangles[e % 3 === 2 ? e - 2 : e + 1]
        if (halfedges[e] === -1 || inedges[p] === -1) inedges[p] = e
      }
      for (let i = 0, n = hull.length; i < n; ++i) {
        hullIndex[hull[i]] = i
      }

      // degenerate case: 1 or 2 (distinct) points
      if (hull.length <= 2 && hull.length > 0) {
        // @ts-expect-error TS(2339) FIXME: Property 'triangles' does not exist on type 'Delau... Remove this comment to see the full error message
        this.triangles = new Int32Array(3).fill(-1)
        // @ts-expect-error TS(2339) FIXME: Property 'halfedges' does not exist on type 'Delau... Remove this comment to see the full error message
        this.halfedges = new Int32Array(3).fill(-1)
        // @ts-expect-error TS(2339) FIXME: Property 'triangles' does not exist on type 'Delau... Remove this comment to see the full error message
        this.triangles[0] = hull[0]
        // @ts-expect-error TS(2339) FIXME: Property 'triangles' does not exist on type 'Delau... Remove this comment to see the full error message
        this.triangles[1] = hull[1]
        // @ts-expect-error TS(2339) FIXME: Property 'triangles' does not exist on type 'Delau... Remove this comment to see the full error message
        this.triangles[2] = hull[1]
        inedges[hull[0]] = 1
        if (hull.length === 2) inedges[hull[1]] = 0
      }
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'bounds' implicitly has an 'any' type.
    voronoi(bounds) {
      return new Voronoi(this, bounds)
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    *neighbors(i) {
      // @ts-expect-error TS(2339) FIXME: Property 'inedges' does not exist on type 'Delauna... Remove this comment to see the full error message
      const { inedges, hull, _hullIndex, halfedges, triangles, collinear } = this

      // degenerate case with several collinear points
      if (collinear) {
        const l = collinear.indexOf(i)
        if (l > 0) yield collinear[l - 1]
        if (l < collinear.length - 1) yield collinear[l + 1]
        return
      }

      const e0 = inedges[i]
      if (e0 === -1) return // coincident point
      let e = e0,
        p0 = -1
      do {
        yield (p0 = triangles[e])
        e = e % 3 === 2 ? e - 2 : e + 1
        if (triangles[e] !== i) return // bad triangulation
        e = halfedges[e]
        if (e === -1) {
          const p = hull[(_hullIndex[i] + 1) % hull.length]
          if (p !== p0) yield p
          return
        }
      } while (e !== e0)
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    find(x, y, i = 0) {
      if (((x = +x), x !== x) || ((y = +y), y !== y)) return -1
      const i0 = i
      let c
      while ((c = this._step(i, x, y)) >= 0 && c !== i && c !== i0) i = c
      return c
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    _step(i, x, y) {
      // @ts-expect-error TS(2339) FIXME: Property 'inedges' does not exist on type 'Delauna... Remove this comment to see the full error message
      const { inedges, hull, _hullIndex, halfedges, triangles, points } = this
      if (inedges[i] === -1 || !points.length) return (i + 1) % (points.length >> 1)
      let c = i
      let dc = pow(x - points[i * 2], 2) + pow(y - points[i * 2 + 1], 2)
      const e0 = inedges[i]
      let e = e0
      do {
        const t = triangles[e]
        const dt = pow(x - points[t * 2], 2) + pow(y - points[t * 2 + 1], 2)
        if (dt < dc) (dc = dt), (c = t)
        e = e % 3 === 2 ? e - 2 : e + 1
        if (triangles[e] !== i) break // bad triangulation
        e = halfedges[e]
        if (e === -1) {
          e = hull[(_hullIndex[i] + 1) % hull.length]
          if (e !== t) {
            if (pow(x - points[e * 2], 2) + pow(y - points[e * 2 + 1], 2) < dc) return e
          }
          break
        }
      } while (e !== e0)
      return c
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    render(context) {
      const buffer = context == null ? (context = new Path$1()) : undefined
      // @ts-expect-error TS(2339) FIXME: Property 'points' does not exist on type 'Delaunay... Remove this comment to see the full error message
      const { points, halfedges, triangles } = this
      for (let i = 0, n = halfedges.length; i < n; ++i) {
        const j = halfedges[i]
        if (j < i) continue
        const ti = triangles[i] * 2
        const tj = triangles[j] * 2
        context.moveTo(points[ti], points[ti + 1])
        context.lineTo(points[tj], points[tj + 1])
      }
      this.renderHull(context)
      return buffer && buffer.value()
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    renderPoints(context, r = 2) {
      const buffer = context == null ? (context = new Path$1()) : undefined
      // @ts-expect-error TS(2339) FIXME: Property 'points' does not exist on type 'Delaunay... Remove this comment to see the full error message
      const { points } = this
      for (let i = 0, n = points.length; i < n; i += 2) {
        const x = points[i],
          y = points[i + 1]
        context.moveTo(x + r, y)
        context.arc(x, y, r, 0, tau$3)
      }
      return buffer && buffer.value()
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    renderHull(context) {
      const buffer = context == null ? (context = new Path$1()) : undefined
      // @ts-expect-error TS(2339) FIXME: Property 'hull' does not exist on type 'Delaunay'.
      const { hull, points } = this
      const h = hull[0] * 2,
        n = hull.length
      context.moveTo(points[h], points[h + 1])
      for (let i = 1; i < n; ++i) {
        const h = 2 * hull[i]
        context.lineTo(points[h], points[h + 1])
      }
      context.closePath()
      return buffer && buffer.value()
    }
    hullPolygon() {
      const polygon = new Polygon()
      this.renderHull(polygon)
      return polygon.value()
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    renderTriangle(i, context) {
      const buffer = context == null ? (context = new Path$1()) : undefined
      // @ts-expect-error TS(2339) FIXME: Property 'points' does not exist on type 'Delaunay... Remove this comment to see the full error message
      const { points, triangles } = this
      const t0 = triangles[(i *= 3)] * 2
      const t1 = triangles[i + 1] * 2
      const t2 = triangles[i + 2] * 2
      context.moveTo(points[t0], points[t0 + 1])
      context.lineTo(points[t1], points[t1 + 1])
      context.lineTo(points[t2], points[t2 + 1])
      context.closePath()
      return buffer && buffer.value()
    }
    *trianglePolygons() {
      // @ts-expect-error TS(2339) FIXME: Property 'triangles' does not exist on type 'Delau... Remove this comment to see the full error message
      const { triangles } = this
      for (let i = 0, n = triangles.length / 3; i < n; ++i) {
        yield this.trianglePolygon(i)
      }
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    trianglePolygon(i) {
      const polygon = new Polygon()
      this.renderTriangle(i, polygon)
      return polygon.value()
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'points' implicitly has an 'any' type.
  function flatArray(points, fx, fy, that) {
    const n = points.length
    const array = new Float64Array(n * 2)
    for (let i = 0; i < n; ++i) {
      const p = points[i]
      array[i * 2] = fx.call(that, p, i, points)
      array[i * 2 + 1] = fy.call(that, p, i, points)
    }
    return array
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'points' implicitly has an 'any' type.
  function* flatIterable(points, fx, fy, that) {
    let i = 0
    for (const p of points) {
      yield fx.call(that, p, i, points)
      yield fy.call(that, p, i, points)
      ++i
    }
  }

  const EOL = {},
    EOF = {},
    QUOTE = 34,
    NEWLINE = 10,
    RETURN = 13

  // @ts-expect-error TS(7006) FIXME: Parameter 'columns' implicitly has an 'any' type.
  function objectConverter(columns) {
    return new Function(
      'd',
      'return {' +
        columns
          // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
          .map(function (name, i) {
            return JSON.stringify(name) + ': d[' + i + '] || ""'
          })
          .join(',') +
        '}'
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'columns' implicitly has an 'any' type.
  function customConverter(columns, f) {
    const object = objectConverter(columns)
    // @ts-expect-error TS(7006) FIXME: Parameter 'row' implicitly has an 'any' type.
    return function (row, i) {
      return f(object(row), i, columns)
    }
  }

  // Compute unique columns in order of discovery.
  // @ts-expect-error TS(7006) FIXME: Parameter 'rows' implicitly has an 'any' type.
  function inferColumns(rows) {
    const columnSet = Object.create(null),
      // @ts-expect-error TS(7034) FIXME: Variable 'columns' implicitly has type 'any[]' in ... Remove this comment to see the full error message
      columns = []

    // @ts-expect-error TS(7006) FIXME: Parameter 'row' implicitly has an 'any' type.
    rows.forEach(function (row) {
      for (const column in row) {
        if (!(column in columnSet)) {
          columns.push((columnSet[column] = column))
        }
      }
    })

    // @ts-expect-error TS(7005) FIXME: Variable 'columns' implicitly has an 'any[]' type.
    return columns
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function pad(value, width) {
    const s = value + '',
      length = s.length
    // @ts-expect-error TS(2345) FIXME: Argument of type 'number' is not assignable to par... Remove this comment to see the full error message
    return length < width ? new Array(width - length + 1).join(0) + s : s
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'year' implicitly has an 'any' type.
  function formatYear(year) {
    return year < 0 ? '-' + pad(-year, 6) : year > 9999 ? '+' + pad(year, 6) : pad(year, 4)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
  function formatDate(date) {
    const hours = date.getUTCHours(),
      minutes = date.getUTCMinutes(),
      seconds = date.getUTCSeconds(),
      milliseconds = date.getUTCMilliseconds()
    return isNaN(date)
      ? 'Invalid Date'
      : formatYear(date.getUTCFullYear()) +
          '-' +
          pad(date.getUTCMonth() + 1, 2) +
          '-' +
          pad(date.getUTCDate(), 2) +
          (milliseconds
            ? 'T' + pad(hours, 2) + ':' + pad(minutes, 2) + ':' + pad(seconds, 2) + '.' + pad(milliseconds, 3) + 'Z'
            : seconds
            ? 'T' + pad(hours, 2) + ':' + pad(minutes, 2) + ':' + pad(seconds, 2) + 'Z'
            : minutes || hours
            ? 'T' + pad(hours, 2) + ':' + pad(minutes, 2) + 'Z'
            : '')
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'delimiter' implicitly has an 'any' type... Remove this comment to see the full error message
  function dsvFormat(delimiter) {
    const reFormat = new RegExp('["' + delimiter + '\n\r]'),
      DELIMITER = delimiter.charCodeAt(0)

    // @ts-expect-error TS(7006) FIXME: Parameter 'text' implicitly has an 'any' type.
    function parse(text, f) {
      // @ts-expect-error TS(7034) FIXME: Variable 'convert' implicitly has type 'any' in so... Remove this comment to see the full error message
      let convert,
        columns,
        // @ts-expect-error TS(7006) FIXME: Parameter 'row' implicitly has an 'any' type.
        rows = parseRows(text, function (row, i) {
          // @ts-expect-error TS(7005) FIXME: Variable 'convert' implicitly has an 'any' type.
          if (convert) return convert(row, i - 1)
          ;(columns = row), (convert = f ? customConverter(row, f) : objectConverter(row))
        })
      // @ts-expect-error TS(2339) FIXME: Property 'columns' does not exist on type 'any[]'.
      rows.columns = columns || []
      return rows
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'text' implicitly has an 'any' type.
    function parseRows(text, f) {
      let rows = [], // output rows
        N = text.length,
        I = 0, // current character index
        n = 0, // current line number
        t, // current token
        eof = N <= 0, // current token followed by EOF?
        eol = false // current token followed by EOL?

      // Strip the trailing newline.
      if (text.charCodeAt(N - 1) === NEWLINE) --N
      if (text.charCodeAt(N - 1) === RETURN) --N

      function token() {
        if (eof) return EOF
        if (eol) return (eol = false), EOL

        // Unescape quotes.
        let i,
          j = I,
          c
        if (text.charCodeAt(j) === QUOTE) {
          while ((I++ < N && text.charCodeAt(I) !== QUOTE) || text.charCodeAt(++I) === QUOTE);
          if ((i = I) >= N) eof = true
          else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true
          else if (c === RETURN) {
            eol = true
            if (text.charCodeAt(I) === NEWLINE) ++I
          }
          return text.slice(j + 1, i - 1).replace(/""/g, '"')
        }

        // Find next delimiter or newline.
        while (I < N) {
          if ((c = text.charCodeAt((i = I++))) === NEWLINE) eol = true
          else if (c === RETURN) {
            eol = true
            if (text.charCodeAt(I) === NEWLINE) ++I
          } else if (c !== DELIMITER) continue
          return text.slice(j, i)
        }

        // Return last token before EOF.
        return (eof = true), text.slice(j, N)
      }

      while ((t = token()) !== EOF) {
        let row = []
        while (t !== EOL && t !== EOF) row.push(t), (t = token())
        if (f && (row = f(row, n++)) == null) continue
        rows.push(row)
      }

      return rows
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'rows' implicitly has an 'any' type.
    function preformatBody(rows, columns) {
      // @ts-expect-error TS(7006) FIXME: Parameter 'row' implicitly has an 'any' type.
      return rows.map(function (row) {
        return (
          columns
            // @ts-expect-error TS(7006) FIXME: Parameter 'column' implicitly has an 'any' type.
            .map(function (column) {
              return formatValue(row[column])
            })
            .join(delimiter)
        )
      })
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'rows' implicitly has an 'any' type.
    function format(rows, columns) {
      if (columns == null) columns = inferColumns(rows)
      return [columns.map(formatValue).join(delimiter)].concat(preformatBody(rows, columns)).join('\n')
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'rows' implicitly has an 'any' type.
    function formatBody(rows, columns) {
      if (columns == null) columns = inferColumns(rows)
      return preformatBody(rows, columns).join('\n')
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'rows' implicitly has an 'any' type.
    function formatRows(rows) {
      return rows.map(formatRow).join('\n')
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'row' implicitly has an 'any' type.
    function formatRow(row) {
      return row.map(formatValue).join(delimiter)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
    function formatValue(value) {
      return value == null
        ? ''
        : value instanceof Date
        ? formatDate(value)
        : reFormat.test((value += ''))
        ? '"' + value.replace(/"/g, '""') + '"'
        : value
    }

    return {
      parse: parse,
      parseRows: parseRows,
      format: format,
      formatBody: formatBody,
      formatRows: formatRows,
      formatRow: formatRow,
      formatValue: formatValue,
    }
  }

  const csv = dsvFormat(',')

  const csvParse = csv.parse
  const csvParseRows = csv.parseRows
  const csvFormat = csv.format
  const csvFormatBody = csv.formatBody
  const csvFormatRows = csv.formatRows
  const csvFormatRow = csv.formatRow
  const csvFormatValue = csv.formatValue

  const tsv = dsvFormat('\t')

  const tsvParse = tsv.parse
  const tsvParseRows = tsv.parseRows
  const tsvFormat = tsv.format
  const tsvFormatBody = tsv.formatBody
  const tsvFormatRows = tsv.formatRows
  const tsvFormatRow = tsv.formatRow
  const tsvFormatValue = tsv.formatValue

  // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
  function autoType(object) {
    for (const key in object) {
      var value = object[key].trim(),
        number,
        m
      if (!value) value = null
      else if (value === 'true') value = true
      else if (value === 'false') value = false
      else if (value === 'NaN') value = NaN
      else if (!isNaN((number = +value))) value = number
      else if (
        (m = value.match(/^([-+]\d{2})?\d{4}(-\d{2}(-\d{2})?)?(T\d{2}:\d{2}(:\d{2}(\.\d{3})?)?(Z|[-+]\d{2}:\d{2})?)?$/))
      ) {
        if (fixtz && !!m[4] && !m[7]) value = value.replace(/-/g, '/').replace(/T/, ' ')
        value = new Date(value)
      } else continue
      object[key] = value
    }
    return object
  }

  // https://github.com/d3/d3-dsv/issues/45
  const fixtz = new Date('2019-01-01T00:00').getHours() || new Date('2019-07-01T00:00').getHours()

  // @ts-expect-error TS(7006) FIXME: Parameter 'response' implicitly has an 'any' type.
  function responseBlob(response) {
    if (!response.ok) throw new Error(response.status + ' ' + response.statusText)
    return response.blob()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'input' implicitly has an 'any' type.
  function blob(input, init) {
    return fetch(input, init).then(responseBlob)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'response' implicitly has an 'any' type.
  function responseArrayBuffer(response) {
    if (!response.ok) throw new Error(response.status + ' ' + response.statusText)
    return response.arrayBuffer()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'input' implicitly has an 'any' type.
  function buffer(input, init) {
    return fetch(input, init).then(responseArrayBuffer)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'response' implicitly has an 'any' type.
  function responseText(response) {
    if (!response.ok) throw new Error(response.status + ' ' + response.statusText)
    return response.text()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'input' implicitly has an 'any' type.
  function text(input, init) {
    return fetch(input, init).then(responseText)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'parse' implicitly has an 'any' type.
  function dsvParse(parse) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'input' implicitly has an 'any' type.
    return function (input, init, row) {
      if (arguments.length === 2 && typeof init === 'function') (row = init), (init = undefined)
      return text(input, init).then(function (response) {
        return parse(response, row)
      })
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'delimiter' implicitly has an 'any' type... Remove this comment to see the full error message
  function dsv(delimiter, input, init, row) {
    if (arguments.length === 3 && typeof init === 'function') (row = init), (init = undefined)
    const format = dsvFormat(delimiter)
    return text(input, init).then(function (response) {
      return format.parse(response, row)
    })
  }

  const csv$1 = dsvParse(csvParse)
  const tsv$1 = dsvParse(tsvParse)

  // @ts-expect-error TS(7006) FIXME: Parameter 'input' implicitly has an 'any' type.
  function image(input, init) {
    // @ts-expect-error TS(2585) FIXME: 'Promise' only refers to a type, but is being used... Remove this comment to see the full error message
    return new Promise(function (resolve, reject) {
      const image = new Image()
      // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      for (const key in init) image[key] = init[key]
      image.onerror = reject
      image.onload = function () {
        resolve(image)
      }
      image.src = input
    })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'response' implicitly has an 'any' type.
  function responseJson(response) {
    if (!response.ok) throw new Error(response.status + ' ' + response.statusText)
    if (response.status === 204 || response.status === 205) return
    return response.json()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'input' implicitly has an 'any' type.
  function json(input, init) {
    return fetch(input, init).then(responseJson)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
  function parser(type) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'input' implicitly has an 'any' type.
    return (input, init) => text(input, init).then(text => new DOMParser().parseFromString(text, type))
  }

  const xml = parser('application/xml')

  const html = parser('text/html')

  const svg = parser('image/svg+xml')

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function center$1(x, y) {
    // @ts-expect-error TS(7034) FIXME: Variable 'nodes' implicitly has type 'any' in some... Remove this comment to see the full error message
    let nodes,
      strength = 1

    if (x == null) x = 0
    if (y == null) y = 0

    function force() {
      let i,
        // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        n = nodes.length,
        node,
        sx = 0,
        sy = 0

      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
        ;(node = nodes[i]), (sx += node.x), (sy += node.y)
      }

      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      for (sx = (sx / n - x) * strength, sy = (sy / n - y) * strength, i = 0; i < n; ++i) {
        // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
        ;(node = nodes[i]), (node.x -= sx), (node.y -= sy)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.initialize = function (_) {
      nodes = _
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.x = function (_) {
      return arguments.length ? ((x = +_), force) : x
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.y = function (_) {
      return arguments.length ? ((y = +_), force) : y
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.strength = function (_) {
      return arguments.length ? ((strength = +_), force) : strength
    }

    return force
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function tree_add(d) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const x = +this._x.call(null, d),
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      y = +this._y.call(null, d)
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return add(this.cover(x, y), x, y, d)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'tree' implicitly has an 'any' type.
  function add(tree, x, y, d) {
    if (isNaN(x) || isNaN(y)) return tree // ignore invalid points

    let parent,
      node = tree._root,
      leaf = { data: d },
      x0 = tree._x0,
      y0 = tree._y0,
      x1 = tree._x1,
      y1 = tree._y1,
      xm,
      ym,
      xp,
      yp,
      right,
      bottom,
      i,
      j

    // If the tree is empty, initialize the root as a leaf.
    if (!node) return (tree._root = leaf), tree

    // Find the existing leaf for the new point, or add it.
    while (node.length) {
      if ((right = x >= (xm = (x0 + x1) / 2))) x0 = xm
      else x1 = xm
      if ((bottom = y >= (ym = (y0 + y1) / 2))) y0 = ym
      else y1 = ym
      // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
      if (((parent = node), !(node = node[(i = (bottom << 1) | right)]))) return (parent[i] = leaf), tree
    }

    // Is the new point is exactly coincident with the existing point?
    xp = +tree._x.call(null, node.data)
    yp = +tree._y.call(null, node.data)
    // @ts-expect-error TS(2339) FIXME: Property 'next' does not exist on type '{ data: an... Remove this comment to see the full error message
    if (x === xp && y === yp) return (leaf.next = node), parent ? (parent[i] = leaf) : (tree._root = leaf), tree

    // Otherwise, split the leaf node until the old and new point are separated.
    do {
      // @ts-expect-error TS(2538) FIXME: Type 'undefined' cannot be used as an index type.
      parent = parent ? (parent[i] = new Array(4)) : (tree._root = new Array(4))
      if ((right = x >= (xm = (x0 + x1) / 2))) x0 = xm
      else x1 = xm
      if ((bottom = y >= (ym = (y0 + y1) / 2))) y0 = ym
      else y1 = ym
      // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
    } while ((i = (bottom << 1) | right) === (j = ((yp >= ym) << 1) | (xp >= xm)))
    return (parent[j] = node), (parent[i] = leaf), tree
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'data' implicitly has an 'any' type.
  function addAll(data) {
    let d,
      i,
      n = data.length,
      x,
      y,
      xz = new Array(n),
      yz = new Array(n),
      x0 = Infinity,
      y0 = Infinity,
      x1 = -Infinity,
      y1 = -Infinity

    // Compute the points and their extent.
    for (i = 0; i < n; ++i) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (isNaN((x = +this._x.call(null, (d = data[i])))) || isNaN((y = +this._y.call(null, d)))) continue
      xz[i] = x
      yz[i] = y
      if (x < x0) x0 = x
      if (x > x1) x1 = x
      if (y < y0) y0 = y
      if (y > y1) y1 = y
    }

    // If there were no (valid) points, abort.
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (x0 > x1 || y0 > y1) return this

    // Expand the tree to cover the new points.
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.cover(x0, y0).cover(x1, y1)

    // Add the new points.
    for (i = 0; i < n; ++i) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      add(this, xz[i], yz[i], data[i])
    }

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function tree_cover(x, y) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (isNaN((x = +x)) || isNaN((y = +y))) return this // ignore invalid points

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    let x0 = this._x0,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      y0 = this._y0,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      x1 = this._x1,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      y1 = this._y1

    // If the quadtree has no extent, initialize them.
    // Integer extent are necessary so that if we later double the extent,
    // the existing quadrant boundaries don’t change due to floating point error!
    if (isNaN(x0)) {
      x1 = (x0 = Math.floor(x)) + 1
      y1 = (y0 = Math.floor(y)) + 1
    }

    // Otherwise, double repeatedly to cover.
    else {
      let z = x1 - x0 || 1,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        node = this._root,
        parent,
        i

      while (x0 > x || x >= x1 || y0 > y || y >= y1) {
        // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
        i = ((y < y0) << 1) | (x < x0)
        ;(parent = new Array(4)), (parent[i] = node), (node = parent), (z *= 2)
        switch (i) {
          case 0:
            ;(x1 = x0 + z), (y1 = y0 + z)
            break
          case 1:
            ;(x0 = x1 - z), (y1 = y0 + z)
            break
          case 2:
            ;(x1 = x0 + z), (y0 = y1 - z)
            break
          case 3:
            ;(x0 = x1 - z), (y0 = y1 - z)
            break
        }
      }

      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (this._root && this._root.length) this._root = node
    }

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._x0 = x0
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._y0 = y0
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._x1 = x1
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._y1 = y1
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  function tree_data() {
    // @ts-expect-error TS(7034) FIXME: Variable 'data' implicitly has type 'any[]' in som... Remove this comment to see the full error message
    const data = []
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.visit(function (node) {
      if (!node.length)
        do data.push(node.data)
        while ((node = node.next))
    })
    // @ts-expect-error TS(7005) FIXME: Variable 'data' implicitly has an 'any[]' type.
    return data
  }

  // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
  function tree_extent(_) {
    return arguments.length
      ? // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
      : // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      isNaN(this._x0)
      ? undefined
      : [
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          [this._x0, this._y0],
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          [this._x1, this._y1],
        ]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function Quad(node, x0, y0, x1, y1) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.node = node
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.x0 = x0
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.y0 = y0
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.x1 = x1
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.y1 = y1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function tree_find(x, y, radius) {
    let data,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      x0 = this._x0,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      y0 = this._y0,
      x1,
      y1,
      x2,
      y2,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      x3 = this._x1,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      y3 = this._y1,
      quads = [],
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      node = this._root,
      q,
      i

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    if (node) quads.push(new Quad(node, x0, y0, x3, y3))
    if (radius == null) radius = Infinity
    else {
      ;(x0 = x - radius), (y0 = y - radius)
      ;(x3 = x + radius), (y3 = y + radius)
      radius *= radius
    }

    while ((q = quads.pop())) {
      // Stop searching if this quadrant can’t contain a closer node.
      if (!(node = q.node) || (x1 = q.x0) > x3 || (y1 = q.y0) > y3 || (x2 = q.x1) < x0 || (y2 = q.y1) < y0) continue

      // Bisect the current quadrant.
      if (node.length) {
        // @ts-expect-error TS(7022) FIXME: 'xm' implicitly has type 'any' because it does not... Remove this comment to see the full error message
        const xm = (x1 + x2) / 2,
          // @ts-expect-error TS(7022) FIXME: 'ym' implicitly has type 'any' because it does not... Remove this comment to see the full error message
          ym = (y1 + y2) / 2

        quads.push(
          // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
          new Quad(node[3], xm, ym, x2, y2),
          // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
          new Quad(node[2], x1, ym, xm, y2),
          // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
          new Quad(node[1], xm, y1, x2, ym),
          // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
          new Quad(node[0], x1, y1, xm, ym)
        )

        // Visit the closest quadrant first.
        // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
        if ((i = ((y >= ym) << 1) | (x >= xm))) {
          q = quads[quads.length - 1]
          quads[quads.length - 1] = quads[quads.length - 1 - i]
          quads[quads.length - 1 - i] = q
        }
      }

      // Visit this point. (Visiting coincident points isn’t necessary!)
      else {
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        const dx = x - +this._x.call(null, node.data),
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          dy = y - +this._y.call(null, node.data),
          d2 = dx * dx + dy * dy
        if (d2 < radius) {
          const d = Math.sqrt((radius = d2))
          ;(x0 = x - d), (y0 = y - d)
          ;(x3 = x + d), (y3 = y + d)
          data = node.data
        }
      }
    }

    return data
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function tree_remove(d) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (isNaN((x = +this._x.call(null, d))) || isNaN((y = +this._y.call(null, d)))) return this // ignore invalid points

    let parent,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      node = this._root,
      retainer,
      previous,
      next,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      x0 = this._x0,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      y0 = this._y0,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      x1 = this._x1,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      y1 = this._y1,
      x,
      y,
      xm,
      ym,
      right,
      bottom,
      i,
      j

    // If the tree is empty, initialize the root as a leaf.
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (!node) return this

    // Find the leaf node for the point.
    // While descending, also retain the deepest parent with a non-removed sibling.
    if (node.length)
      while (true) {
        if ((right = x >= (xm = (x0 + x1) / 2))) x0 = xm
        else x1 = xm
        if ((bottom = y >= (ym = (y0 + y1) / 2))) y0 = ym
        else y1 = ym
        // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
        if (!((parent = node), (node = node[(i = (bottom << 1) | right)]))) return this
        if (!node.length) break
        if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) (retainer = parent), (j = i)
      }

    // Find the point to remove.
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    while (node.data !== d) if (!((previous = node), (node = node.next))) return this
    if ((next = node.next)) delete node.next

    // If there are multiple coincident points, remove just the point.
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (previous) return next ? (previous.next = next) : delete previous.next, this

    // If this is the root point, remove it.
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (!parent) return (this._root = next), this

    // Remove this leaf.
    // @ts-expect-error TS(2538) FIXME: Type 'undefined' cannot be used as an index type.
    next ? (parent[i] = next) : delete parent[i]

    // If the parent now contains exactly one leaf, collapse superfluous parents.
    if (
      (node = parent[0] || parent[1] || parent[2] || parent[3]) &&
      node === (parent[3] || parent[2] || parent[1] || parent[0]) &&
      !node.length
    ) {
      // @ts-expect-error TS(2538) FIXME: Type 'undefined' cannot be used as an index type.
      if (retainer) retainer[j] = node
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      else this._root = node
    }

    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'data' implicitly has an 'any' type.
  function removeAll(data) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (let i = 0, n = data.length; i < n; ++i) this.remove(data[i])
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  function tree_root() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this._root
  }

  function tree_size() {
    let size = 0
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.visit(function (node) {
      if (!node.length)
        do ++size
        while ((node = node.next))
    })
    return size
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'callback' implicitly has an 'any' type.
  function tree_visit(callback) {
    let quads = [],
      q,
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      node = this._root,
      child,
      x0,
      y0,
      x1,
      y1
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1))
    while ((q = quads.pop())) {
      if (!callback((node = q.node), (x0 = q.x0), (y0 = q.y0), (x1 = q.x1), (y1 = q.y1)) && node.length) {
        // @ts-expect-error TS(7022) FIXME: 'xm' implicitly has type 'any' because it does not... Remove this comment to see the full error message
        const xm = (x0 + x1) / 2,
          // @ts-expect-error TS(7022) FIXME: 'ym' implicitly has type 'any' because it does not... Remove this comment to see the full error message
          ym = (y0 + y1) / 2
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        if ((child = node[3])) quads.push(new Quad(child, xm, ym, x1, y1))
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        if ((child = node[2])) quads.push(new Quad(child, x0, ym, xm, y1))
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        if ((child = node[1])) quads.push(new Quad(child, xm, y0, x1, ym))
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        if ((child = node[0])) quads.push(new Quad(child, x0, y0, xm, ym))
      }
    }
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'callback' implicitly has an 'any' type.
  function tree_visitAfter(callback) {
    let quads = [],
      next = [],
      q
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1))
    while ((q = quads.pop())) {
      // @ts-expect-error TS(7022) FIXME: 'node' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const node = q.node
      if (node.length) {
        var child,
          // @ts-expect-error TS(7022) FIXME: 'x0' implicitly has type 'any' because it does not... Remove this comment to see the full error message
          x0 = q.x0,
          // @ts-expect-error TS(7022) FIXME: 'y0' implicitly has type 'any' because it does not... Remove this comment to see the full error message
          y0 = q.y0,
          // @ts-expect-error TS(7022) FIXME: 'x1' implicitly has type 'any' because it does not... Remove this comment to see the full error message
          x1 = q.x1,
          // @ts-expect-error TS(7022) FIXME: 'y1' implicitly has type 'any' because it does not... Remove this comment to see the full error message
          y1 = q.y1,
          // @ts-expect-error TS(7022) FIXME: 'xm' implicitly has type 'any' because it does not... Remove this comment to see the full error message
          xm = (x0 + x1) / 2,
          // @ts-expect-error TS(7022) FIXME: 'ym' implicitly has type 'any' because it does not... Remove this comment to see the full error message
          ym = (y0 + y1) / 2
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        if ((child = node[0])) quads.push(new Quad(child, x0, y0, xm, ym))
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        if ((child = node[1])) quads.push(new Quad(child, xm, y0, x1, ym))
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        if ((child = node[2])) quads.push(new Quad(child, x0, ym, xm, y1))
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        if ((child = node[3])) quads.push(new Quad(child, xm, ym, x1, y1))
      }
      next.push(q)
    }
    while ((q = next.pop())) {
      callback(q.node, q.x0, q.y0, q.x1, q.y1)
    }
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function defaultX$1(d) {
    return d[0]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
  function tree_x(_) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return arguments.length ? ((this._x = _), this) : this._x
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function defaultY$1(d) {
    return d[1]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
  function tree_y(_) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return arguments.length ? ((this._y = _), this) : this._y
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'nodes' implicitly has an 'any' type.
  function quadtree(nodes, x, y) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    const tree = new Quadtree(x == null ? defaultX$1 : x, y == null ? defaultY$1 : y, NaN, NaN, NaN, NaN)
    return nodes == null ? tree : tree.addAll(nodes)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function Quadtree(x, y, x0, y0, x1, y1) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._x = x
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._y = y
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._x0 = x0
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._y0 = y0
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._x1 = x1
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._y1 = y1
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._root = undefined
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'leaf' implicitly has an 'any' type.
  function leaf_copy(leaf) {
    let copy = { data: leaf.data },
      next = copy
    // @ts-expect-error TS(2339) FIXME: Property 'next' does not exist on type '{ data: an... Remove this comment to see the full error message
    while ((leaf = leaf.next)) next = next.next = { data: leaf.data }
    return copy
  }

  const treeProto = (quadtree.prototype = Quadtree.prototype)

  treeProto.copy = function () {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    let copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
      node = this._root,
      nodes,
      child

    if (!node) return copy

    if (!node.length) return (copy._root = leaf_copy(node)), copy

    nodes = [{ source: node, target: (copy._root = new Array(4)) }]
    while ((node = nodes.pop())) {
      for (let i = 0; i < 4; ++i) {
        if ((child = node.source[i])) {
          if (child.length) nodes.push({ source: child, target: (node.target[i] = new Array(4)) })
          else node.target[i] = leaf_copy(child)
        }
      }
    }

    return copy
  }

  treeProto.add = tree_add
  treeProto.addAll = addAll
  treeProto.cover = tree_cover
  treeProto.data = tree_data
  treeProto.extent = tree_extent
  treeProto.find = tree_find
  treeProto.remove = tree_remove
  treeProto.removeAll = removeAll
  treeProto.root = tree_root
  treeProto.size = tree_size
  treeProto.visit = tree_visit
  treeProto.visitAfter = tree_visitAfter
  treeProto.x = tree_x
  treeProto.y = tree_y

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function constant$7(x) {
    return function () {
      return x
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'random' implicitly has an 'any' type.
  function jiggle(random) {
    return (random() - 0.5) * 1e-6
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function x(d) {
    return d.x + d.vx
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function y(d) {
    return d.y + d.vy
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'radius' implicitly has an 'any' type.
  function collide(radius) {
    // @ts-expect-error TS(7034) FIXME: Variable 'nodes' implicitly has type 'any' in some... Remove this comment to see the full error message
    let nodes,
      // @ts-expect-error TS(7034) FIXME: Variable 'radii' implicitly has type 'any' in some... Remove this comment to see the full error message
      radii,
      // @ts-expect-error TS(7034) FIXME: Variable 'random' implicitly has type 'any' in som... Remove this comment to see the full error message
      random,
      strength = 1,
      iterations = 1

    if (typeof radius !== 'function') radius = constant$7(radius == null ? 1 : +radius)

    function force() {
      let i,
        // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        n = nodes.length,
        tree,
        // @ts-expect-error TS(7034) FIXME: Variable 'node' implicitly has type 'any' in some ... Remove this comment to see the full error message
        node,
        // @ts-expect-error TS(7034) FIXME: Variable 'xi' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        xi,
        // @ts-expect-error TS(7034) FIXME: Variable 'yi' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        yi,
        // @ts-expect-error TS(7034) FIXME: Variable 'ri' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        ri,
        // @ts-expect-error TS(7034) FIXME: Variable 'ri2' implicitly has type 'any' in some l... Remove this comment to see the full error message
        ri2

      for (let k = 0; k < iterations; ++k) {
        // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
        tree = quadtree(nodes, x, y).visitAfter(prepare)
        // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
        for (i = 0; i < n; ++i) {
          // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
          node = nodes[i]
          // @ts-expect-error TS(7005) FIXME: Variable 'radii' implicitly has an 'any' type.
          ;(ri = radii[node.index]), (ri2 = ri * ri)
          xi = node.x + node.vx
          yi = node.y + node.vy
          tree.visit(apply)
        }
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'quad' implicitly has an 'any' type.
      function apply(quad, x0, y0, x1, y1) {
        let data = quad.data,
          rj = quad.r,
          // @ts-expect-error TS(7005) FIXME: Variable 'ri' implicitly has an 'any' type.
          r = ri + rj
        if (data) {
          // @ts-expect-error TS(7005) FIXME: Variable 'node' implicitly has an 'any' type.
          if (data.index > node.index) {
            // @ts-expect-error TS(7005) FIXME: Variable 'xi' implicitly has an 'any' type.
            let x = xi - data.x - data.vx,
              // @ts-expect-error TS(7005) FIXME: Variable 'yi' implicitly has an 'any' type.
              y = yi - data.y - data.vy,
              l = x * x + y * y
            if (l < r * r) {
              // @ts-expect-error TS(7005) FIXME: Variable 'random' implicitly has an 'any' type.
              if (x === 0) (x = jiggle(random)), (l += x * x)
              // @ts-expect-error TS(7005) FIXME: Variable 'random' implicitly has an 'any' type.
              if (y === 0) (y = jiggle(random)), (l += y * y)
              l = ((r - (l = Math.sqrt(l))) / l) * strength
              // @ts-expect-error TS(7005) FIXME: Variable 'node' implicitly has an 'any' type.
              node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj))
              // @ts-expect-error TS(7005) FIXME: Variable 'node' implicitly has an 'any' type.
              node.vy += (y *= l) * r
              data.vx -= x * (r = 1 - r)
              data.vy -= y * r
            }
          }
          return
        }
        // @ts-expect-error TS(7005) FIXME: Variable 'xi' implicitly has an 'any' type.
        return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'quad' implicitly has an 'any' type.
    function prepare(quad) {
      // @ts-expect-error TS(7005) FIXME: Variable 'radii' implicitly has an 'any' type.
      if (quad.data) return (quad.r = radii[quad.data.index])
      for (let i = (quad.r = 0); i < 4; ++i) {
        if (quad[i] && quad[i].r > quad.r) {
          quad.r = quad[i].r
        }
      }
    }

    function initialize() {
      // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
      if (!nodes) return
      let i,
        // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        n = nodes.length,
        node
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      radii = new Array(n)
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      for (i = 0; i < n; ++i) (node = nodes[i]), (radii[node.index] = +radius(node, i, nodes))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_nodes' implicitly has an 'any' type.
    force.initialize = function (_nodes, _random) {
      nodes = _nodes
      random = _random
      initialize()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.iterations = function (_) {
      return arguments.length ? ((iterations = +_), force) : iterations
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.strength = function (_) {
      return arguments.length ? ((strength = +_), force) : strength
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.radius = function (_) {
      return arguments.length ? ((radius = typeof _ === 'function' ? _ : constant$7(+_)), initialize(), force) : radius
    }

    return force
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function index$1(d) {
    return d.index
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'nodeById' implicitly has an 'any' type.
  function find$1(nodeById, nodeId) {
    const node = nodeById.get(nodeId)
    if (!node) throw new Error('node not found: ' + nodeId)
    return node
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'links' implicitly has an 'any' type.
  function link(links) {
    let id = index$1,
      strength = defaultStrength,
      // @ts-expect-error TS(7034) FIXME: Variable 'strengths' implicitly has type 'any' in ... Remove this comment to see the full error message
      strengths,
      distance = constant$7(30),
      // @ts-expect-error TS(7034) FIXME: Variable 'distances' implicitly has type 'any' in ... Remove this comment to see the full error message
      distances,
      // @ts-expect-error TS(7034) FIXME: Variable 'nodes' implicitly has type 'any' in some... Remove this comment to see the full error message
      nodes,
      // @ts-expect-error TS(7034) FIXME: Variable 'count' implicitly has type 'any' in some... Remove this comment to see the full error message
      count,
      // @ts-expect-error TS(7034) FIXME: Variable 'bias' implicitly has type 'any' in some ... Remove this comment to see the full error message
      bias,
      // @ts-expect-error TS(7034) FIXME: Variable 'random' implicitly has type 'any' in som... Remove this comment to see the full error message
      random,
      iterations = 1

    if (links == null) links = []

    // @ts-expect-error TS(7006) FIXME: Parameter 'link' implicitly has an 'any' type.
    function defaultStrength(link) {
      // @ts-expect-error TS(7005) FIXME: Variable 'count' implicitly has an 'any' type.
      return 1 / Math.min(count[link.source.index], count[link.target.index])
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'alpha' implicitly has an 'any' type.
    function force(alpha) {
      for (let k = 0, n = links.length; k < iterations; ++k) {
        for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
          ;(link = links[i]), (source = link.source), (target = link.target)
          // @ts-expect-error TS(7005) FIXME: Variable 'random' implicitly has an 'any' type.
          x = target.x + target.vx - source.x - source.vx || jiggle(random)
          // @ts-expect-error TS(7005) FIXME: Variable 'random' implicitly has an 'any' type.
          y = target.y + target.vy - source.y - source.vy || jiggle(random)
          l = Math.sqrt(x * x + y * y)
          // @ts-expect-error TS(7005) FIXME: Variable 'distances' implicitly has an 'any' type.
          l = ((l - distances[i]) / l) * alpha * strengths[i]
          ;(x *= l), (y *= l)
          // @ts-expect-error TS(7005) FIXME: Variable 'bias' implicitly has an 'any' type.
          target.vx -= x * (b = bias[i])
          target.vy -= y * b
          source.vx += x * (b = 1 - b)
          source.vy += y * b
        }
      }
    }

    function initialize() {
      // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
      if (!nodes) return

      let i,
        // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        n = nodes.length,
        m = links.length,
        // @ts-expect-error TS(2583) FIXME: Cannot find name 'Map'. Do you need to change your... Remove this comment to see the full error message
        nodeById = new Map(nodes.map((d, i) => [id(d, i, nodes), d])),
        link

      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      for (i = 0, count = new Array(n); i < m; ++i) {
        ;(link = links[i]), (link.index = i)
        if (typeof link.source !== 'object') link.source = find$1(nodeById, link.source)
        if (typeof link.target !== 'object') link.target = find$1(nodeById, link.target)
        count[link.source.index] = (count[link.source.index] || 0) + 1
        count[link.target.index] = (count[link.target.index] || 0) + 1
      }

      for (i = 0, bias = new Array(m); i < m; ++i) {
        ;(link = links[i]), (bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]))
      }

      ;(strengths = new Array(m)), initializeStrength()
      ;(distances = new Array(m)), initializeDistance()
    }

    function initializeStrength() {
      // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
      if (!nodes) return

      for (let i = 0, n = links.length; i < n; ++i) {
        // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 3.
        strengths[i] = +strength(links[i], i, links)
      }
    }

    function initializeDistance() {
      // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
      if (!nodes) return

      for (let i = 0, n = links.length; i < n; ++i) {
        // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 3.
        distances[i] = +distance(links[i], i, links)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_nodes' implicitly has an 'any' type.
    force.initialize = function (_nodes, _random) {
      nodes = _nodes
      random = _random
      initialize()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.links = function (_) {
      return arguments.length ? ((links = _), initialize(), force) : links
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.id = function (_) {
      return arguments.length ? ((id = _), force) : id
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.iterations = function (_) {
      return arguments.length ? ((iterations = +_), force) : iterations
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.strength = function (_) {
      return arguments.length
        ? ((strength = typeof _ === 'function' ? _ : constant$7(+_)), initializeStrength(), force)
        : strength
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.distance = function (_) {
      return arguments.length
        ? ((distance = typeof _ === 'function' ? _ : constant$7(+_)), initializeDistance(), force)
        : distance
    }

    return force
  }

  // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
  const a = 1664525
  const c = 1013904223
  const m = 4294967296 // 2^32

  function lcg() {
    let s = 1
    return () => (s = (a * s + c) % m) / m
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function x$1(d) {
    return d.x
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function y$1(d) {
    return d.y
  }

  const initialRadius = 10,
    initialAngle = Math.PI * (3 - Math.sqrt(5))

  // @ts-expect-error TS(7006) FIXME: Parameter 'nodes' implicitly has an 'any' type.
  function simulation(nodes) {
    // @ts-expect-error TS(7034) FIXME: Variable 'simulation' implicitly has type 'any' in... Remove this comment to see the full error message
    let simulation,
      alpha = 1,
      alphaMin = 0.001,
      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
      alphaTarget = 0,
      velocityDecay = 0.6,
      // @ts-expect-error TS(2583) FIXME: Cannot find name 'Map'. Do you need to change your... Remove this comment to see the full error message
      forces = new Map(),
      // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 1.
      stepper = timer(step),
      // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 2.
      event = dispatch('tick', 'end'),
      random = lcg()

    if (nodes == null) nodes = []

    function step() {
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
      tick()
      // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
      event.call('tick', simulation)
      if (alpha < alphaMin) {
        stepper.stop()
        // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
        event.call('end', simulation)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'iterations' implicitly has an 'any' typ... Remove this comment to see the full error message
    function tick(iterations) {
      let i,
        n = nodes.length,
        node

      if (iterations === undefined) iterations = 1

      for (let k = 0; k < iterations; ++k) {
        alpha += (alphaTarget - alpha) * alphaDecay

        // @ts-expect-error TS(7006) FIXME: Parameter 'force' implicitly has an 'any' type.
        forces.forEach(function (force) {
          force(alpha)
        })

        for (i = 0; i < n; ++i) {
          node = nodes[i]
          if (node.fx == null) node.x += node.vx *= velocityDecay
          else (node.x = node.fx), (node.vx = 0)
          if (node.fy == null) node.y += node.vy *= velocityDecay
          else (node.y = node.fy), (node.vy = 0)
        }
      }

      // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
      return simulation
    }

    function initializeNodes() {
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        ;(node = nodes[i]), (node.index = i)
        if (node.fx != null) node.x = node.fx
        if (node.fy != null) node.y = node.fy
        if (isNaN(node.x) || isNaN(node.y)) {
          const radius = initialRadius * Math.sqrt(0.5 + i),
            angle = i * initialAngle
          node.x = radius * Math.cos(angle)
          node.y = radius * Math.sin(angle)
        }
        if (isNaN(node.vx) || isNaN(node.vy)) {
          node.vx = node.vy = 0
        }
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'force' implicitly has an 'any' type.
    function initializeForce(force) {
      if (force.initialize) force.initialize(nodes, random)
      return force
    }

    initializeNodes()

    return (simulation = {
      tick: tick,

      restart: function () {
        // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
        return stepper.restart(step), simulation
      },

      stop: function () {
        // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
        return stepper.stop(), simulation
      },

      // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
      nodes: function (_) {
        // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
        return arguments.length ? ((nodes = _), initializeNodes(), forces.forEach(initializeForce), simulation) : nodes
      },

      // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
      alpha: function (_) {
        // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
        return arguments.length ? ((alpha = +_), simulation) : alpha
      },

      // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
      alphaMin: function (_) {
        // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
        return arguments.length ? ((alphaMin = +_), simulation) : alphaMin
      },

      // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
      alphaDecay: function (_) {
        // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
        return arguments.length ? ((alphaDecay = +_), simulation) : +alphaDecay
      },

      // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
      alphaTarget: function (_) {
        // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
        return arguments.length ? ((alphaTarget = +_), simulation) : alphaTarget
      },

      // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
      velocityDecay: function (_) {
        // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
        return arguments.length ? ((velocityDecay = 1 - _), simulation) : 1 - velocityDecay
      },

      // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
      randomSource: function (_) {
        // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
        return arguments.length ? ((random = _), forces.forEach(initializeForce), simulation) : random
      },

      // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
      force: function (name, _) {
        return arguments.length > 1
          ? // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
            (_ == null ? forces.delete(name) : forces.set(name, initializeForce(_)), simulation)
          : forces.get(name)
      },

      // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
      find: function (x, y, radius) {
        let i = 0,
          n = nodes.length,
          dx,
          dy,
          d2,
          node,
          closest

        if (radius == null) radius = Infinity
        else radius *= radius

        for (i = 0; i < n; ++i) {
          node = nodes[i]
          dx = x - node.x
          dy = y - node.y
          d2 = dx * dx + dy * dy
          if (d2 < radius) (closest = node), (radius = d2)
        }

        return closest
      },

      // @ts-expect-error TS(7006) FIXME: Parameter 'name' implicitly has an 'any' type.
      on: function (name, _) {
        // @ts-expect-error TS(7005) FIXME: Variable 'simulation' implicitly has an 'any' type... Remove this comment to see the full error message
        return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name)
      },
    })
  }

  function manyBody() {
    // @ts-expect-error TS(7034) FIXME: Variable 'nodes' implicitly has type 'any' in some... Remove this comment to see the full error message
    let nodes,
      // @ts-expect-error TS(7034) FIXME: Variable 'node' implicitly has type 'any' in some ... Remove this comment to see the full error message
      node,
      // @ts-expect-error TS(7034) FIXME: Variable 'random' implicitly has type 'any' in som... Remove this comment to see the full error message
      random,
      // @ts-expect-error TS(7034) FIXME: Variable 'alpha' implicitly has type 'any' in some... Remove this comment to see the full error message
      alpha,
      strength = constant$7(-30),
      // @ts-expect-error TS(7034) FIXME: Variable 'strengths' implicitly has type 'any' in ... Remove this comment to see the full error message
      strengths,
      distanceMin2 = 1,
      distanceMax2 = Infinity,
      theta2 = 0.81

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    function force(_) {
      let i,
        // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        n = nodes.length,
        // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
        tree = quadtree(nodes, x$1, y$1).visitAfter(accumulate)
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      for (alpha = _, i = 0; i < n; ++i) (node = nodes[i]), tree.visit(apply)
    }

    function initialize() {
      // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
      if (!nodes) return
      let i,
        // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        n = nodes.length,
        node
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      strengths = new Array(n)
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      for (i = 0; i < n; ++i) (node = nodes[i]), (strengths[node.index] = +strength(node, i, nodes))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'quad' implicitly has an 'any' type.
    function accumulate(quad) {
      let strength = 0,
        q,
        c,
        weight = 0,
        x,
        y,
        i

      // For internal nodes, accumulate forces from child quadrants.
      if (quad.length) {
        for (x = y = i = 0; i < 4; ++i) {
          if ((q = quad[i]) && (c = Math.abs(q.value))) {
            ;(strength += q.value), (weight += c), (x += c * q.x), (y += c * q.y)
          }
        }
        quad.x = x / weight
        quad.y = y / weight
      }

      // For leaf nodes, accumulate forces from coincident quadrants.
      else {
        q = quad
        q.x = q.data.x
        q.y = q.data.y
        // @ts-expect-error TS(7005) FIXME: Variable 'strengths' implicitly has an 'any' type.
        do strength += strengths[q.data.index]
        while ((q = q.next))
      }

      quad.value = strength
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'quad' implicitly has an 'any' type.
    function apply(quad, x1, _, x2) {
      if (!quad.value) return true

      // @ts-expect-error TS(7005) FIXME: Variable 'node' implicitly has an 'any' type.
      let x = quad.x - node.x,
        // @ts-expect-error TS(7005) FIXME: Variable 'node' implicitly has an 'any' type.
        y = quad.y - node.y,
        w = x2 - x1,
        l = x * x + y * y

      // Apply the Barnes-Hut approximation if possible.
      // Limit forces for very close nodes; randomize direction if coincident.
      if ((w * w) / theta2 < l) {
        if (l < distanceMax2) {
          // @ts-expect-error TS(7005) FIXME: Variable 'random' implicitly has an 'any' type.
          if (x === 0) (x = jiggle(random)), (l += x * x)
          // @ts-expect-error TS(7005) FIXME: Variable 'random' implicitly has an 'any' type.
          if (y === 0) (y = jiggle(random)), (l += y * y)
          if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l)
          // @ts-expect-error TS(7005) FIXME: Variable 'node' implicitly has an 'any' type.
          node.vx += (x * quad.value * alpha) / l
          // @ts-expect-error TS(7005) FIXME: Variable 'node' implicitly has an 'any' type.
          node.vy += (y * quad.value * alpha) / l
        }
        return true
      }

      // Otherwise, process points directly.
      else if (quad.length || l >= distanceMax2) return

      // Limit forces for very close nodes; randomize direction if coincident.
      // @ts-expect-error TS(7005) FIXME: Variable 'node' implicitly has an 'any' type.
      if (quad.data !== node || quad.next) {
        // @ts-expect-error TS(7005) FIXME: Variable 'random' implicitly has an 'any' type.
        if (x === 0) (x = jiggle(random)), (l += x * x)
        // @ts-expect-error TS(7005) FIXME: Variable 'random' implicitly has an 'any' type.
        if (y === 0) (y = jiggle(random)), (l += y * y)
        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l)
      }

      do
        // @ts-expect-error TS(7005) FIXME: Variable 'node' implicitly has an 'any' type.
        if (quad.data !== node) {
          // @ts-expect-error TS(7005) FIXME: Variable 'strengths' implicitly has an 'any' type.
          w = (strengths[quad.data.index] * alpha) / l
          // @ts-expect-error TS(7005) FIXME: Variable 'node' implicitly has an 'any' type.
          node.vx += x * w
          // @ts-expect-error TS(7005) FIXME: Variable 'node' implicitly has an 'any' type.
          node.vy += y * w
        }
      while ((quad = quad.next))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_nodes' implicitly has an 'any' type.
    force.initialize = function (_nodes, _random) {
      nodes = _nodes
      random = _random
      initialize()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.strength = function (_) {
      return arguments.length
        ? ((strength = typeof _ === 'function' ? _ : constant$7(+_)), initialize(), force)
        : strength
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.distanceMin = function (_) {
      return arguments.length ? ((distanceMin2 = _ * _), force) : Math.sqrt(distanceMin2)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.distanceMax = function (_) {
      return arguments.length ? ((distanceMax2 = _ * _), force) : Math.sqrt(distanceMax2)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.theta = function (_) {
      return arguments.length ? ((theta2 = _ * _), force) : Math.sqrt(theta2)
    }

    return force
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'radius' implicitly has an 'any' type.
  function radial(radius, x, y) {
    // @ts-expect-error TS(7034) FIXME: Variable 'nodes' implicitly has type 'any' in some... Remove this comment to see the full error message
    let nodes,
      strength = constant$7(0.1),
      // @ts-expect-error TS(7034) FIXME: Variable 'strengths' implicitly has type 'any' in ... Remove this comment to see the full error message
      strengths,
      // @ts-expect-error TS(7034) FIXME: Variable 'radiuses' implicitly has type 'any' in s... Remove this comment to see the full error message
      radiuses

    if (typeof radius !== 'function') radius = constant$7(+radius)
    if (x == null) x = 0
    if (y == null) y = 0

    // @ts-expect-error TS(7006) FIXME: Parameter 'alpha' implicitly has an 'any' type.
    function force(alpha) {
      // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
      for (let i = 0, n = nodes.length; i < n; ++i) {
        // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
        const node = nodes[i],
          dx = node.x - x || 1e-6,
          dy = node.y - y || 1e-6,
          r = Math.sqrt(dx * dx + dy * dy),
          // @ts-expect-error TS(7005) FIXME: Variable 'radiuses' implicitly has an 'any' type.
          k = ((radiuses[i] - r) * strengths[i] * alpha) / r
        node.vx += dx * k
        node.vy += dy * k
      }
    }

    function initialize() {
      // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
      if (!nodes) return
      let i,
        // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        n = nodes.length
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      strengths = new Array(n)
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      radiuses = new Array(n)
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
        radiuses[i] = +radius(nodes[i], i, nodes)
        // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
        strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.initialize = function (_) {
      ;(nodes = _), initialize()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.strength = function (_) {
      return arguments.length
        ? ((strength = typeof _ === 'function' ? _ : constant$7(+_)), initialize(), force)
        : strength
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.radius = function (_) {
      return arguments.length ? ((radius = typeof _ === 'function' ? _ : constant$7(+_)), initialize(), force) : radius
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.x = function (_) {
      return arguments.length ? ((x = +_), force) : x
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.y = function (_) {
      return arguments.length ? ((y = +_), force) : y
    }

    return force
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function x$2(x) {
    let strength = constant$7(0.1),
      // @ts-expect-error TS(7034) FIXME: Variable 'nodes' implicitly has type 'any' in some... Remove this comment to see the full error message
      nodes,
      // @ts-expect-error TS(7034) FIXME: Variable 'strengths' implicitly has type 'any' in ... Remove this comment to see the full error message
      strengths,
      // @ts-expect-error TS(7034) FIXME: Variable 'xz' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      xz

    if (typeof x !== 'function') x = constant$7(x == null ? 0 : +x)

    // @ts-expect-error TS(7006) FIXME: Parameter 'alpha' implicitly has an 'any' type.
    function force(alpha) {
      // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
        ;(node = nodes[i]), (node.vx += (xz[i] - node.x) * strengths[i] * alpha)
      }
    }

    function initialize() {
      // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
      if (!nodes) return
      let i,
        // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        n = nodes.length
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      strengths = new Array(n)
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      xz = new Array(n)
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
        strengths[i] = isNaN((xz[i] = +x(nodes[i], i, nodes))) ? 0 : +strength(nodes[i], i, nodes)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.initialize = function (_) {
      nodes = _
      initialize()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.strength = function (_) {
      return arguments.length
        ? ((strength = typeof _ === 'function' ? _ : constant$7(+_)), initialize(), force)
        : strength
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.x = function (_) {
      return arguments.length ? ((x = typeof _ === 'function' ? _ : constant$7(+_)), initialize(), force) : x
    }

    return force
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
  function y$2(y) {
    let strength = constant$7(0.1),
      // @ts-expect-error TS(7034) FIXME: Variable 'nodes' implicitly has type 'any' in some... Remove this comment to see the full error message
      nodes,
      // @ts-expect-error TS(7034) FIXME: Variable 'strengths' implicitly has type 'any' in ... Remove this comment to see the full error message
      strengths,
      // @ts-expect-error TS(7034) FIXME: Variable 'yz' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      yz

    if (typeof y !== 'function') y = constant$7(y == null ? 0 : +y)

    // @ts-expect-error TS(7006) FIXME: Parameter 'alpha' implicitly has an 'any' type.
    function force(alpha) {
      // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
      for (var i = 0, n = nodes.length, node; i < n; ++i) {
        // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
        ;(node = nodes[i]), (node.vy += (yz[i] - node.y) * strengths[i] * alpha)
      }
    }

    function initialize() {
      // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
      if (!nodes) return
      let i,
        // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        n = nodes.length
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      strengths = new Array(n)
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      yz = new Array(n)
      // @ts-expect-error TS(7005) FIXME: Variable 'n' implicitly has an 'any' type.
      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(7005) FIXME: Variable 'nodes' implicitly has an 'any' type.
        strengths[i] = isNaN((yz[i] = +y(nodes[i], i, nodes))) ? 0 : +strength(nodes[i], i, nodes)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.initialize = function (_) {
      nodes = _
      initialize()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.strength = function (_) {
      return arguments.length
        ? ((strength = typeof _ === 'function' ? _ : constant$7(+_)), initialize(), force)
        : strength
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    force.y = function (_) {
      return arguments.length ? ((y = typeof _ === 'function' ? _ : constant$7(+_)), initialize(), force) : y
    }

    return force
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function formatDecimal(x) {
    return Math.abs((x = Math.round(x))) >= 1e21 ? x.toLocaleString('en').replace(/,/g, '') : x.toString(10)
  }

  // Computes the decimal coefficient and exponent of the specified number x with
  // significant digits p, where x is positive and p is in [1, 21] or undefined.
  // For example, formatDecimalParts(1.23) returns ["123", 0].
  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function formatDecimalParts(x, p) {
    if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf('e')) < 0) return null // NaN, ±Infinity
    let i,
      coefficient = x.slice(0, i)

    // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
    // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
    return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function exponent$1(x) {
    // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
    return (x = formatDecimalParts(Math.abs(x))), x ? x[1] : NaN
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'grouping' implicitly has an 'any' type.
  function formatGroup(grouping, thousands) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
    return function (value, width) {
      let i = value.length,
        t = [],
        j = 0,
        g = grouping[0],
        length = 0

      while (i > 0 && g > 0) {
        if (length + g + 1 > width) g = Math.max(1, width - length)
        t.push(value.substring((i -= g), i + g))
        if ((length += g + 1) > width) break
        g = grouping[(j = (j + 1) % grouping.length)]
      }

      return t.reverse().join(thousands)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'numerals' implicitly has an 'any' type.
  function formatNumerals(numerals) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
    return function (value) {
      // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
      return value.replace(/[0-9]/g, function (i) {
        return numerals[+i]
      })
    }
  }

  // [[fill]align][sign][symbol][0][width][,][.precision][~][type]
  const re = /^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i

  // @ts-expect-error TS(7006) FIXME: Parameter 'specifier' implicitly has an 'any' type... Remove this comment to see the full error message
  function formatSpecifier(specifier) {
    if (!(match = re.exec(specifier))) throw new Error('invalid format: ' + specifier)
    let match
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new FormatSpecifier({
      fill: match[1],
      align: match[2],
      sign: match[3],
      symbol: match[4],
      zero: match[5],
      width: match[6],
      comma: match[7],
      precision: match[8] && match[8].slice(1),
      trim: match[9],
      type: match[10],
    })
  }

  formatSpecifier.prototype = FormatSpecifier.prototype // instanceof

  // @ts-expect-error TS(7006) FIXME: Parameter 'specifier' implicitly has an 'any' type... Remove this comment to see the full error message
  function FormatSpecifier(specifier) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.fill = specifier.fill === undefined ? ' ' : specifier.fill + ''
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.align = specifier.align === undefined ? '>' : specifier.align + ''
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.sign = specifier.sign === undefined ? '-' : specifier.sign + ''
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.symbol = specifier.symbol === undefined ? '' : specifier.symbol + ''
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.zero = !!specifier.zero
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.width = specifier.width === undefined ? undefined : +specifier.width
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.comma = !!specifier.comma
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.precision = specifier.precision === undefined ? undefined : +specifier.precision
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.trim = !!specifier.trim
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.type = specifier.type === undefined ? '' : specifier.type + ''
  }

  FormatSpecifier.prototype.toString = function () {
    return (
      this.fill +
      this.align +
      this.sign +
      this.symbol +
      (this.zero ? '0' : '') +
      (this.width === undefined ? '' : Math.max(1, this.width | 0)) +
      (this.comma ? ',' : '') +
      (this.precision === undefined ? '' : '.' + Math.max(0, this.precision | 0)) +
      (this.trim ? '~' : '') +
      this.type
    )
  }

  // Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
  // @ts-expect-error TS(7006) FIXME: Parameter 's' implicitly has an 'any' type.
  function formatTrim(s) {
    out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
      switch (s[i]) {
        case '.':
          i0 = i1 = i
          break
        case '0':
          if (i0 === 0) i0 = i
          i1 = i
          break
        default:
          if (!+s[i]) break out
          if (i0 > 0) i0 = 0
          break
      }
    }
    // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
    return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s
  }

  // @ts-expect-error TS(7034) FIXME: Variable 'prefixExponent' implicitly has type 'any... Remove this comment to see the full error message
  let prefixExponent

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function formatPrefixAuto(x, p) {
    const d = formatDecimalParts(x, p)
    if (!d) return x + ''
    const coefficient = d[0],
      exponent = d[1],
      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
      n = coefficient.length
    return i === n
      ? coefficient
      : i > n
      ? coefficient + new Array(i - n + 1).join('0')
      : i > 0
      ? coefficient.slice(0, i) + '.' + coefficient.slice(i)
      : // @ts-expect-error TS(2531) FIXME: Object is possibly 'null'.
        '0.' + new Array(1 - i).join('0') + formatDecimalParts(x, Math.max(0, p + i - 1))[0] // less than 1y!
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function formatRounded(x, p) {
    const d = formatDecimalParts(x, p)
    if (!d) return x + ''
    const coefficient = d[0],
      exponent = d[1]
    return exponent < 0
      ? '0.' + new Array(-exponent).join('0') + coefficient
      : coefficient.length > exponent + 1
      ? coefficient.slice(0, exponent + 1) + '.' + coefficient.slice(exponent + 1)
      : coefficient + new Array(exponent - coefficient.length + 2).join('0')
  }

  const formatTypes = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    '%': (x, p) => (x * 100).toFixed(p),
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    b: x => Math.round(x).toString(2),
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    c: x => x + '',
    d: formatDecimal,
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    e: (x, p) => x.toExponential(p),
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    f: (x, p) => x.toFixed(p),
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    g: (x, p) => x.toPrecision(p),
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    o: x => Math.round(x).toString(8),
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    p: (x, p) => formatRounded(x * 100, p),
    r: formatRounded,
    s: formatPrefixAuto,
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    X: x => Math.round(x).toString(16).toUpperCase(),
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    x: x => Math.round(x).toString(16),
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function identity$3(x) {
    return x
  }

  const map$1 = Array.prototype.map,
    prefixes = ['y', 'z', 'a', 'f', 'p', 'n', '\xB5', 'm', '', 'k', 'M', 'G', 'T', 'P', 'E', 'Z', 'Y']

  // @ts-expect-error TS(7006) FIXME: Parameter 'locale' implicitly has an 'any' type.
  function formatLocale(locale) {
    const group =
        locale.grouping === undefined || locale.thousands === undefined
          ? identity$3
          : formatGroup(map$1.call(locale.grouping, Number), locale.thousands + ''),
      currencyPrefix = locale.currency === undefined ? '' : locale.currency[0] + '',
      currencySuffix = locale.currency === undefined ? '' : locale.currency[1] + '',
      decimal = locale.decimal === undefined ? '.' : locale.decimal + '',
      numerals = locale.numerals === undefined ? identity$3 : formatNumerals(map$1.call(locale.numerals, String)),
      percent = locale.percent === undefined ? '%' : locale.percent + '',
      minus = locale.minus === undefined ? '\u2212' : locale.minus + '',
      nan = locale.nan === undefined ? 'NaN' : locale.nan + ''

    // @ts-expect-error TS(7006) FIXME: Parameter 'specifier' implicitly has an 'any' type... Remove this comment to see the full error message
    function newFormat(specifier) {
      specifier = formatSpecifier(specifier)

      let fill = specifier.fill,
        align = specifier.align,
        sign = specifier.sign,
        symbol = specifier.symbol,
        zero = specifier.zero,
        width = specifier.width,
        comma = specifier.comma,
        precision = specifier.precision,
        trim = specifier.trim,
        type = specifier.type

      // The "n" type is an alias for ",g".
      if (type === 'n') (comma = true), (type = 'g')
      // The "" type, and any invalid type, is an alias for ".12~g".
      // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      else if (!formatTypes[type]) precision === undefined && (precision = 12), (trim = true), (type = 'g')

      // If zero fill is specified, padding goes after sign and before digits.
      if (zero || (fill === '0' && align === '=')) (zero = true), (fill = '0'), (align = '=')

      // Compute the prefix and suffix.
      // For SI-prefix, the suffix is lazily computed.
      const prefix =
          symbol === '$' ? currencyPrefix : symbol === '#' && /[boxX]/.test(type) ? '0' + type.toLowerCase() : '',
        suffix = symbol === '$' ? currencySuffix : /[%p]/.test(type) ? percent : ''

      // What format function should we use?
      // Is this an integer type?
      // Can this type generate exponential notation?
      // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      const formatType = formatTypes[type],
        maybeSuffix = /[defgprs%]/.test(type)

      // Set the default precision if not specified,
      // or clamp the specified precision to the supported range.
      // For significant precision, it must be in [1, 21].
      // For fixed precision, it must be in [0, 20].
      precision =
        precision === undefined
          ? 6
          : /[gprs]/.test(type)
          ? Math.max(1, Math.min(21, precision))
          : Math.max(0, Math.min(20, precision))

      // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
      function format(value) {
        let valuePrefix = prefix,
          valueSuffix = suffix,
          i,
          n,
          c

        if (type === 'c') {
          valueSuffix = formatType(value) + valueSuffix
          value = ''
        } else {
          value = +value

          // Determine the sign. -0 is not less than 0, but 1 / -0 is!
          let valueNegative = value < 0 || 1 / value < 0

          // Perform the initial formatting.
          value = isNaN(value) ? nan : formatType(Math.abs(value), precision)

          // Trim insignificant zeros.
          if (trim) value = formatTrim(value)

          // If a negative value rounds to zero after formatting, and no explicit positive sign is requested, hide the sign.
          if (valueNegative && +value === 0 && sign !== '+') valueNegative = false

          // Compute the prefix and suffix.
          valuePrefix =
            (valueNegative ? (sign === '(' ? sign : minus) : sign === '-' || sign === '(' ? '' : sign) + valuePrefix
          valueSuffix =
            // @ts-expect-error TS(7005) FIXME: Variable 'prefixExponent' implicitly has an 'any' ... Remove this comment to see the full error message
            (type === 's' ? prefixes[8 + prefixExponent / 3] : '') +
            valueSuffix +
            (valueNegative && sign === '(' ? ')' : '')

          // Break the formatted value into the integer “value” part that can be
          // grouped, and fractional or exponential “suffix” part that is not.
          if (maybeSuffix) {
            ;(i = -1), (n = value.length)
            while (++i < n) {
              if (((c = value.charCodeAt(i)), 48 > c || c > 57)) {
                valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix
                value = value.slice(0, i)
                break
              }
            }
          }
        }

        // If the fill character is not "0", grouping is applied before padding.
        if (comma && !zero) value = group(value, Infinity)

        // Compute the padding.
        let length = valuePrefix.length + value.length + valueSuffix.length,
          padding = length < width ? new Array(width - length + 1).join(fill) : ''

        // If the fill character is "0", grouping is applied after padding.
        if (comma && zero)
          (value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity)), (padding = '')

        // Reconstruct the final output based on the desired alignment.
        switch (align) {
          case '<':
            value = valuePrefix + value + valueSuffix + padding
            break
          case '=':
            value = valuePrefix + padding + value + valueSuffix
            break
          case '^':
            value =
              padding.slice(0, (length = padding.length >> 1)) +
              valuePrefix +
              value +
              valueSuffix +
              padding.slice(length)
            break
          default:
            value = padding + valuePrefix + value + valueSuffix
            break
        }

        return numerals(value)
      }

      format.toString = function () {
        return specifier + ''
      }

      return format
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'specifier' implicitly has an 'any' type... Remove this comment to see the full error message
    function formatPrefix(specifier, value) {
      const f = newFormat(((specifier = formatSpecifier(specifier)), (specifier.type = 'f'), specifier)),
        e = Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3,
        k = Math.pow(10, -e),
        prefix = prefixes[8 + e / 3]
      // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
      return function (value) {
        return f(k * value) + prefix
      }
    }

    return {
      format: newFormat,
      formatPrefix: formatPrefix,
    }
  }

  let locale

  defaultLocale({
    thousands: ',',
    grouping: [3],
    currency: ['$', ''],
  })

  // @ts-expect-error TS(7006) FIXME: Parameter 'definition' implicitly has an 'any' typ... Remove this comment to see the full error message
  function defaultLocale(definition) {
    locale = formatLocale(definition)
    exports.format = locale.format
    exports.formatPrefix = locale.formatPrefix
    return locale
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'step' implicitly has an 'any' type.
  function precisionFixed(step) {
    return Math.max(0, -exponent$1(Math.abs(step)))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'step' implicitly has an 'any' type.
  function precisionPrefix(step, value) {
    return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent$1(value) / 3))) * 3 - exponent$1(Math.abs(step)))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'step' implicitly has an 'any' type.
  function precisionRound(step, max) {
    ;(step = Math.abs(step)), (max = Math.abs(max) - step)
    return Math.max(0, exponent$1(max) - exponent$1(step)) + 1
  }

  const epsilon$4 = 1e-6
  const epsilon2$1 = 1e-12
  const pi$3 = Math.PI
  const halfPi$2 = pi$3 / 2
  const quarterPi = pi$3 / 4
  const tau$4 = pi$3 * 2

  const degrees$2 = 180 / pi$3
  const radians$1 = pi$3 / 180

  const abs$2 = Math.abs
  const atan = Math.atan
  const atan2 = Math.atan2
  const cos$1 = Math.cos
  const ceil = Math.ceil
  const exp = Math.exp
  // @ts-expect-error TS(2550) FIXME: Property 'hypot' does not exist on type 'Math'. Do... Remove this comment to see the full error message
  const hypot = Math.hypot
  const log = Math.log
  const pow$1 = Math.pow
  const sin$1 = Math.sin
  const sign =
    // @ts-expect-error TS(2550) FIXME: Property 'sign' does not exist on type 'Math'. Do ... Remove this comment to see the full error message
    Math.sign ||
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function (x) {
      return x > 0 ? 1 : x < 0 ? -1 : 0
    }
  const sqrt = Math.sqrt
  const tan = Math.tan

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function acos(x) {
    return x > 1 ? 0 : x < -1 ? pi$3 : Math.acos(x)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function asin(x) {
    return x > 1 ? halfPi$2 : x < -1 ? -halfPi$2 : Math.asin(x)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function haversin(x) {
    return (x = sin$1(x / 2)) * x
  }

  function noop$2() {}

  // @ts-expect-error TS(7006) FIXME: Parameter 'geometry' implicitly has an 'any' type.
  function streamGeometry(geometry, stream) {
    if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
      // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      streamGeometryType[geometry.type](geometry, stream)
    }
  }

  const streamObjectType = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    Feature: function (object, stream) {
      streamGeometry(object.geometry, stream)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    FeatureCollection: function (object, stream) {
      let features = object.features,
        i = -1,
        n = features.length
      while (++i < n) streamGeometry(features[i].geometry, stream)
    },
  }

  var streamGeometryType = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    Sphere: function (object, stream) {
      stream.sphere()
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    Point: function (object, stream) {
      object = object.coordinates
      stream.point(object[0], object[1], object[2])
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    MultiPoint: function (object, stream) {
      let coordinates = object.coordinates,
        i = -1,
        n = coordinates.length
      while (++i < n) (object = coordinates[i]), stream.point(object[0], object[1], object[2])
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    LineString: function (object, stream) {
      streamLine(object.coordinates, stream, 0)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    MultiLineString: function (object, stream) {
      let coordinates = object.coordinates,
        i = -1,
        n = coordinates.length
      while (++i < n) streamLine(coordinates[i], stream, 0)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    Polygon: function (object, stream) {
      streamPolygon(object.coordinates, stream)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    MultiPolygon: function (object, stream) {
      let coordinates = object.coordinates,
        i = -1,
        n = coordinates.length
      while (++i < n) streamPolygon(coordinates[i], stream)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    GeometryCollection: function (object, stream) {
      let geometries = object.geometries,
        i = -1,
        n = geometries.length
      while (++i < n) streamGeometry(geometries[i], stream)
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'coordinates' implicitly has an 'any' ty... Remove this comment to see the full error message
  function streamLine(coordinates, stream, closed) {
    let i = -1,
      n = coordinates.length - closed,
      coordinate
    stream.lineStart()
    while (++i < n) (coordinate = coordinates[i]), stream.point(coordinate[0], coordinate[1], coordinate[2])
    stream.lineEnd()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'coordinates' implicitly has an 'any' ty... Remove this comment to see the full error message
  function streamPolygon(coordinates, stream) {
    let i = -1,
      n = coordinates.length
    stream.polygonStart()
    while (++i < n) streamLine(coordinates[i], stream, 1)
    stream.polygonEnd()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
  function geoStream(object, stream) {
    if (object && streamObjectType.hasOwnProperty(object.type)) {
      // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      streamObjectType[object.type](object, stream)
    } else {
      streamGeometry(object, stream)
    }
  }

  let areaRingSum = new Adder()

  // hello?

  let areaSum = new Adder(),
    // @ts-expect-error TS(7034) FIXME: Variable 'lambda00' implicitly has type 'any' in s... Remove this comment to see the full error message
    lambda00,
    // @ts-expect-error TS(7034) FIXME: Variable 'phi00' implicitly has type 'any' in some... Remove this comment to see the full error message
    phi00,
    // @ts-expect-error TS(7034) FIXME: Variable 'lambda0' implicitly has type 'any' in so... Remove this comment to see the full error message
    lambda0,
    // @ts-expect-error TS(7034) FIXME: Variable 'cosPhi0' implicitly has type 'any' in so... Remove this comment to see the full error message
    cosPhi0,
    // @ts-expect-error TS(7034) FIXME: Variable 'sinPhi0' implicitly has type 'any' in so... Remove this comment to see the full error message
    sinPhi0

  var areaStream = {
    point: noop$2,
    lineStart: noop$2,
    lineEnd: noop$2,
    polygonStart: function () {
      areaRingSum = new Adder()
      areaStream.lineStart = areaRingStart
      areaStream.lineEnd = areaRingEnd
    },
    polygonEnd: function () {
      const areaRing = +areaRingSum
      areaSum.add(areaRing < 0 ? tau$4 + areaRing : areaRing)
      this.lineStart = this.lineEnd = this.point = noop$2
    },
    sphere: function () {
      areaSum.add(tau$4)
    },
  }

  function areaRingStart() {
    // @ts-expect-error TS(2322) FIXME: Type '(lambda: any, phi: any) => void' is not assi... Remove this comment to see the full error message
    areaStream.point = areaPointFirst
  }

  function areaRingEnd() {
    // @ts-expect-error TS(7005) FIXME: Variable 'lambda00' implicitly has an 'any' type.
    areaPoint(lambda00, phi00)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function areaPointFirst(lambda, phi) {
    // @ts-expect-error TS(2322) FIXME: Type '(lambda: any, phi: any) => void' is not assi... Remove this comment to see the full error message
    areaStream.point = areaPoint
    ;(lambda00 = lambda), (phi00 = phi)
    ;(lambda *= radians$1), (phi *= radians$1)
    ;(lambda0 = lambda), (cosPhi0 = cos$1((phi = phi / 2 + quarterPi))), (sinPhi0 = sin$1(phi))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function areaPoint(lambda, phi) {
    ;(lambda *= radians$1), (phi *= radians$1)
    phi = phi / 2 + quarterPi // half the angular distance from south pole

    // Spherical excess E for a spherical triangle with vertices: south pole,
    // previous point, current point.  Uses a formula derived from Cagnoli’s
    // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
    // @ts-expect-error TS(7005) FIXME: Variable 'lambda0' implicitly has an 'any' type.
    const dLambda = lambda - lambda0,
      sdLambda = dLambda >= 0 ? 1 : -1,
      adLambda = sdLambda * dLambda,
      cosPhi = cos$1(phi),
      sinPhi = sin$1(phi),
      // @ts-expect-error TS(7005) FIXME: Variable 'sinPhi0' implicitly has an 'any' type.
      k = sinPhi0 * sinPhi,
      // @ts-expect-error TS(7005) FIXME: Variable 'cosPhi0' implicitly has an 'any' type.
      u = cosPhi0 * cosPhi + k * cos$1(adLambda),
      v = k * sdLambda * sin$1(adLambda)
    areaRingSum.add(atan2(v, u))

    // Advance the previous points.
    ;(lambda0 = lambda), (cosPhi0 = cosPhi), (sinPhi0 = sinPhi)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
  function area$1(object) {
    areaSum = new Adder()
    geoStream(object, areaStream)
    // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
    return areaSum * 2
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'cartesian' implicitly has an 'any' type... Remove this comment to see the full error message
  function spherical(cartesian) {
    return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'spherical' implicitly has an 'any' type... Remove this comment to see the full error message
  function cartesian(spherical) {
    const lambda = spherical[0],
      phi = spherical[1],
      cosPhi = cos$1(phi)
    return [cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi)]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function cartesianDot(a, b) {
    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function cartesianCross(a, b) {
    return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]]
  }

  // TODO return a
  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function cartesianAddInPlace(a, b) {
    ;(a[0] += b[0]), (a[1] += b[1]), (a[2] += b[2])
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'vector' implicitly has an 'any' type.
  function cartesianScale(vector, k) {
    return [vector[0] * k, vector[1] * k, vector[2] * k]
  }

  // TODO return d
  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function cartesianNormalizeInPlace(d) {
    const l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2])
    ;(d[0] /= l), (d[1] /= l), (d[2] /= l)
  }

  // @ts-expect-error TS(7034) FIXME: Variable 'lambda0$1' implicitly has type 'any' in ... Remove this comment to see the full error message
  let lambda0$1,
    // @ts-expect-error TS(7034) FIXME: Variable 'phi0' implicitly has type 'any' in some ... Remove this comment to see the full error message
    phi0,
    // @ts-expect-error TS(7034) FIXME: Variable 'lambda1' implicitly has type 'any' in so... Remove this comment to see the full error message
    lambda1,
    // @ts-expect-error TS(7034) FIXME: Variable 'phi1' implicitly has type 'any' in some ... Remove this comment to see the full error message
    phi1, // bounds
    // @ts-expect-error TS(7034) FIXME: Variable 'lambda2' implicitly has type 'any' in so... Remove this comment to see the full error message
    lambda2, // previous lambda-coordinate
    // @ts-expect-error TS(7034) FIXME: Variable 'lambda00$1' implicitly has type 'any' in... Remove this comment to see the full error message
    lambda00$1,
    // @ts-expect-error TS(7034) FIXME: Variable 'phi00$1' implicitly has type 'any' in so... Remove this comment to see the full error message
    phi00$1, // first point
    // @ts-expect-error TS(7034) FIXME: Variable 'p0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    p0, // previous 3D point
    // @ts-expect-error TS(7034) FIXME: Variable 'deltaSum' implicitly has type 'any' in s... Remove this comment to see the full error message
    deltaSum,
    // @ts-expect-error TS(7034) FIXME: Variable 'ranges' implicitly has type 'any[]' in s... Remove this comment to see the full error message
    ranges,
    range$1

  var boundsStream = {
    point: boundsPoint,
    lineStart: boundsLineStart,
    lineEnd: boundsLineEnd,
    polygonStart: function () {
      boundsStream.point = boundsRingPoint
      boundsStream.lineStart = boundsRingStart
      boundsStream.lineEnd = boundsRingEnd
      deltaSum = new Adder()
      areaStream.polygonStart()
    },
    polygonEnd: function () {
      areaStream.polygonEnd()
      boundsStream.point = boundsPoint
      boundsStream.lineStart = boundsLineStart
      boundsStream.lineEnd = boundsLineEnd
      // @ts-expect-error TS(2365) FIXME: Operator '<' cannot be applied to types 'Adder' an... Remove this comment to see the full error message
      if (areaRingSum < 0) (lambda0$1 = -(lambda1 = 180)), (phi0 = -(phi1 = 90))
      // @ts-expect-error TS(7005) FIXME: Variable 'deltaSum' implicitly has an 'any' type.
      else if (deltaSum > epsilon$4) phi1 = 90
      // @ts-expect-error TS(7005) FIXME: Variable 'deltaSum' implicitly has an 'any' type.
      else if (deltaSum < -epsilon$4)
        phi0 = -90
        // @ts-expect-error TS(7005) FIXME: Variable 'lambda0$1' implicitly has an 'any' type.
      ;(range$1[0] = lambda0$1), (range$1[1] = lambda1)
    },
    sphere: function () {
      ;(lambda0$1 = -(lambda1 = 180)), (phi0 = -(phi1 = 90))
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function boundsPoint(lambda, phi) {
    ranges.push((range$1 = [(lambda0$1 = lambda), (lambda1 = lambda)]))
    // @ts-expect-error TS(7005) FIXME: Variable 'phi0' implicitly has an 'any' type.
    if (phi < phi0) phi0 = phi
    // @ts-expect-error TS(7005) FIXME: Variable 'phi1' implicitly has an 'any' type.
    if (phi > phi1) phi1 = phi
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function linePoint(lambda, phi) {
    const p = cartesian([lambda * radians$1, phi * radians$1])
    // @ts-expect-error TS(7005) FIXME: Variable 'p0' implicitly has an 'any' type.
    if (p0) {
      // @ts-expect-error TS(7005) FIXME: Variable 'p0' implicitly has an 'any' type.
      let normal = cartesianCross(p0, p),
        equatorial = [normal[1], -normal[0], 0],
        inflection = cartesianCross(equatorial, normal)
      cartesianNormalizeInPlace(inflection)
      inflection = spherical(inflection)
      // @ts-expect-error TS(7005) FIXME: Variable 'lambda2' implicitly has an 'any' type.
      let delta = lambda - lambda2,
        sign = delta > 0 ? 1 : -1,
        lambdai = inflection[0] * degrees$2 * sign,
        phii,
        antimeridian = abs$2(delta) > 180
      // @ts-expect-error TS(2447) FIXME: The '^' operator is not allowed for boolean types.... Remove this comment to see the full error message
      if (antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda)) {
        phii = inflection[1] * degrees$2
        // @ts-expect-error TS(7005) FIXME: Variable 'phi1' implicitly has an 'any' type.
        if (phii > phi1) phi1 = phii
      } else if (
        ((lambdai = ((lambdai + 360) % 360) - 180),
        // @ts-expect-error TS(2447) FIXME: The '^' operator is not allowed for boolean types.... Remove this comment to see the full error message
        antimeridian ^ (sign * lambda2 < lambdai && lambdai < sign * lambda))
      ) {
        phii = -inflection[1] * degrees$2
        // @ts-expect-error TS(7005) FIXME: Variable 'phi0' implicitly has an 'any' type.
        if (phii < phi0) phi0 = phii
      } else {
        // @ts-expect-error TS(7005) FIXME: Variable 'phi0' implicitly has an 'any' type.
        if (phi < phi0) phi0 = phi
        // @ts-expect-error TS(7005) FIXME: Variable 'phi1' implicitly has an 'any' type.
        if (phi > phi1) phi1 = phi
      }
      if (antimeridian) {
        // @ts-expect-error TS(7005) FIXME: Variable 'lambda2' implicitly has an 'any' type.
        if (lambda < lambda2) {
          // @ts-expect-error TS(7005) FIXME: Variable 'lambda0$1' implicitly has an 'any' type.
          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda
        } else {
          // @ts-expect-error TS(7005) FIXME: Variable 'lambda1' implicitly has an 'any' type.
          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda
        }
      } else {
        // @ts-expect-error TS(7005) FIXME: Variable 'lambda1' implicitly has an 'any' type.
        if (lambda1 >= lambda0$1) {
          // @ts-expect-error TS(7005) FIXME: Variable 'lambda0$1' implicitly has an 'any' type.
          if (lambda < lambda0$1) lambda0$1 = lambda
          // @ts-expect-error TS(7005) FIXME: Variable 'lambda1' implicitly has an 'any' type.
          if (lambda > lambda1) lambda1 = lambda
        } else {
          // @ts-expect-error TS(7005) FIXME: Variable 'lambda2' implicitly has an 'any' type.
          if (lambda > lambda2) {
            // @ts-expect-error TS(7005) FIXME: Variable 'lambda0$1' implicitly has an 'any' type.
            if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda
          } else {
            // @ts-expect-error TS(7005) FIXME: Variable 'lambda1' implicitly has an 'any' type.
            if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda
          }
        }
      }
    } else {
      ranges.push((range$1 = [(lambda0$1 = lambda), (lambda1 = lambda)]))
    }
    // @ts-expect-error TS(7005) FIXME: Variable 'phi0' implicitly has an 'any' type.
    if (phi < phi0) phi0 = phi
    // @ts-expect-error TS(7005) FIXME: Variable 'phi1' implicitly has an 'any' type.
    if (phi > phi1) phi1 = phi
    ;(p0 = p), (lambda2 = lambda)
  }

  function boundsLineStart() {
    boundsStream.point = linePoint
  }

  function boundsLineEnd() {
    // @ts-expect-error TS(7005) FIXME: Variable 'lambda0$1' implicitly has an 'any' type.
    ;(range$1[0] = lambda0$1), (range$1[1] = lambda1)
    boundsStream.point = boundsPoint
    p0 = null
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function boundsRingPoint(lambda, phi) {
    // @ts-expect-error TS(7005) FIXME: Variable 'p0' implicitly has an 'any' type.
    if (p0) {
      // @ts-expect-error TS(7005) FIXME: Variable 'lambda2' implicitly has an 'any' type.
      const delta = lambda - lambda2
      // @ts-expect-error TS(7005) FIXME: Variable 'deltaSum' implicitly has an 'any' type.
      deltaSum.add(abs$2(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta)
    } else {
      ;(lambda00$1 = lambda), (phi00$1 = phi)
    }
    // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 2.
    areaStream.point(lambda, phi)
    linePoint(lambda, phi)
  }

  function boundsRingStart() {
    areaStream.lineStart()
  }

  function boundsRingEnd() {
    // @ts-expect-error TS(7005) FIXME: Variable 'lambda00$1' implicitly has an 'any' type... Remove this comment to see the full error message
    boundsRingPoint(lambda00$1, phi00$1)
    areaStream.lineEnd()
    // @ts-expect-error TS(7005) FIXME: Variable 'deltaSum' implicitly has an 'any' type.
    if (abs$2(deltaSum) > epsilon$4)
      lambda0$1 = -(lambda1 = 180)
      // @ts-expect-error TS(7005) FIXME: Variable 'lambda0$1' implicitly has an 'any' type.
    ;(range$1[0] = lambda0$1), (range$1[1] = lambda1)
    p0 = null
  }

  // Finds the left-right distance between two longitudes.
  // This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
  // the distance between ±180° to be 360°.
  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda0' implicitly has an 'any' type.
  function angle(lambda0, lambda1) {
    return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function rangeCompare(a, b) {
    return a[0] - b[0]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'range' implicitly has an 'any' type.
  function rangeContains(range, x) {
    return range[0] <= range[1] ? range[0] <= x && x <= range[1] : x < range[0] || range[1] < x
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'feature' implicitly has an 'any' type.
  function bounds(feature) {
    let i, n, a, b, merged, deltaMax, delta

    phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity)
    ranges = []
    geoStream(feature, boundsStream)

    // First, sort ranges by their minimum longitudes.
    if ((n = ranges.length)) {
      // @ts-expect-error TS(7005) FIXME: Variable 'ranges' implicitly has an 'any[]' type.
      ranges.sort(rangeCompare)

      // Then, merge any ranges that overlap.
      // @ts-expect-error TS(7005) FIXME: Variable 'ranges' implicitly has an 'any[]' type.
      for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
        // @ts-expect-error TS(7005) FIXME: Variable 'ranges' implicitly has an 'any[]' type.
        b = ranges[i]
        if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
          if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1]
          if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0]
        } else {
          merged.push((a = b))
        }
      }

      // Finally, find the largest gap between the merged ranges.
      // The final bounding box will be the inverse of this gap.
      for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
        b = merged[i]
        if ((delta = angle(a[1], b[0])) > deltaMax) (deltaMax = delta), (lambda0$1 = b[0]), (lambda1 = a[1])
      }
    }

    ranges = range$1 = null

    return lambda0$1 === Infinity || phi0 === Infinity
      ? [
          [NaN, NaN],
          [NaN, NaN],
        ]
      : [
          [lambda0$1, phi0],
          [lambda1, phi1],
        ]
  }

  // @ts-expect-error TS(7034) FIXME: Variable 'W0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
  let W0,
    // @ts-expect-error TS(7034) FIXME: Variable 'W1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    W1,
    // @ts-expect-error TS(7034) FIXME: Variable 'X0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    X0,
    // @ts-expect-error TS(7034) FIXME: Variable 'Y0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    Y0,
    // @ts-expect-error TS(7034) FIXME: Variable 'Z0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    Z0,
    // @ts-expect-error TS(7034) FIXME: Variable 'X1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    X1,
    // @ts-expect-error TS(7034) FIXME: Variable 'Y1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    Y1,
    // @ts-expect-error TS(7034) FIXME: Variable 'Z1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    Z1,
    // @ts-expect-error TS(7034) FIXME: Variable 'X2' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    X2,
    // @ts-expect-error TS(7034) FIXME: Variable 'Y2' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    Y2,
    // @ts-expect-error TS(7034) FIXME: Variable 'Z2' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    Z2,
    // @ts-expect-error TS(7034) FIXME: Variable 'lambda00$2' implicitly has type 'any' in... Remove this comment to see the full error message
    lambda00$2,
    // @ts-expect-error TS(7034) FIXME: Variable 'phi00$2' implicitly has type 'any' in so... Remove this comment to see the full error message
    phi00$2, // first point
    // @ts-expect-error TS(7034) FIXME: Variable 'x0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    x0,
    // @ts-expect-error TS(7034) FIXME: Variable 'y0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    y0,
    // @ts-expect-error TS(7034) FIXME: Variable 'z0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    z0 // previous point

  var centroidStream = {
    sphere: noop$2,
    point: centroidPoint,
    lineStart: centroidLineStart,
    lineEnd: centroidLineEnd,
    polygonStart: function () {
      centroidStream.lineStart = centroidRingStart
      centroidStream.lineEnd = centroidRingEnd
    },
    polygonEnd: function () {
      centroidStream.lineStart = centroidLineStart
      centroidStream.lineEnd = centroidLineEnd
    },
  }

  // Arithmetic mean of Cartesian vectors.
  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function centroidPoint(lambda, phi) {
    ;(lambda *= radians$1), (phi *= radians$1)
    const cosPhi = cos$1(phi)
    centroidPointCartesian(cosPhi * cos$1(lambda), cosPhi * sin$1(lambda), sin$1(phi))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function centroidPointCartesian(x, y, z) {
    // @ts-expect-error TS(7005) FIXME: Variable 'W0' implicitly has an 'any' type.
    ++W0
    // @ts-expect-error TS(7005) FIXME: Variable 'X0' implicitly has an 'any' type.
    X0 += (x - X0) / W0
    // @ts-expect-error TS(7005) FIXME: Variable 'Y0' implicitly has an 'any' type.
    Y0 += (y - Y0) / W0
    // @ts-expect-error TS(7005) FIXME: Variable 'Z0' implicitly has an 'any' type.
    Z0 += (z - Z0) / W0
  }

  function centroidLineStart() {
    centroidStream.point = centroidLinePointFirst
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function centroidLinePointFirst(lambda, phi) {
    ;(lambda *= radians$1), (phi *= radians$1)
    const cosPhi = cos$1(phi)
    x0 = cosPhi * cos$1(lambda)
    y0 = cosPhi * sin$1(lambda)
    z0 = sin$1(phi)
    centroidStream.point = centroidLinePoint
    centroidPointCartesian(x0, y0, z0)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function centroidLinePoint(lambda, phi) {
    ;(lambda *= radians$1), (phi *= radians$1)
    var cosPhi = cos$1(phi),
      x = cosPhi * cos$1(lambda),
      y = cosPhi * sin$1(lambda),
      z = sin$1(phi),
      w = atan2(
        // @ts-expect-error TS(7005) FIXME: Variable 'y0' implicitly has an 'any' type.
        sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w),
        // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
        x0 * x + y0 * y + z0 * z
      )
    // @ts-expect-error TS(7005) FIXME: Variable 'W1' implicitly has an 'any' type.
    W1 += w
    // @ts-expect-error TS(7005) FIXME: Variable 'X1' implicitly has an 'any' type.
    X1 += w * (x0 + (x0 = x))
    // @ts-expect-error TS(7005) FIXME: Variable 'Y1' implicitly has an 'any' type.
    Y1 += w * (y0 + (y0 = y))
    // @ts-expect-error TS(7005) FIXME: Variable 'Z1' implicitly has an 'any' type.
    Z1 += w * (z0 + (z0 = z))
    centroidPointCartesian(x0, y0, z0)
  }

  function centroidLineEnd() {
    centroidStream.point = centroidPoint
  }

  // See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
  // J. Applied Mechanics 42, 239 (1975).
  function centroidRingStart() {
    centroidStream.point = centroidRingPointFirst
  }

  function centroidRingEnd() {
    // @ts-expect-error TS(7005) FIXME: Variable 'lambda00$2' implicitly has an 'any' type... Remove this comment to see the full error message
    centroidRingPoint(lambda00$2, phi00$2)
    centroidStream.point = centroidPoint
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function centroidRingPointFirst(lambda, phi) {
    ;(lambda00$2 = lambda), (phi00$2 = phi)
    ;(lambda *= radians$1), (phi *= radians$1)
    centroidStream.point = centroidRingPoint
    const cosPhi = cos$1(phi)
    x0 = cosPhi * cos$1(lambda)
    y0 = cosPhi * sin$1(lambda)
    z0 = sin$1(phi)
    centroidPointCartesian(x0, y0, z0)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function centroidRingPoint(lambda, phi) {
    ;(lambda *= radians$1), (phi *= radians$1)
    const cosPhi = cos$1(phi),
      x = cosPhi * cos$1(lambda),
      y = cosPhi * sin$1(lambda),
      z = sin$1(phi),
      // @ts-expect-error TS(7005) FIXME: Variable 'y0' implicitly has an 'any' type.
      cx = y0 * z - z0 * y,
      // @ts-expect-error TS(7005) FIXME: Variable 'z0' implicitly has an 'any' type.
      cy = z0 * x - x0 * z,
      // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
      cz = x0 * y - y0 * x,
      m = hypot(cx, cy, cz),
      w = asin(m), // line weight = angle
      v = m && -w / m // area weight multiplier
    // @ts-expect-error TS(7005) FIXME: Variable 'X2' implicitly has an 'any' type.
    X2.add(v * cx)
    // @ts-expect-error TS(7005) FIXME: Variable 'Y2' implicitly has an 'any' type.
    Y2.add(v * cy)
    // @ts-expect-error TS(7005) FIXME: Variable 'Z2' implicitly has an 'any' type.
    Z2.add(v * cz)
    // @ts-expect-error TS(7005) FIXME: Variable 'W1' implicitly has an 'any' type.
    W1 += w
    // @ts-expect-error TS(7005) FIXME: Variable 'X1' implicitly has an 'any' type.
    X1 += w * (x0 + (x0 = x))
    // @ts-expect-error TS(7005) FIXME: Variable 'Y1' implicitly has an 'any' type.
    Y1 += w * (y0 + (y0 = y))
    // @ts-expect-error TS(7005) FIXME: Variable 'Z1' implicitly has an 'any' type.
    Z1 += w * (z0 + (z0 = z))
    centroidPointCartesian(x0, y0, z0)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
  function centroid(object) {
    W0 = W1 = X0 = Y0 = Z0 = X1 = Y1 = Z1 = 0
    X2 = new Adder()
    Y2 = new Adder()
    Z2 = new Adder()
    geoStream(object, centroidStream)

    let x = +X2,
      y = +Y2,
      z = +Z2,
      m = hypot(x, y, z)

    // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
    if (m < epsilon2$1) {
      ;(x = X1), (y = Y1), (z = Z1)
      // If the feature has zero length, fall back to arithmetic mean of point vectors.
      if (W1 < epsilon$4) (x = X0), (y = Y0), (z = Z0)
      m = hypot(x, y, z)
      // If the feature still has an undefined ccentroid, then return.
      if (m < epsilon2$1) return [NaN, NaN]
    }

    return [atan2(y, x) * degrees$2, asin(z / m) * degrees$2]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function constant$8(x) {
    return function () {
      return x
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function compose(a, b) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function compose(x, y) {
      return (x = a(x, y)), b(x[0], x[1])
    }

    if (a.invert && b.invert)
      // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
      compose.invert = function (x, y) {
        return (x = b.invert(x, y)), x && a.invert(x[0], x[1])
      }

    return compose
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function rotationIdentity(lambda, phi) {
    return [abs$2(lambda) > pi$3 ? lambda + Math.round(-lambda / tau$4) * tau$4 : lambda, phi]
  }

  rotationIdentity.invert = rotationIdentity

  // @ts-expect-error TS(7006) FIXME: Parameter 'deltaLambda' implicitly has an 'any' ty... Remove this comment to see the full error message
  function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
    return (deltaLambda %= tau$4)
      ? deltaPhi || deltaGamma
        ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
        : rotationLambda(deltaLambda)
      : deltaPhi || deltaGamma
      ? rotationPhiGamma(deltaPhi, deltaGamma)
      : rotationIdentity
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'deltaLambda' implicitly has an 'any' ty... Remove this comment to see the full error message
  function forwardRotationLambda(deltaLambda) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
    return function (lambda, phi) {
      return (lambda += deltaLambda), [lambda > pi$3 ? lambda - tau$4 : lambda < -pi$3 ? lambda + tau$4 : lambda, phi]
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'deltaLambda' implicitly has an 'any' ty... Remove this comment to see the full error message
  function rotationLambda(deltaLambda) {
    const rotation = forwardRotationLambda(deltaLambda)
    // @ts-expect-error TS(2339) FIXME: Property 'invert' does not exist on type '(lambda:... Remove this comment to see the full error message
    rotation.invert = forwardRotationLambda(-deltaLambda)
    return rotation
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'deltaPhi' implicitly has an 'any' type.
  function rotationPhiGamma(deltaPhi, deltaGamma) {
    const cosDeltaPhi = cos$1(deltaPhi),
      sinDeltaPhi = sin$1(deltaPhi),
      cosDeltaGamma = cos$1(deltaGamma),
      sinDeltaGamma = sin$1(deltaGamma)

    // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
    function rotation(lambda, phi) {
      const cosPhi = cos$1(phi),
        x = cos$1(lambda) * cosPhi,
        y = sin$1(lambda) * cosPhi,
        z = sin$1(phi),
        k = z * cosDeltaPhi + x * sinDeltaPhi
      return [
        atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
        asin(k * cosDeltaGamma + y * sinDeltaGamma),
      ]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
    rotation.invert = function (lambda, phi) {
      const cosPhi = cos$1(phi),
        x = cos$1(lambda) * cosPhi,
        y = sin$1(lambda) * cosPhi,
        z = sin$1(phi),
        k = z * cosDeltaGamma - y * sinDeltaGamma
      return [
        atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
        asin(k * cosDeltaPhi - x * sinDeltaPhi),
      ]
    }

    return rotation
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'rotate' implicitly has an 'any' type.
  function rotation(rotate) {
    rotate = rotateRadians(rotate[0] * radians$1, rotate[1] * radians$1, rotate.length > 2 ? rotate[2] * radians$1 : 0)

    // @ts-expect-error TS(7006) FIXME: Parameter 'coordinates' implicitly has an 'any' ty... Remove this comment to see the full error message
    function forward(coordinates) {
      coordinates = rotate(coordinates[0] * radians$1, coordinates[1] * radians$1)
      return (coordinates[0] *= degrees$2), (coordinates[1] *= degrees$2), coordinates
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'coordinates' implicitly has an 'any' ty... Remove this comment to see the full error message
    forward.invert = function (coordinates) {
      coordinates = rotate.invert(coordinates[0] * radians$1, coordinates[1] * radians$1)
      return (coordinates[0] *= degrees$2), (coordinates[1] *= degrees$2), coordinates
    }

    return forward
  }

  // Generates a circle centered at [0°, 0°], with a given radius and precision.
  // @ts-expect-error TS(7006) FIXME: Parameter 'stream' implicitly has an 'any' type.
  function circleStream(stream, radius, delta, direction, t0, t1) {
    if (!delta) return
    const cosRadius = cos$1(radius),
      sinRadius = sin$1(radius),
      step = direction * delta
    if (t0 == null) {
      t0 = radius + direction * tau$4
      t1 = radius - step / 2
    } else {
      t0 = circleRadius(cosRadius, t0)
      t1 = circleRadius(cosRadius, t1)
      if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau$4
    }
    for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
      point = spherical([cosRadius, -sinRadius * cos$1(t), -sinRadius * sin$1(t)])
      stream.point(point[0], point[1])
    }
  }

  // Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
  // @ts-expect-error TS(7006) FIXME: Parameter 'cosRadius' implicitly has an 'any' type... Remove this comment to see the full error message
  function circleRadius(cosRadius, point) {
    ;(point = cartesian(point)), (point[0] -= cosRadius)
    cartesianNormalizeInPlace(point)
    const radius = acos(-point[1])
    return ((-point[2] < 0 ? -radius : radius) + tau$4 - epsilon$4) % tau$4
  }

  function circle() {
    let center = constant$8([0, 0]),
      radius = constant$8(90),
      precision = constant$8(6),
      // @ts-expect-error TS(7034) FIXME: Variable 'ring' implicitly has type 'any[]' in som... Remove this comment to see the full error message
      ring,
      // @ts-expect-error TS(7034) FIXME: Variable 'rotate' implicitly has type 'any' in som... Remove this comment to see the full error message
      rotate,
      stream = { point: point }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function point(x, y) {
      // @ts-expect-error TS(7005) FIXME: Variable 'rotate' implicitly has an 'any' type.
      ring.push((x = rotate(x, y)))
      ;(x[0] *= degrees$2), (x[1] *= degrees$2)
    }

    function circle() {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      let c = center.apply(this, arguments),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        r = radius.apply(this, arguments) * radians$1,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        p = precision.apply(this, arguments) * radians$1
      ring = []
      // @ts-expect-error TS(2339) FIXME: Property 'invert' does not exist on type '{ (x: an... Remove this comment to see the full error message
      rotate = rotateRadians(-c[0] * radians$1, -c[1] * radians$1, 0).invert
      // @ts-expect-error TS(2554) FIXME: Expected 6 arguments, but got 4.
      circleStream(stream, r, p, 1)
      // @ts-expect-error TS(7005) FIXME: Variable 'ring' implicitly has an 'any[]' type.
      c = { type: 'Polygon', coordinates: [ring] }
      ring = rotate = null
      return c
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    circle.center = function (_) {
      return arguments.length ? ((center = typeof _ === 'function' ? _ : constant$8([+_[0], +_[1]])), circle) : center
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    circle.radius = function (_) {
      return arguments.length ? ((radius = typeof _ === 'function' ? _ : constant$8(+_)), circle) : radius
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    circle.precision = function (_) {
      return arguments.length ? ((precision = typeof _ === 'function' ? _ : constant$8(+_)), circle) : precision
    }

    return circle
  }

  function clipBuffer() {
    // @ts-expect-error TS(7034) FIXME: Variable 'lines' implicitly has type 'any[]' in so... Remove this comment to see the full error message
    let lines = [],
      line
    return {
      // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
      point: function (x, y, m) {
        line.push([x, y, m])
      },
      lineStart: function () {
        lines.push((line = []))
      },
      lineEnd: noop$2,
      rejoin: function () {
        // @ts-expect-error TS(7005) FIXME: Variable 'lines' implicitly has an 'any[]' type.
        if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()))
      },
      result: function () {
        // @ts-expect-error TS(7005) FIXME: Variable 'lines' implicitly has an 'any[]' type.
        const result = lines
        lines = []
        line = null
        return result
      },
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function pointEqual(a, b) {
    return abs$2(a[0] - b[0]) < epsilon$4 && abs$2(a[1] - b[1]) < epsilon$4
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'point' implicitly has an 'any' type.
  function Intersection(point, points, other, entry) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.x = point
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.z = points
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.o = other // another intersection
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.e = entry // is an entry?
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.v = false // visited
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.n = this.p = null // next & previous
  }

  // A generalized polygon clipping algorithm: given a polygon that has been cut
  // into its visible line segments, and rejoins the segments by interpolating
  // along the clip edge.
  // @ts-expect-error TS(7006) FIXME: Parameter 'segments' implicitly has an 'any' type.
  function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {
    // @ts-expect-error TS(7034) FIXME: Variable 'subject' implicitly has type 'any[]' in ... Remove this comment to see the full error message
    let subject = [],
      // @ts-expect-error TS(7034) FIXME: Variable 'clip' implicitly has type 'any[]' in som... Remove this comment to see the full error message
      clip = [],
      i,
      n

    // @ts-expect-error TS(7006) FIXME: Parameter 'segment' implicitly has an 'any' type.
    segments.forEach(function (segment) {
      if ((n = segment.length - 1) <= 0) return
      let n,
        p0 = segment[0],
        p1 = segment[n],
        x

      if (pointEqual(p0, p1)) {
        if (!p0[2] && !p1[2]) {
          stream.lineStart()
          for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1])
          stream.lineEnd()
          return
        }
        // handle degenerate cases by moving the point
        p1[0] += 2 * epsilon$4
      }

      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      subject.push((x = new Intersection(p0, segment, null, true)))
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      clip.push((x.o = new Intersection(p0, null, x, false)))
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      subject.push((x = new Intersection(p1, segment, null, false)))
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      clip.push((x.o = new Intersection(p1, null, x, true)))
    })

    if (!subject.length) return

    // @ts-expect-error TS(7005) FIXME: Variable 'clip' implicitly has an 'any[]' type.
    clip.sort(compareIntersection)
    // @ts-expect-error TS(7005) FIXME: Variable 'subject' implicitly has an 'any[]' type.
    link$1(subject)
    // @ts-expect-error TS(7005) FIXME: Variable 'clip' implicitly has an 'any[]' type.
    link$1(clip)

    for (i = 0, n = clip.length; i < n; ++i) {
      // @ts-expect-error TS(7005) FIXME: Variable 'clip' implicitly has an 'any[]' type.
      clip[i].e = startInside = !startInside
    }

    // @ts-expect-error TS(7005) FIXME: Variable 'subject' implicitly has an 'any[]' type.
    let start = subject[0],
      points,
      point

    while (1) {
      // Find first unvisited intersection.
      let current = start,
        isSubject = true
      while (current.v) if ((current = current.n) === start) return
      points = current.z
      stream.lineStart()
      do {
        current.v = current.o.v = true
        if (current.e) {
          if (isSubject) {
            for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1])
          } else {
            interpolate(current.x, current.n.x, 1, stream)
          }
          current = current.n
        } else {
          if (isSubject) {
            points = current.p.z
            for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1])
          } else {
            interpolate(current.x, current.p.x, -1, stream)
          }
          current = current.p
        }
        current = current.o
        points = current.z
        isSubject = !isSubject
      } while (!current.v)
      stream.lineEnd()
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'array' implicitly has an 'any' type.
  function link$1(array) {
    if (!(n = array.length)) return
    let n,
      i = 0,
      a = array[0],
      b
    while (++i < n) {
      a.n = b = array[i]
      b.p = a
      a = b
    }
    a.n = b = array[0]
    b.p = a
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'point' implicitly has an 'any' type.
  function longitude(point) {
    if (abs$2(point[0]) <= pi$3) return point[0]
    else return sign(point[0]) * (((abs$2(point[0]) + pi$3) % tau$4) - pi$3)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'polygon' implicitly has an 'any' type.
  function polygonContains(polygon, point) {
    let lambda = longitude(point),
      phi = point[1],
      sinPhi = sin$1(phi),
      normal = [sin$1(lambda), -cos$1(lambda), 0],
      angle = 0,
      winding = 0

    const sum = new Adder()

    if (sinPhi === 1) phi = halfPi$2 + epsilon$4
    else if (sinPhi === -1) phi = -halfPi$2 - epsilon$4

    for (let i = 0, n = polygon.length; i < n; ++i) {
      if (!(m = (ring = polygon[i]).length)) continue
      var ring,
        m,
        point0 = ring[m - 1],
        lambda0 = longitude(point0),
        phi0 = point0[1] / 2 + quarterPi,
        sinPhi0 = sin$1(phi0),
        cosPhi0 = cos$1(phi0)

      for (let j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
        var point1 = ring[j],
          lambda1 = longitude(point1),
          phi1 = point1[1] / 2 + quarterPi,
          sinPhi1 = sin$1(phi1),
          cosPhi1 = cos$1(phi1),
          delta = lambda1 - lambda0,
          sign = delta >= 0 ? 1 : -1,
          absDelta = sign * delta,
          antimeridian = absDelta > pi$3,
          k = sinPhi0 * sinPhi1

        sum.add(atan2(k * sign * sin$1(absDelta), cosPhi0 * cosPhi1 + k * cos$1(absDelta)))
        angle += antimeridian ? delta + sign * tau$4 : delta

        // Are the longitudes either side of the point’s meridian (lambda),
        // and are the latitudes smaller than the parallel (phi)?
        // @ts-expect-error TS(2447) FIXME: The '^' operator is not allowed for boolean types.... Remove this comment to see the full error message
        if (antimeridian ^ (lambda0 >= lambda) ^ (lambda1 >= lambda)) {
          const arc = cartesianCross(cartesian(point0), cartesian(point1))
          cartesianNormalizeInPlace(arc)
          const intersection = cartesianCross(normal, arc)
          cartesianNormalizeInPlace(intersection)
          // @ts-expect-error TS(2447) FIXME: The '^' operator is not allowed for boolean types.... Remove this comment to see the full error message
          const phiArc = (antimeridian ^ (delta >= 0) ? -1 : 1) * asin(intersection[2])
          if (phi > phiArc || (phi === phiArc && (arc[0] || arc[1]))) {
            // @ts-expect-error TS(2447) FIXME: The '^' operator is not allowed for boolean types.... Remove this comment to see the full error message
            winding += antimeridian ^ (delta >= 0) ? 1 : -1
          }
        }
      }
    }

    // First, determine whether the South pole is inside or outside:
    //
    // It is inside if:
    // * the polygon winds around it in a clockwise direction.
    // * the polygon does not (cumulatively) wind around it, but has a negative
    //   (counter-clockwise) area.
    //
    // Second, count the (signed) number of times a segment crosses a lambda
    // from the point to the South pole.  If it is zero, then the point is the
    // same side as the South pole.

    // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
    return (angle < -epsilon$4 || (angle < epsilon$4 && sum < -epsilon2$1)) ^ (winding & 1)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'pointVisible' implicitly has an 'any' t... Remove this comment to see the full error message
  function clip(pointVisible, clipLine, interpolate, start) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'sink' implicitly has an 'any' type.
    return function (sink) {
      let line = clipLine(sink),
        ringBuffer = clipBuffer(),
        ringSink = clipLine(ringBuffer),
        polygonStarted = false,
        // @ts-expect-error TS(7034) FIXME: Variable 'polygon' implicitly has type 'any' in so... Remove this comment to see the full error message
        polygon,
        // @ts-expect-error TS(7034) FIXME: Variable 'segments' implicitly has type 'any' in s... Remove this comment to see the full error message
        segments,
        // @ts-expect-error TS(7034) FIXME: Variable 'ring' implicitly has type 'any' in some ... Remove this comment to see the full error message
        ring

      var clip = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function () {
          clip.point = pointRing
          clip.lineStart = ringStart
          clip.lineEnd = ringEnd
          segments = []
          polygon = []
        },
        polygonEnd: function () {
          clip.point = point
          clip.lineStart = lineStart
          clip.lineEnd = lineEnd
          // @ts-expect-error TS(7005) FIXME: Variable 'segments' implicitly has an 'any' type.
          segments = merge(segments)
          // @ts-expect-error TS(7005) FIXME: Variable 'polygon' implicitly has an 'any' type.
          const startInside = polygonContains(polygon, start)
          if (segments.length) {
            if (!polygonStarted) sink.polygonStart(), (polygonStarted = true)
            clipRejoin(segments, compareIntersection, startInside, interpolate, sink)
          } else if (startInside) {
            if (!polygonStarted) sink.polygonStart(), (polygonStarted = true)
            sink.lineStart()
            interpolate(null, null, 1, sink)
            sink.lineEnd()
          }
          if (polygonStarted) sink.polygonEnd(), (polygonStarted = false)
          segments = polygon = null
        },
        sphere: function () {
          sink.polygonStart()
          sink.lineStart()
          interpolate(null, null, 1, sink)
          sink.lineEnd()
          sink.polygonEnd()
        },
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
      function point(lambda, phi) {
        if (pointVisible(lambda, phi)) sink.point(lambda, phi)
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
      function pointLine(lambda, phi) {
        line.point(lambda, phi)
      }

      function lineStart() {
        clip.point = pointLine
        line.lineStart()
      }

      function lineEnd() {
        clip.point = point
        line.lineEnd()
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
      function pointRing(lambda, phi) {
        ring.push([lambda, phi])
        ringSink.point(lambda, phi)
      }

      function ringStart() {
        ringSink.lineStart()
        ring = []
      }

      function ringEnd() {
        // @ts-expect-error TS(7005) FIXME: Variable 'ring' implicitly has an 'any' type.
        pointRing(ring[0][0], ring[0][1])
        ringSink.lineEnd()

        let clean = ringSink.clean(),
          ringSegments = ringBuffer.result(),
          i,
          n = ringSegments.length,
          m,
          segment,
          point

        // @ts-expect-error TS(7005) FIXME: Variable 'ring' implicitly has an 'any' type.
        ring.pop()
        // @ts-expect-error TS(7005) FIXME: Variable 'ring' implicitly has an 'any' type.
        polygon.push(ring)
        ring = null

        if (!n) return

        // No intersections.
        if (clean & 1) {
          segment = ringSegments[0]
          if ((m = segment.length - 1) > 0) {
            if (!polygonStarted) sink.polygonStart(), (polygonStarted = true)
            sink.lineStart()
            for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1])
            sink.lineEnd()
          }
          return
        }

        // Rejoin connected segments.
        // TODO reuse ringBuffer.rejoin()?
        if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()))

        segments.push(ringSegments.filter(validSegment))
      }

      return clip
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'segment' implicitly has an 'any' type.
  function validSegment(segment) {
    return segment.length > 1
  }

  // Intersections are sorted along the clip edge. For both antimeridian cutting
  // and circle clipping, the same comparison is used.
  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function compareIntersection(a, b) {
    return (
      ((a = a.x)[0] < 0 ? a[1] - halfPi$2 - epsilon$4 : halfPi$2 - a[1]) -
      ((b = b.x)[0] < 0 ? b[1] - halfPi$2 - epsilon$4 : halfPi$2 - b[1])
    )
  }

  const clipAntimeridian = clip(
    function () {
      return true
    },
    clipAntimeridianLine,
    clipAntimeridianInterpolate,
    [-pi$3, -halfPi$2]
  )

  // Takes a line and cuts into visible segments. Return values: 0 - there were
  // intersections or the line was empty; 1 - no intersections; 2 - there were
  // intersections, and the first and last segments should be rejoined.
  // @ts-expect-error TS(7006) FIXME: Parameter 'stream' implicitly has an 'any' type.
  function clipAntimeridianLine(stream) {
    let lambda0 = NaN,
      phi0 = NaN,
      sign0 = NaN,
      // @ts-expect-error TS(7034) FIXME: Variable 'clean' implicitly has type 'any' in some... Remove this comment to see the full error message
      clean // no intersections

    return {
      lineStart: function () {
        stream.lineStart()
        clean = 1
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'lambda1' implicitly has an 'any' type.
      point: function (lambda1, phi1) {
        const sign1 = lambda1 > 0 ? pi$3 : -pi$3,
          delta = abs$2(lambda1 - lambda0)
        if (abs$2(delta - pi$3) < epsilon$4) {
          // line crosses a pole
          stream.point(lambda0, (phi0 = (phi0 + phi1) / 2 > 0 ? halfPi$2 : -halfPi$2))
          stream.point(sign0, phi0)
          stream.lineEnd()
          stream.lineStart()
          stream.point(sign1, phi0)
          stream.point(lambda1, phi0)
          clean = 0
        } else if (sign0 !== sign1 && delta >= pi$3) {
          // line crosses antimeridian
          if (abs$2(lambda0 - sign0) < epsilon$4) lambda0 -= sign0 * epsilon$4 // handle degeneracies
          if (abs$2(lambda1 - sign1) < epsilon$4) lambda1 -= sign1 * epsilon$4
          phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1)
          stream.point(sign0, phi0)
          stream.lineEnd()
          stream.lineStart()
          stream.point(sign1, phi0)
          clean = 0
        }
        stream.point((lambda0 = lambda1), (phi0 = phi1))
        sign0 = sign1
      },
      lineEnd: function () {
        stream.lineEnd()
        lambda0 = phi0 = NaN
      },
      clean: function () {
        // @ts-expect-error TS(7005) FIXME: Variable 'clean' implicitly has an 'any' type.
        return 2 - clean // if intersections, rejoin first and last segments
      },
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda0' implicitly has an 'any' type.
  function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
    let cosPhi0,
      cosPhi1,
      sinLambda0Lambda1 = sin$1(lambda0 - lambda1)
    return abs$2(sinLambda0Lambda1) > epsilon$4
      ? atan(
          (sin$1(phi0) * (cosPhi1 = cos$1(phi1)) * sin$1(lambda1) -
            sin$1(phi1) * (cosPhi0 = cos$1(phi0)) * sin$1(lambda0)) /
            (cosPhi0 * cosPhi1 * sinLambda0Lambda1)
        )
      : (phi0 + phi1) / 2
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'from' implicitly has an 'any' type.
  function clipAntimeridianInterpolate(from, to, direction, stream) {
    let phi
    if (from == null) {
      phi = direction * halfPi$2
      stream.point(-pi$3, phi)
      stream.point(0, phi)
      stream.point(pi$3, phi)
      stream.point(pi$3, 0)
      stream.point(pi$3, -phi)
      stream.point(0, -phi)
      stream.point(-pi$3, -phi)
      stream.point(-pi$3, 0)
      stream.point(-pi$3, phi)
    } else if (abs$2(from[0] - to[0]) > epsilon$4) {
      const lambda = from[0] < to[0] ? pi$3 : -pi$3
      phi = (direction * lambda) / 2
      stream.point(-lambda, phi)
      stream.point(0, phi)
      stream.point(lambda, phi)
    } else {
      stream.point(to[0], to[1])
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'radius' implicitly has an 'any' type.
  function clipCircle(radius) {
    const cr = cos$1(radius),
      delta = 6 * radians$1,
      smallRadius = cr > 0,
      notHemisphere = abs$2(cr) > epsilon$4 // TODO optimise for this common case

    // @ts-expect-error TS(7006) FIXME: Parameter 'from' implicitly has an 'any' type.
    function interpolate(from, to, direction, stream) {
      circleStream(stream, radius, delta, direction, from, to)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
    function visible(lambda, phi) {
      return cos$1(lambda) * cos$1(phi) > cr
    }

    // Takes a line and cuts into visible segments. Return values used for polygon
    // clipping: 0 - there were intersections or the line was empty; 1 - no
    // intersections 2 - there were intersections, and the first and last segments
    // should be rejoined.
    // @ts-expect-error TS(7006) FIXME: Parameter 'stream' implicitly has an 'any' type.
    function clipLine(stream) {
      // @ts-expect-error TS(7034) FIXME: Variable 'point0' implicitly has type 'any' in som... Remove this comment to see the full error message
      let point0, // previous point
        // @ts-expect-error TS(7034) FIXME: Variable 'c0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        c0, // code for previous point
        // @ts-expect-error TS(7034) FIXME: Variable 'v0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        v0, // visibility of previous point
        // @ts-expect-error TS(7034) FIXME: Variable 'v00' implicitly has type 'any' in some l... Remove this comment to see the full error message
        v00, // visibility of first point
        // @ts-expect-error TS(7034) FIXME: Variable 'clean' implicitly has type 'any' in some... Remove this comment to see the full error message
        clean // no intersections
      return {
        lineStart: function () {
          v00 = v0 = false
          clean = 1
        },
        // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
        point: function (lambda, phi) {
          let point1 = [lambda, phi],
            point2,
            v = visible(lambda, phi),
            c = smallRadius ? (v ? 0 : code(lambda, phi)) : v ? code(lambda + (lambda < 0 ? pi$3 : -pi$3), phi) : 0
          // @ts-expect-error TS(7005) FIXME: Variable 'point0' implicitly has an 'any' type.
          if (!point0 && (v00 = v0 = v)) stream.lineStart()
          // @ts-expect-error TS(7005) FIXME: Variable 'v0' implicitly has an 'any' type.
          if (v !== v0) {
            // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
            point2 = intersect(point0, point1)
            // @ts-expect-error TS(7005) FIXME: Variable 'point0' implicitly has an 'any' type.
            if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) point1[2] = 1
          }
          // @ts-expect-error TS(7005) FIXME: Variable 'v0' implicitly has an 'any' type.
          if (v !== v0) {
            clean = 0
            if (v) {
              // outside going in
              stream.lineStart()
              // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
              point2 = intersect(point1, point0)
              stream.point(point2[0], point2[1])
            } else {
              // inside going out
              // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
              point2 = intersect(point0, point1)
              stream.point(point2[0], point2[1], 2)
              stream.lineEnd()
            }
            point0 = point2
            // @ts-expect-error TS(7005) FIXME: Variable 'point0' implicitly has an 'any' type.
          } else if (notHemisphere && point0 && smallRadius ^ v) {
            let t
            // If the codes for two points are different, or are both zero,
            // and there this segment intersects with the small circle.
            // @ts-expect-error TS(7005) FIXME: Variable 'c0' implicitly has an 'any' type.
            if (!(c & c0) && (t = intersect(point1, point0, true))) {
              clean = 0
              if (smallRadius) {
                stream.lineStart()
                stream.point(t[0][0], t[0][1])
                stream.point(t[1][0], t[1][1])
                stream.lineEnd()
              } else {
                stream.point(t[1][0], t[1][1])
                stream.lineEnd()
                stream.lineStart()
                stream.point(t[0][0], t[0][1], 3)
              }
            }
          }
          // @ts-expect-error TS(7005) FIXME: Variable 'point0' implicitly has an 'any' type.
          if (v && (!point0 || !pointEqual(point0, point1))) {
            stream.point(point1[0], point1[1])
          }
          ;(point0 = point1), (v0 = v), (c0 = c)
        },
        lineEnd: function () {
          // @ts-expect-error TS(7005) FIXME: Variable 'v0' implicitly has an 'any' type.
          if (v0) stream.lineEnd()
          point0 = null
        },
        // Rejoin first and last segments if there were intersections and the first
        // and last points were visible.
        clean: function () {
          // @ts-expect-error TS(7005) FIXME: Variable 'clean' implicitly has an 'any' type.
          return clean | ((v00 && v0) << 1)
        },
      }
    }

    // Intersects the great circle between a and b with the clip circle.
    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    function intersect(a, b, two) {
      const pa = cartesian(a),
        pb = cartesian(b)

      // We have two planes, n1.p = d1 and n2.p = d2.
      // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
      const n1 = [1, 0, 0], // normal
        n2 = cartesianCross(pa, pb),
        n2n2 = cartesianDot(n2, n2),
        n1n2 = n2[0], // cartesianDot(n1, n2),
        determinant = n2n2 - n1n2 * n1n2

      // Two polar points.
      if (!determinant) return !two && a

      const c1 = (cr * n2n2) / determinant,
        c2 = (-cr * n1n2) / determinant,
        n1xn2 = cartesianCross(n1, n2),
        A = cartesianScale(n1, c1),
        B = cartesianScale(n2, c2)
      cartesianAddInPlace(A, B)

      // Solve |p(t)|^2 = 1.
      const u = n1xn2,
        w = cartesianDot(A, u),
        uu = cartesianDot(u, u),
        t2 = w * w - uu * (cartesianDot(A, A) - 1)

      if (t2 < 0) return

      let t = sqrt(t2),
        q = cartesianScale(u, (-w - t) / uu)
      cartesianAddInPlace(q, A)
      q = spherical(q)

      if (!two) return q

      // Two intersection points.
      let lambda0 = a[0],
        lambda1 = b[0],
        phi0 = a[1],
        phi1 = b[1],
        z

      if (lambda1 < lambda0) (z = lambda0), (lambda0 = lambda1), (lambda1 = z)

      const delta = lambda1 - lambda0,
        polar = abs$2(delta - pi$3) < epsilon$4,
        meridian = polar || delta < epsilon$4

      if (!polar && phi1 < phi0) (z = phi0), (phi0 = phi1), (phi1 = z)

      // Check that the first point is between a and b.
      if (
        meridian
          ? polar
            ? // @ts-expect-error TS(2447) FIXME: The '^' operator is not allowed for boolean types.... Remove this comment to see the full error message
              (phi0 + phi1 > 0) ^ (q[1] < (abs$2(q[0] - lambda0) < epsilon$4 ? phi0 : phi1))
            : phi0 <= q[1] && q[1] <= phi1
          : // @ts-expect-error TS(2447) FIXME: The '^' operator is not allowed for boolean types.... Remove this comment to see the full error message
            (delta > pi$3) ^ (lambda0 <= q[0] && q[0] <= lambda1)
      ) {
        const q1 = cartesianScale(u, (-w + t) / uu)
        cartesianAddInPlace(q1, A)
        return [q, spherical(q1)]
      }
    }

    // Generates a 4-bit vector representing the location of a point relative to
    // the small circle's bounding box.
    // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
    function code(lambda, phi) {
      let r = smallRadius ? radius : pi$3 - radius,
        code = 0
      if (lambda < -r) code |= 1 // left
      else if (lambda > r) code |= 2 // right
      if (phi < -r) code |= 4 // below
      else if (phi > r) code |= 8 // above
      return code
    }

    return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi$3, radius - pi$3])
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function clipLine(a, b, x0, y0, x1, y1) {
    let ax = a[0],
      ay = a[1],
      bx = b[0],
      by = b[1],
      t0 = 0,
      t1 = 1,
      dx = bx - ax,
      dy = by - ay,
      r

    r = x0 - ax
    if (!dx && r > 0) return
    r /= dx
    if (dx < 0) {
      if (r < t0) return
      if (r < t1) t1 = r
    } else if (dx > 0) {
      if (r > t1) return
      if (r > t0) t0 = r
    }

    r = x1 - ax
    if (!dx && r < 0) return
    r /= dx
    if (dx < 0) {
      if (r > t1) return
      if (r > t0) t0 = r
    } else if (dx > 0) {
      if (r < t0) return
      if (r < t1) t1 = r
    }

    r = y0 - ay
    if (!dy && r > 0) return
    r /= dy
    if (dy < 0) {
      if (r < t0) return
      if (r < t1) t1 = r
    } else if (dy > 0) {
      if (r > t1) return
      if (r > t0) t0 = r
    }

    r = y1 - ay
    if (!dy && r < 0) return
    r /= dy
    if (dy < 0) {
      if (r > t1) return
      if (r > t0) t0 = r
    } else if (dy > 0) {
      if (r < t0) return
      if (r < t1) t1 = r
    }

    if (t0 > 0) (a[0] = ax + t0 * dx), (a[1] = ay + t0 * dy)
    if (t1 < 1) (b[0] = ax + t1 * dx), (b[1] = ay + t1 * dy)
    return true
  }

  const clipMax = 1e9,
    clipMin = -clipMax

  // TODO Use d3-polygon’s polygonContains here for the ring check?
  // TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

  // @ts-expect-error TS(7006) FIXME: Parameter 'x0' implicitly has an 'any' type.
  function clipRectangle(x0, y0, x1, y1) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function visible(x, y) {
      return x0 <= x && x <= x1 && y0 <= y && y <= y1
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'from' implicitly has an 'any' type.
    function interpolate(from, to, direction, stream) {
      let a = 0,
        a1 = 0
      if (
        from == null ||
        (a = corner(from, direction)) !== (a1 = corner(to, direction)) ||
        // @ts-expect-error TS(2447) FIXME: The '^' operator is not allowed for boolean types.... Remove this comment to see the full error message
        (comparePoint(from, to) < 0) ^ (direction > 0)
      ) {
        do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0)
        while ((a = (a + direction + 4) % 4) !== a1)
      } else {
        stream.point(to[0], to[1])
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
    function corner(p, direction) {
      return abs$2(p[0] - x0) < epsilon$4
        ? direction > 0
          ? 0
          : 3
        : abs$2(p[0] - x1) < epsilon$4
        ? direction > 0
          ? 2
          : 1
        : abs$2(p[1] - y0) < epsilon$4
        ? direction > 0
          ? 1
          : 0
        : direction > 0
        ? 3
        : 2 // abs(p[1] - y1) < epsilon
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    function compareIntersection(a, b) {
      return comparePoint(a.x, b.x)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    function comparePoint(a, b) {
      const ca = corner(a, 1),
        cb = corner(b, 1)
      return ca !== cb
        ? ca - cb
        : ca === 0
        ? b[1] - a[1]
        : ca === 1
        ? a[0] - b[0]
        : ca === 2
        ? a[1] - b[1]
        : b[0] - a[0]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'stream' implicitly has an 'any' type.
    return function (stream) {
      let activeStream = stream,
        bufferStream = clipBuffer(),
        // @ts-expect-error TS(7034) FIXME: Variable 'segments' implicitly has type 'any' in s... Remove this comment to see the full error message
        segments,
        // @ts-expect-error TS(7034) FIXME: Variable 'polygon' implicitly has type 'any' in so... Remove this comment to see the full error message
        polygon,
        ring,
        // @ts-expect-error TS(7034) FIXME: Variable 'x__' implicitly has type 'any' in some l... Remove this comment to see the full error message
        x__,
        // @ts-expect-error TS(7034) FIXME: Variable 'y__' implicitly has type 'any' in some l... Remove this comment to see the full error message
        y__,
        // @ts-expect-error TS(7034) FIXME: Variable 'v__' implicitly has type 'any' in some l... Remove this comment to see the full error message
        v__, // first point
        // @ts-expect-error TS(7034) FIXME: Variable 'x_' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        x_,
        // @ts-expect-error TS(7034) FIXME: Variable 'y_' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        y_,
        // @ts-expect-error TS(7034) FIXME: Variable 'v_' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        v_, // previous point
        // @ts-expect-error TS(7034) FIXME: Variable 'first' implicitly has type 'any' in some... Remove this comment to see the full error message
        first,
        // @ts-expect-error TS(7034) FIXME: Variable 'clean' implicitly has type 'any' in some... Remove this comment to see the full error message
        clean

      const clipStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: polygonStart,
        polygonEnd: polygonEnd,
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
      function point(x, y) {
        if (visible(x, y)) activeStream.point(x, y)
      }

      function polygonInside() {
        let winding = 0

        // @ts-expect-error TS(7034) FIXME: Variable 'n' implicitly has type 'any' in some loc... Remove this comment to see the full error message
        for (let i = 0, n = polygon.length; i < n; ++i) {
          for (
            // @ts-expect-error TS(7005) FIXME: Variable 'polygon' implicitly has an 'any' type.
            var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1];
            j < m;
            ++j
          ) {
            ;(a0 = b0), (a1 = b1), (point = ring[j]), (b0 = point[0]), (b1 = point[1])
            if (a1 <= y1) {
              if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding
            } else {
              if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding
            }
          }
        }

        return winding
      }

      // Buffer geometry within a polygon and then clip it en masse.
      function polygonStart() {
        ;(activeStream = bufferStream), (segments = []), (polygon = []), (clean = true)
      }

      function polygonEnd() {
        const startInside = polygonInside(),
          // @ts-expect-error TS(7005) FIXME: Variable 'clean' implicitly has an 'any' type.
          cleanInside = clean && startInside,
          // @ts-expect-error TS(7005) FIXME: Variable 'segments' implicitly has an 'any' type.
          visible = (segments = merge(segments)).length
        if (cleanInside || visible) {
          stream.polygonStart()
          if (cleanInside) {
            stream.lineStart()
            interpolate(null, null, 1, stream)
            stream.lineEnd()
          }
          if (visible) {
            clipRejoin(segments, compareIntersection, startInside, interpolate, stream)
          }
          stream.polygonEnd()
        }
        ;(activeStream = stream), (segments = polygon = ring = null)
      }

      function lineStart() {
        clipStream.point = linePoint
        // @ts-expect-error TS(7005) FIXME: Variable 'polygon' implicitly has an 'any' type.
        if (polygon) polygon.push((ring = []))
        first = true
        v_ = false
        x_ = y_ = NaN
      }

      // TODO rather than special-case polygons, simply handle them separately.
      // Ideally, coincident intersection points should be jittered to avoid
      // clipping issues.
      function lineEnd() {
        // @ts-expect-error TS(7005) FIXME: Variable 'segments' implicitly has an 'any' type.
        if (segments) {
          // @ts-expect-error TS(7005) FIXME: Variable 'x__' implicitly has an 'any' type.
          linePoint(x__, y__)
          // @ts-expect-error TS(7005) FIXME: Variable 'v__' implicitly has an 'any' type.
          if (v__ && v_) bufferStream.rejoin()
          segments.push(bufferStream.result())
        }
        clipStream.point = point
        // @ts-expect-error TS(7005) FIXME: Variable 'v_' implicitly has an 'any' type.
        if (v_) activeStream.lineEnd()
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
      function linePoint(x, y) {
        const v = visible(x, y)
        // @ts-expect-error TS(7005) FIXME: Variable 'polygon' implicitly has an 'any' type.
        if (polygon) ring.push([x, y])
        // @ts-expect-error TS(7005) FIXME: Variable 'first' implicitly has an 'any' type.
        if (first) {
          ;(x__ = x), (y__ = y), (v__ = v)
          first = false
          if (v) {
            activeStream.lineStart()
            activeStream.point(x, y)
          }
        } else {
          // @ts-expect-error TS(7005) FIXME: Variable 'v_' implicitly has an 'any' type.
          if (v && v_) activeStream.point(x, y)
          else {
            // @ts-expect-error TS(7005) FIXME: Variable 'x_' implicitly has an 'any' type.
            const a = [
                (x_ = Math.max(clipMin, Math.min(clipMax, x_))),
                (y_ = Math.max(clipMin, Math.min(clipMax, y_))),
              ],
              b = [(x = Math.max(clipMin, Math.min(clipMax, x))), (y = Math.max(clipMin, Math.min(clipMax, y)))]
            if (clipLine(a, b, x0, y0, x1, y1)) {
              // @ts-expect-error TS(7005) FIXME: Variable 'v_' implicitly has an 'any' type.
              if (!v_) {
                activeStream.lineStart()
                activeStream.point(a[0], a[1])
              }
              activeStream.point(b[0], b[1])
              if (!v) activeStream.lineEnd()
              clean = false
            } else if (v) {
              activeStream.lineStart()
              activeStream.point(x, y)
              clean = false
            }
          }
        }
        ;(x_ = x), (y_ = y), (v_ = v)
      }

      return clipStream
    }
  }

  function extent$1() {
    let x0 = 0,
      y0 = 0,
      x1 = 960,
      y1 = 500,
      // @ts-expect-error TS(7034) FIXME: Variable 'cache' implicitly has type 'any' in some... Remove this comment to see the full error message
      cache,
      // @ts-expect-error TS(7034) FIXME: Variable 'cacheStream' implicitly has type 'any' i... Remove this comment to see the full error message
      cacheStream,
      // @ts-expect-error TS(7034) FIXME: Variable 'clip' implicitly has type 'any' in some ... Remove this comment to see the full error message
      clip

    return (clip = {
      // @ts-expect-error TS(7006) FIXME: Parameter 'stream' implicitly has an 'any' type.
      stream: function (stream) {
        // @ts-expect-error TS(7005) FIXME: Variable 'cache' implicitly has an 'any' type.
        return cache && cacheStream === stream ? cache : (cache = clipRectangle(x0, y0, x1, y1)((cacheStream = stream)))
      },
      // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
      extent: function (_) {
        return arguments.length
          ? // @ts-expect-error TS(7005) FIXME: Variable 'clip' implicitly has an 'any' type.
            ((x0 = +_[0][0]), (y0 = +_[0][1]), (x1 = +_[1][0]), (y1 = +_[1][1]), (cache = cacheStream = null), clip)
          : [
              [x0, y0],
              [x1, y1],
            ]
      },
    })
  }

  // @ts-expect-error TS(7034) FIXME: Variable 'lengthSum' implicitly has type 'any' in ... Remove this comment to see the full error message
  let lengthSum,
    // @ts-expect-error TS(7034) FIXME: Variable 'lambda0$2' implicitly has type 'any' in ... Remove this comment to see the full error message
    lambda0$2,
    // @ts-expect-error TS(7034) FIXME: Variable 'sinPhi0$1' implicitly has type 'any' in ... Remove this comment to see the full error message
    sinPhi0$1,
    // @ts-expect-error TS(7034) FIXME: Variable 'cosPhi0$1' implicitly has type 'any' in ... Remove this comment to see the full error message
    cosPhi0$1

  const lengthStream = {
    sphere: noop$2,
    point: noop$2,
    lineStart: lengthLineStart,
    lineEnd: noop$2,
    polygonStart: noop$2,
    polygonEnd: noop$2,
  }

  function lengthLineStart() {
    // @ts-expect-error TS(2322) FIXME: Type '(lambda: any, phi: any) => void' is not assi... Remove this comment to see the full error message
    lengthStream.point = lengthPointFirst
    lengthStream.lineEnd = lengthLineEnd
  }

  function lengthLineEnd() {
    lengthStream.point = lengthStream.lineEnd = noop$2
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function lengthPointFirst(lambda, phi) {
    ;(lambda *= radians$1), (phi *= radians$1)
    ;(lambda0$2 = lambda), (sinPhi0$1 = sin$1(phi)), (cosPhi0$1 = cos$1(phi))
    // @ts-expect-error TS(2322) FIXME: Type '(lambda: any, phi: any) => void' is not assi... Remove this comment to see the full error message
    lengthStream.point = lengthPoint
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function lengthPoint(lambda, phi) {
    ;(lambda *= radians$1), (phi *= radians$1)
    const sinPhi = sin$1(phi),
      cosPhi = cos$1(phi),
      // @ts-expect-error TS(7005) FIXME: Variable 'lambda0$2' implicitly has an 'any' type.
      delta = abs$2(lambda - lambda0$2),
      cosDelta = cos$1(delta),
      sinDelta = sin$1(delta),
      x = cosPhi * sinDelta,
      // @ts-expect-error TS(7005) FIXME: Variable 'cosPhi0$1' implicitly has an 'any' type.
      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
      // @ts-expect-error TS(7005) FIXME: Variable 'sinPhi0$1' implicitly has an 'any' type.
      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta
    // @ts-expect-error TS(7005) FIXME: Variable 'lengthSum' implicitly has an 'any' type.
    lengthSum.add(atan2(sqrt(x * x + y * y), z))
    ;(lambda0$2 = lambda), (sinPhi0$1 = sinPhi), (cosPhi0$1 = cosPhi)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
  function length$2(object) {
    lengthSum = new Adder()
    geoStream(object, lengthStream)
    return +lengthSum
  }

  const coordinates = [null, null],
    object$1 = { type: 'LineString', coordinates: coordinates }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function distance(a, b) {
    coordinates[0] = a
    coordinates[1] = b
    return length$2(object$1)
  }

  const containsObjectType = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    Feature: function (object, point) {
      return containsGeometry(object.geometry, point)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    FeatureCollection: function (object, point) {
      let features = object.features,
        i = -1,
        n = features.length
      while (++i < n) if (containsGeometry(features[i].geometry, point)) return true
      return false
    },
  }

  const containsGeometryType = {
    Sphere: function () {
      return true
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    Point: function (object, point) {
      return containsPoint(object.coordinates, point)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    MultiPoint: function (object, point) {
      let coordinates = object.coordinates,
        i = -1,
        n = coordinates.length
      while (++i < n) if (containsPoint(coordinates[i], point)) return true
      return false
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    LineString: function (object, point) {
      return containsLine(object.coordinates, point)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    MultiLineString: function (object, point) {
      let coordinates = object.coordinates,
        i = -1,
        n = coordinates.length
      while (++i < n) if (containsLine(coordinates[i], point)) return true
      return false
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    Polygon: function (object, point) {
      return containsPolygon(object.coordinates, point)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    MultiPolygon: function (object, point) {
      let coordinates = object.coordinates,
        i = -1,
        n = coordinates.length
      while (++i < n) if (containsPolygon(coordinates[i], point)) return true
      return false
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    GeometryCollection: function (object, point) {
      let geometries = object.geometries,
        i = -1,
        n = geometries.length
      while (++i < n) if (containsGeometry(geometries[i], point)) return true
      return false
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'geometry' implicitly has an 'any' type.
  function containsGeometry(geometry, point) {
    return geometry && containsGeometryType.hasOwnProperty(geometry.type)
      ? // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        containsGeometryType[geometry.type](geometry, point)
      : false
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'coordinates' implicitly has an 'any' ty... Remove this comment to see the full error message
  function containsPoint(coordinates, point) {
    return distance(coordinates, point) === 0
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'coordinates' implicitly has an 'any' ty... Remove this comment to see the full error message
  function containsLine(coordinates, point) {
    let ao, bo, ab
    for (let i = 0, n = coordinates.length; i < n; i++) {
      bo = distance(coordinates[i], point)
      if (bo === 0) return true
      if (i > 0) {
        ab = distance(coordinates[i], coordinates[i - 1])
        if (
          ab > 0 &&
          // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
          ao <= ab &&
          bo <= ab &&
          // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
          (ao + bo - ab) * (1 - Math.pow((ao - bo) / ab, 2)) < epsilon2$1 * ab
        )
          return true
      }
      ao = bo
    }
    return false
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'coordinates' implicitly has an 'any' ty... Remove this comment to see the full error message
  function containsPolygon(coordinates, point) {
    return !!polygonContains(coordinates.map(ringRadians), pointRadians(point))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'ring' implicitly has an 'any' type.
  function ringRadians(ring) {
    return (ring = ring.map(pointRadians)), ring.pop(), ring
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'point' implicitly has an 'any' type.
  function pointRadians(point) {
    return [point[0] * radians$1, point[1] * radians$1]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
  function contains$1(object, point) {
    return (
      object && containsObjectType.hasOwnProperty(object.type)
        ? // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
          containsObjectType[object.type]
        : containsGeometry
    )(object, point)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'y0' implicitly has an 'any' type.
  function graticuleX(y0, y1, dy) {
    const y = sequence(y0, y1 - epsilon$4, dy).concat(y1)
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    return function (x) {
      return y.map(function (y) {
        return [x, y]
      })
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x0' implicitly has an 'any' type.
  function graticuleY(x0, x1, dx) {
    const x = sequence(x0, x1 - epsilon$4, dx).concat(x1)
    // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
    return function (y) {
      return x.map(function (x) {
        return [x, y]
      })
    }
  }

  function graticule() {
    // @ts-expect-error TS(7034) FIXME: Variable 'x1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    let x1,
      // @ts-expect-error TS(7034) FIXME: Variable 'x0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      x0,
      // @ts-expect-error TS(7034) FIXME: Variable 'X1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      X1,
      // @ts-expect-error TS(7034) FIXME: Variable 'X0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      X0,
      // @ts-expect-error TS(7034) FIXME: Variable 'y1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      y1,
      // @ts-expect-error TS(7034) FIXME: Variable 'y0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      y0,
      // @ts-expect-error TS(7034) FIXME: Variable 'Y1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      Y1,
      // @ts-expect-error TS(7034) FIXME: Variable 'Y0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      Y0,
      dx = 10,
      dy = dx,
      DX = 90,
      DY = 360,
      // @ts-expect-error TS(7034) FIXME: Variable 'x' implicitly has type 'any' in some loc... Remove this comment to see the full error message
      x,
      // @ts-expect-error TS(7034) FIXME: Variable 'y' implicitly has type 'any' in some loc... Remove this comment to see the full error message
      y,
      // @ts-expect-error TS(7034) FIXME: Variable 'X' implicitly has type 'any' in some loc... Remove this comment to see the full error message
      X,
      // @ts-expect-error TS(7034) FIXME: Variable 'Y' implicitly has type 'any' in some loc... Remove this comment to see the full error message
      Y,
      precision = 2.5

    function graticule() {
      return { type: 'MultiLineString', coordinates: lines() }
    }

    function lines() {
      return (
        // @ts-expect-error TS(7005) FIXME: Variable 'X0' implicitly has an 'any' type.
        sequence(ceil(X0 / DX) * DX, X1, DX)
          // @ts-expect-error TS(7005) FIXME: Variable 'X' implicitly has an 'any' type.
          .map(X)
          // @ts-expect-error TS(7005) FIXME: Variable 'Y0' implicitly has an 'any' type.
          .concat(sequence(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
          .concat(
            // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
            sequence(ceil(x0 / dx) * dx, x1, dx)
              .filter(function (x) {
                return abs$2(x % DX) > epsilon$4
              })
              // @ts-expect-error TS(7005) FIXME: Variable 'x' implicitly has an 'any' type.
              .map(x)
          )
          .concat(
            // @ts-expect-error TS(7005) FIXME: Variable 'y0' implicitly has an 'any' type.
            sequence(ceil(y0 / dy) * dy, y1, dy)
              .filter(function (y) {
                return abs$2(y % DY) > epsilon$4
              })
              // @ts-expect-error TS(7005) FIXME: Variable 'y' implicitly has an 'any' type.
              .map(y)
          )
      )
    }

    graticule.lines = function () {
      return lines().map(function (coordinates) {
        return { type: 'LineString', coordinates: coordinates }
      })
    }

    graticule.outline = function () {
      return {
        type: 'Polygon',
        coordinates: [
          // @ts-expect-error TS(7005) FIXME: Variable 'X' implicitly has an 'any' type.
          X(X0).concat(
            // @ts-expect-error TS(7005) FIXME: Variable 'Y' implicitly has an 'any' type.
            Y(Y1).slice(1),
            // @ts-expect-error TS(7005) FIXME: Variable 'X' implicitly has an 'any' type.
            X(X1).reverse().slice(1),
            // @ts-expect-error TS(7005) FIXME: Variable 'Y' implicitly has an 'any' type.
            Y(Y0).reverse().slice(1)
          ),
        ],
      }
    }

    // @ts-expect-error TS(7023) FIXME: 'extent' implicitly has return type 'any' because ... Remove this comment to see the full error message
    graticule.extent = function (_) {
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
      if (!arguments.length) return graticule.extentMinor()
      // @ts-expect-error TS(2339) FIXME: Property 'extentMinor' does not exist on type 'num... Remove this comment to see the full error message
      return graticule.extentMajor(_).extentMinor(_)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    graticule.extentMajor = function (_) {
      if (!arguments.length)
        return [
          // @ts-expect-error TS(7005) FIXME: Variable 'X0' implicitly has an 'any' type.
          [X0, Y0],
          // @ts-expect-error TS(7005) FIXME: Variable 'X1' implicitly has an 'any' type.
          [X1, Y1],
        ]
      ;(X0 = +_[0][0]), (X1 = +_[1][0])
      ;(Y0 = +_[0][1]), (Y1 = +_[1][1])
      if (X0 > X1) (_ = X0), (X0 = X1), (X1 = _)
      if (Y0 > Y1) (_ = Y0), (Y0 = Y1), (Y1 = _)
      return graticule.precision(precision)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    graticule.extentMinor = function (_) {
      if (!arguments.length)
        return [
          // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
          [x0, y0],
          // @ts-expect-error TS(7005) FIXME: Variable 'x1' implicitly has an 'any' type.
          [x1, y1],
        ]
      ;(x0 = +_[0][0]), (x1 = +_[1][0])
      ;(y0 = +_[0][1]), (y1 = +_[1][1])
      if (x0 > x1) (_ = x0), (x0 = x1), (x1 = _)
      if (y0 > y1) (_ = y0), (y0 = y1), (y1 = _)
      return graticule.precision(precision)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    graticule.step = function (_) {
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
      if (!arguments.length) return graticule.stepMinor()
      // @ts-expect-error TS(2339) FIXME: Property 'stepMinor' does not exist on type 'numbe... Remove this comment to see the full error message
      return graticule.stepMajor(_).stepMinor(_)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    graticule.stepMajor = function (_) {
      if (!arguments.length) return [DX, DY]
      ;(DX = +_[0]), (DY = +_[1])
      return graticule
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    graticule.stepMinor = function (_) {
      if (!arguments.length) return [dx, dy]
      ;(dx = +_[0]), (dy = +_[1])
      return graticule
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    graticule.precision = function (_) {
      if (!arguments.length) return precision
      precision = +_
      // @ts-expect-error TS(7005) FIXME: Variable 'y0' implicitly has an 'any' type.
      x = graticuleX(y0, y1, 90)
      // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
      y = graticuleY(x0, x1, precision)
      // @ts-expect-error TS(7005) FIXME: Variable 'Y0' implicitly has an 'any' type.
      X = graticuleX(Y0, Y1, 90)
      // @ts-expect-error TS(7005) FIXME: Variable 'X0' implicitly has an 'any' type.
      Y = graticuleY(X0, X1, precision)
      return graticule
    }

    return (
      graticule
        .extentMajor([
          [-180, -90 + epsilon$4],
          [180, 90 - epsilon$4],
        ])
        // @ts-expect-error TS(2339) FIXME: Property 'extentMinor' does not exist on type 'num... Remove this comment to see the full error message
        .extentMinor([
          [-180, -80 - epsilon$4],
          [180, 80 + epsilon$4],
        ])
    )
  }

  function graticule10() {
    return graticule()()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function interpolate$2(a, b) {
    const x0 = a[0] * radians$1,
      y0 = a[1] * radians$1,
      x1 = b[0] * radians$1,
      y1 = b[1] * radians$1,
      cy0 = cos$1(y0),
      sy0 = sin$1(y0),
      cy1 = cos$1(y1),
      sy1 = sin$1(y1),
      kx0 = cy0 * cos$1(x0),
      ky0 = cy0 * sin$1(x0),
      kx1 = cy1 * cos$1(x1),
      ky1 = cy1 * sin$1(x1),
      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
      k = sin$1(d)

    const interpolate = d
      ? // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
        function (t) {
          const B = sin$1((t *= d)) / k,
            A = sin$1(d - t) / k,
            x = A * kx0 + B * kx1,
            y = A * ky0 + B * ky1,
            z = A * sy0 + B * sy1
          return [atan2(y, x) * degrees$2, atan2(z, sqrt(x * x + y * y)) * degrees$2]
        }
      : function () {
          return [x0 * degrees$2, y0 * degrees$2]
        }

    // @ts-expect-error TS(2339) FIXME: Property 'distance' does not exist on type '(t: an... Remove this comment to see the full error message
    interpolate.distance = d

    return interpolate
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  const identity$4 = x => x

  let areaSum$1 = new Adder(),
    areaRingSum$1 = new Adder(),
    // @ts-expect-error TS(7034) FIXME: Variable 'x00' implicitly has type 'any' in some l... Remove this comment to see the full error message
    x00,
    // @ts-expect-error TS(7034) FIXME: Variable 'y00' implicitly has type 'any' in some l... Remove this comment to see the full error message
    y00,
    // @ts-expect-error TS(7034) FIXME: Variable 'x0$1' implicitly has type 'any' in some ... Remove this comment to see the full error message
    x0$1,
    // @ts-expect-error TS(7034) FIXME: Variable 'y0$1' implicitly has type 'any' in some ... Remove this comment to see the full error message
    y0$1

  var areaStream$1 = {
    point: noop$2,
    lineStart: noop$2,
    lineEnd: noop$2,
    polygonStart: function () {
      areaStream$1.lineStart = areaRingStart$1
      areaStream$1.lineEnd = areaRingEnd$1
    },
    polygonEnd: function () {
      areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop$2
      // @ts-expect-error TS(2345) FIXME: Argument of type 'Adder' is not assignable to para... Remove this comment to see the full error message
      areaSum$1.add(abs$2(areaRingSum$1))
      areaRingSum$1 = new Adder()
    },
    result: function () {
      // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
      const area = areaSum$1 / 2
      areaSum$1 = new Adder()
      return area
    },
  }

  function areaRingStart$1() {
    // @ts-expect-error TS(2322) FIXME: Type '(x: any, y: any) => void' is not assignable ... Remove this comment to see the full error message
    areaStream$1.point = areaPointFirst$1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function areaPointFirst$1(x, y) {
    // @ts-expect-error TS(2322) FIXME: Type '(x: any, y: any) => void' is not assignable ... Remove this comment to see the full error message
    areaStream$1.point = areaPoint$1
    ;(x00 = x0$1 = x), (y00 = y0$1 = y)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function areaPoint$1(x, y) {
    // @ts-expect-error TS(7005) FIXME: Variable 'y0$1' implicitly has an 'any' type.
    areaRingSum$1.add(y0$1 * x - x0$1 * y)
    ;(x0$1 = x), (y0$1 = y)
  }

  function areaRingEnd$1() {
    // @ts-expect-error TS(7005) FIXME: Variable 'x00' implicitly has an 'any' type.
    areaPoint$1(x00, y00)
  }

  let x0$2 = Infinity,
    y0$2 = x0$2,
    x1 = -x0$2,
    y1 = x1

  const boundsStream$1 = {
    point: boundsPoint$1,
    lineStart: noop$2,
    lineEnd: noop$2,
    polygonStart: noop$2,
    polygonEnd: noop$2,
    result: function () {
      const bounds = [
        [x0$2, y0$2],
        [x1, y1],
      ]
      x1 = y1 = -(y0$2 = x0$2 = Infinity)
      return bounds
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function boundsPoint$1(x, y) {
    if (x < x0$2) x0$2 = x
    if (x > x1) x1 = x
    if (y < y0$2) y0$2 = y
    if (y > y1) y1 = y
  }

  // TODO Enforce positive area for exterior, negative area for interior?

  let X0$1 = 0,
    Y0$1 = 0,
    Z0$1 = 0,
    X1$1 = 0,
    Y1$1 = 0,
    Z1$1 = 0,
    X2$1 = 0,
    Y2$1 = 0,
    Z2$1 = 0,
    // @ts-expect-error TS(7034) FIXME: Variable 'x00$1' implicitly has type 'any' in some... Remove this comment to see the full error message
    x00$1,
    // @ts-expect-error TS(7034) FIXME: Variable 'y00$1' implicitly has type 'any' in some... Remove this comment to see the full error message
    y00$1,
    // @ts-expect-error TS(7034) FIXME: Variable 'x0$3' implicitly has type 'any' in some ... Remove this comment to see the full error message
    x0$3,
    // @ts-expect-error TS(7034) FIXME: Variable 'y0$3' implicitly has type 'any' in some ... Remove this comment to see the full error message
    y0$3

  var centroidStream$1 = {
    point: centroidPoint$1,
    lineStart: centroidLineStart$1,
    lineEnd: centroidLineEnd$1,
    polygonStart: function () {
      centroidStream$1.lineStart = centroidRingStart$1
      centroidStream$1.lineEnd = centroidRingEnd$1
    },
    polygonEnd: function () {
      centroidStream$1.point = centroidPoint$1
      centroidStream$1.lineStart = centroidLineStart$1
      centroidStream$1.lineEnd = centroidLineEnd$1
    },
    result: function () {
      const centroid = Z2$1
        ? [X2$1 / Z2$1, Y2$1 / Z2$1]
        : Z1$1
        ? [X1$1 / Z1$1, Y1$1 / Z1$1]
        : Z0$1
        ? [X0$1 / Z0$1, Y0$1 / Z0$1]
        : [NaN, NaN]
      X0$1 = Y0$1 = Z0$1 = X1$1 = Y1$1 = Z1$1 = X2$1 = Y2$1 = Z2$1 = 0
      return centroid
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function centroidPoint$1(x, y) {
    X0$1 += x
    Y0$1 += y
    ++Z0$1
  }

  function centroidLineStart$1() {
    centroidStream$1.point = centroidPointFirstLine
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function centroidPointFirstLine(x, y) {
    centroidStream$1.point = centroidPointLine
    centroidPoint$1((x0$3 = x), (y0$3 = y))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function centroidPointLine(x, y) {
    // @ts-expect-error TS(7005) FIXME: Variable 'x0$3' implicitly has an 'any' type.
    const dx = x - x0$3,
      // @ts-expect-error TS(7005) FIXME: Variable 'y0$3' implicitly has an 'any' type.
      dy = y - y0$3,
      z = sqrt(dx * dx + dy * dy)
    // @ts-expect-error TS(7005) FIXME: Variable 'x0$3' implicitly has an 'any' type.
    X1$1 += (z * (x0$3 + x)) / 2
    // @ts-expect-error TS(7005) FIXME: Variable 'y0$3' implicitly has an 'any' type.
    Y1$1 += (z * (y0$3 + y)) / 2
    Z1$1 += z
    centroidPoint$1((x0$3 = x), (y0$3 = y))
  }

  function centroidLineEnd$1() {
    centroidStream$1.point = centroidPoint$1
  }

  function centroidRingStart$1() {
    centroidStream$1.point = centroidPointFirstRing
  }

  function centroidRingEnd$1() {
    // @ts-expect-error TS(7005) FIXME: Variable 'x00$1' implicitly has an 'any' type.
    centroidPointRing(x00$1, y00$1)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function centroidPointFirstRing(x, y) {
    centroidStream$1.point = centroidPointRing
    centroidPoint$1((x00$1 = x0$3 = x), (y00$1 = y0$3 = y))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function centroidPointRing(x, y) {
    // @ts-expect-error TS(7005) FIXME: Variable 'x0$3' implicitly has an 'any' type.
    let dx = x - x0$3,
      // @ts-expect-error TS(7005) FIXME: Variable 'y0$3' implicitly has an 'any' type.
      dy = y - y0$3,
      z = sqrt(dx * dx + dy * dy)

    // @ts-expect-error TS(7005) FIXME: Variable 'x0$3' implicitly has an 'any' type.
    X1$1 += (z * (x0$3 + x)) / 2
    // @ts-expect-error TS(7005) FIXME: Variable 'y0$3' implicitly has an 'any' type.
    Y1$1 += (z * (y0$3 + y)) / 2
    Z1$1 += z

    // @ts-expect-error TS(7005) FIXME: Variable 'y0$3' implicitly has an 'any' type.
    z = y0$3 * x - x0$3 * y
    // @ts-expect-error TS(7005) FIXME: Variable 'x0$3' implicitly has an 'any' type.
    X2$1 += z * (x0$3 + x)
    // @ts-expect-error TS(7005) FIXME: Variable 'y0$3' implicitly has an 'any' type.
    Y2$1 += z * (y0$3 + y)
    Z2$1 += z * 3
    centroidPoint$1((x0$3 = x), (y0$3 = y))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function PathContext(context) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
  }

  PathContext.prototype = {
    _radius: 4.5,
    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    pointRadius: function (_) {
      return (this._radius = _), this
    },
    polygonStart: function () {
      this._line = 0
    },
    polygonEnd: function () {
      this._line = NaN
    },
    lineStart: function () {
      this._point = 0
    },
    lineEnd: function () {
      if (this._line === 0) this._context.closePath()
      this._point = NaN
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      switch (this._point) {
        case 0: {
          this._context.moveTo(x, y)
          this._point = 1
          break
        }
        case 1: {
          this._context.lineTo(x, y)
          break
        }
        default: {
          this._context.moveTo(x + this._radius, y)
          this._context.arc(x, y, this._radius, 0, tau$4)
          break
        }
      }
    },
    result: noop$2,
  }

  let lengthSum$1 = new Adder(),
    // @ts-expect-error TS(7034) FIXME: Variable 'lengthRing' implicitly has type 'any' in... Remove this comment to see the full error message
    lengthRing,
    // @ts-expect-error TS(7034) FIXME: Variable 'x00$2' implicitly has type 'any' in some... Remove this comment to see the full error message
    x00$2,
    // @ts-expect-error TS(7034) FIXME: Variable 'y00$2' implicitly has type 'any' in some... Remove this comment to see the full error message
    y00$2,
    // @ts-expect-error TS(7034) FIXME: Variable 'x0$4' implicitly has type 'any' in some ... Remove this comment to see the full error message
    x0$4,
    // @ts-expect-error TS(7034) FIXME: Variable 'y0$4' implicitly has type 'any' in some ... Remove this comment to see the full error message
    y0$4

  var lengthStream$1 = {
    point: noop$2,
    lineStart: function () {
      // @ts-expect-error TS(2322) FIXME: Type '(x: any, y: any) => void' is not assignable ... Remove this comment to see the full error message
      lengthStream$1.point = lengthPointFirst$1
    },
    lineEnd: function () {
      // @ts-expect-error TS(7005) FIXME: Variable 'lengthRing' implicitly has an 'any' type... Remove this comment to see the full error message
      if (lengthRing) lengthPoint$1(x00$2, y00$2)
      lengthStream$1.point = noop$2
    },
    polygonStart: function () {
      lengthRing = true
    },
    polygonEnd: function () {
      lengthRing = null
    },
    result: function () {
      const length = +lengthSum$1
      lengthSum$1 = new Adder()
      return length
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function lengthPointFirst$1(x, y) {
    // @ts-expect-error TS(2322) FIXME: Type '(x: any, y: any) => void' is not assignable ... Remove this comment to see the full error message
    lengthStream$1.point = lengthPoint$1
    ;(x00$2 = x0$4 = x), (y00$2 = y0$4 = y)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function lengthPoint$1(x, y) {
    // @ts-expect-error TS(7005) FIXME: Variable 'x0$4' implicitly has an 'any' type.
    ;(x0$4 -= x), (y0$4 -= y)
    // @ts-expect-error TS(7005) FIXME: Variable 'x0$4' implicitly has an 'any' type.
    lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4))
    ;(x0$4 = x), (y0$4 = y)
  }

  function PathString() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._string = []
  }

  PathString.prototype = {
    _radius: 4.5,
    _circle: circle$1(4.5),
    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    pointRadius: function (_) {
      if ((_ = +_) !== this._radius) (this._radius = _), (this._circle = null)
      return this
    },
    polygonStart: function () {
      this._line = 0
    },
    polygonEnd: function () {
      this._line = NaN
    },
    lineStart: function () {
      this._point = 0
    },
    lineEnd: function () {
      if (this._line === 0) this._string.push('Z')
      this._point = NaN
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      switch (this._point) {
        case 0: {
          this._string.push('M', x, ',', y)
          this._point = 1
          break
        }
        case 1: {
          this._string.push('L', x, ',', y)
          break
        }
        default: {
          if (this._circle == null) this._circle = circle$1(this._radius)
          this._string.push('M', x, ',', y, this._circle)
          break
        }
      }
    },
    result: function () {
      if (this._string.length) {
        const result = this._string.join('')
        this._string = []
        return result
      } else {
        return null
      }
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'radius' implicitly has an 'any' type.
  function circle$1(radius) {
    return (
      'm0,' +
      radius +
      'a' +
      radius +
      ',' +
      radius +
      ' 0 1,1 0,' +
      -2 * radius +
      'a' +
      radius +
      ',' +
      radius +
      ' 0 1,1 0,' +
      2 * radius +
      'z'
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'projection' implicitly has an 'any' typ... Remove this comment to see the full error message
  function index$2(projection, context) {
    let pointRadius = 4.5,
      // @ts-expect-error TS(7034) FIXME: Variable 'projectionStream' implicitly has type 'a... Remove this comment to see the full error message
      projectionStream,
      // @ts-expect-error TS(7034) FIXME: Variable 'contextStream' implicitly has type 'any'... Remove this comment to see the full error message
      contextStream

    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    function path(object) {
      if (object) {
        // @ts-expect-error TS(7005) FIXME: Variable 'contextStream' implicitly has an 'any' t... Remove this comment to see the full error message
        if (typeof pointRadius === 'function') contextStream.pointRadius(+pointRadius.apply(this, arguments))
        // @ts-expect-error TS(7005) FIXME: Variable 'projectionStream' implicitly has an 'any... Remove this comment to see the full error message
        geoStream(object, projectionStream(contextStream))
      }
      // @ts-expect-error TS(7005) FIXME: Variable 'contextStream' implicitly has an 'any' t... Remove this comment to see the full error message
      return contextStream.result()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    path.area = function (object) {
      // @ts-expect-error TS(7005) FIXME: Variable 'projectionStream' implicitly has an 'any... Remove this comment to see the full error message
      geoStream(object, projectionStream(areaStream$1))
      return areaStream$1.result()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    path.measure = function (object) {
      // @ts-expect-error TS(7005) FIXME: Variable 'projectionStream' implicitly has an 'any... Remove this comment to see the full error message
      geoStream(object, projectionStream(lengthStream$1))
      return lengthStream$1.result()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    path.bounds = function (object) {
      // @ts-expect-error TS(7005) FIXME: Variable 'projectionStream' implicitly has an 'any... Remove this comment to see the full error message
      geoStream(object, projectionStream(boundsStream$1))
      return boundsStream$1.result()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'object' implicitly has an 'any' type.
    path.centroid = function (object) {
      // @ts-expect-error TS(7005) FIXME: Variable 'projectionStream' implicitly has an 'any... Remove this comment to see the full error message
      geoStream(object, projectionStream(centroidStream$1))
      return centroidStream$1.result()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    path.projection = function (_) {
      return arguments.length
        ? ((projectionStream = _ == null ? ((projection = null), identity$4) : (projection = _).stream), path)
        : projection
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    path.context = function (_) {
      if (!arguments.length) return context
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      contextStream = _ == null ? ((context = null), new PathString()) : new PathContext((context = _))
      if (typeof pointRadius !== 'function') contextStream.pointRadius(pointRadius)
      return path
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    path.pointRadius = function (_) {
      if (!arguments.length) return pointRadius
      // @ts-expect-error TS(7005) FIXME: Variable 'contextStream' implicitly has an 'any' t... Remove this comment to see the full error message
      pointRadius = typeof _ === 'function' ? _ : (contextStream.pointRadius(+_), +_)
      return path
    }

    return path.projection(projection).context(context)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'methods' implicitly has an 'any' type.
  function transform(methods) {
    return {
      stream: transformer(methods),
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'methods' implicitly has an 'any' type.
  function transformer(methods) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'stream' implicitly has an 'any' type.
    return function (stream) {
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      const s = new TransformStream()
      for (const key in methods) s[key] = methods[key]
      s.stream = stream
      return s
    }
  }

  function TransformStream() {}

  TransformStream.prototype = {
    constructor: TransformStream,
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      this.stream.point(x, y)
    },
    sphere: function () {
      this.stream.sphere()
    },
    lineStart: function () {
      this.stream.lineStart()
    },
    lineEnd: function () {
      this.stream.lineEnd()
    },
    polygonStart: function () {
      this.stream.polygonStart()
    },
    polygonEnd: function () {
      this.stream.polygonEnd()
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'projection' implicitly has an 'any' typ... Remove this comment to see the full error message
  function fit(projection, fitBounds, object) {
    const clip = projection.clipExtent && projection.clipExtent()
    projection.scale(150).translate([0, 0])
    if (clip != null) projection.clipExtent(null)
    geoStream(object, projection.stream(boundsStream$1))
    fitBounds(boundsStream$1.result())
    if (clip != null) projection.clipExtent(clip)
    return projection
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'projection' implicitly has an 'any' typ... Remove this comment to see the full error message
  function fitExtent(projection, extent, object) {
    return fit(
      projection,
      // @ts-expect-error TS(7006) FIXME: Parameter 'b' implicitly has an 'any' type.
      function (b) {
        const w = extent[1][0] - extent[0][0],
          h = extent[1][1] - extent[0][1],
          k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
          x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
          y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2
        projection.scale(150 * k).translate([x, y])
      },
      object
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'projection' implicitly has an 'any' typ... Remove this comment to see the full error message
  function fitSize(projection, size, object) {
    return fitExtent(projection, [[0, 0], size], object)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'projection' implicitly has an 'any' typ... Remove this comment to see the full error message
  function fitWidth(projection, width, object) {
    return fit(
      projection,
      // @ts-expect-error TS(7006) FIXME: Parameter 'b' implicitly has an 'any' type.
      function (b) {
        const w = +width,
          k = w / (b[1][0] - b[0][0]),
          x = (w - k * (b[1][0] + b[0][0])) / 2,
          y = -k * b[0][1]
        projection.scale(150 * k).translate([x, y])
      },
      object
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'projection' implicitly has an 'any' typ... Remove this comment to see the full error message
  function fitHeight(projection, height, object) {
    return fit(
      projection,
      // @ts-expect-error TS(7006) FIXME: Parameter 'b' implicitly has an 'any' type.
      function (b) {
        const h = +height,
          k = h / (b[1][1] - b[0][1]),
          x = -k * b[0][0],
          y = (h - k * (b[1][1] + b[0][1])) / 2
        projection.scale(150 * k).translate([x, y])
      },
      object
    )
  }

  const maxDepth = 16, // maximum depth of subdivision
    cosMinDistance = cos$1(30 * radians$1) // cos(minimum angular distance)

  // @ts-expect-error TS(7006) FIXME: Parameter 'project' implicitly has an 'any' type.
  function resample(project, delta2) {
    return +delta2 ? resample$1(project, delta2) : resampleNone(project)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'project' implicitly has an 'any' type.
  function resampleNone(project) {
    return transformer({
      // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
      point: function (x, y) {
        x = project(x, y)
        this.stream.point(x[0], x[1])
      },
    })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'project' implicitly has an 'any' type.
  function resample$1(project, delta2) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'x0' implicitly has an 'any' type.
    function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
      const dx = x1 - x0,
        dy = y1 - y0,
        d2 = dx * dx + dy * dy
      if (d2 > 4 * delta2 && depth--) {
        let a = a0 + a1,
          b = b0 + b1,
          c = c0 + c1,
          m = sqrt(a * a + b * b + c * c),
          phi2 = asin((c /= m)),
          lambda2 =
            abs$2(abs$2(c) - 1) < epsilon$4 || abs$2(lambda0 - lambda1) < epsilon$4
              ? (lambda0 + lambda1) / 2
              : atan2(b, a),
          p = project(lambda2, phi2),
          x2 = p[0],
          y2 = p[1],
          dx2 = x2 - x0,
          dy2 = y2 - y0,
          dz = dy * dx2 - dx * dy2
        if (
          (dz * dz) / d2 > delta2 || // perpendicular projected distance
          abs$2((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 || // midpoint close to an end
          a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance
        ) {
          // angular distance
          resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, (a /= m), (b /= m), c, depth, stream)
          stream.point(x2, y2)
          resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream)
        }
      }
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'stream' implicitly has an 'any' type.
    return function (stream) {
      // @ts-expect-error TS(7034) FIXME: Variable 'lambda00' implicitly has type 'any' in s... Remove this comment to see the full error message
      let lambda00,
        // @ts-expect-error TS(7034) FIXME: Variable 'x00' implicitly has type 'any' in some l... Remove this comment to see the full error message
        x00,
        // @ts-expect-error TS(7034) FIXME: Variable 'y00' implicitly has type 'any' in some l... Remove this comment to see the full error message
        y00,
        // @ts-expect-error TS(7034) FIXME: Variable 'a00' implicitly has type 'any' in some l... Remove this comment to see the full error message
        a00,
        // @ts-expect-error TS(7034) FIXME: Variable 'b00' implicitly has type 'any' in some l... Remove this comment to see the full error message
        b00,
        // @ts-expect-error TS(7034) FIXME: Variable 'c00' implicitly has type 'any' in some l... Remove this comment to see the full error message
        c00, // first point
        // @ts-expect-error TS(7034) FIXME: Variable 'lambda0' implicitly has type 'any' in so... Remove this comment to see the full error message
        lambda0,
        // @ts-expect-error TS(7034) FIXME: Variable 'x0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        x0,
        // @ts-expect-error TS(7034) FIXME: Variable 'y0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        y0,
        // @ts-expect-error TS(7034) FIXME: Variable 'a0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        a0,
        // @ts-expect-error TS(7034) FIXME: Variable 'b0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        b0,
        // @ts-expect-error TS(7034) FIXME: Variable 'c0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
        c0 // previous point

      var resampleStream = {
        point: point,
        lineStart: lineStart,
        lineEnd: lineEnd,
        polygonStart: function () {
          stream.polygonStart()
          resampleStream.lineStart = ringStart
        },
        polygonEnd: function () {
          stream.polygonEnd()
          resampleStream.lineStart = lineStart
        },
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
      function point(x, y) {
        x = project(x, y)
        stream.point(x[0], x[1])
      }

      function lineStart() {
        x0 = NaN
        resampleStream.point = linePoint
        stream.lineStart()
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
      function linePoint(lambda, phi) {
        const c = cartesian([lambda, phi]),
          p = project(lambda, phi)
        resampleLineTo(
          // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
          x0,
          // @ts-expect-error TS(7005) FIXME: Variable 'y0' implicitly has an 'any' type.
          y0,
          // @ts-expect-error TS(7005) FIXME: Variable 'lambda0' implicitly has an 'any' type.
          lambda0,
          // @ts-expect-error TS(7005) FIXME: Variable 'a0' implicitly has an 'any' type.
          a0,
          // @ts-expect-error TS(7005) FIXME: Variable 'b0' implicitly has an 'any' type.
          b0,
          // @ts-expect-error TS(7005) FIXME: Variable 'c0' implicitly has an 'any' type.
          c0,
          (x0 = p[0]),
          (y0 = p[1]),
          (lambda0 = lambda),
          (a0 = c[0]),
          (b0 = c[1]),
          (c0 = c[2]),
          maxDepth,
          stream
        )
        stream.point(x0, y0)
      }

      function lineEnd() {
        resampleStream.point = point
        stream.lineEnd()
      }

      function ringStart() {
        lineStart()
        resampleStream.point = ringPoint
        resampleStream.lineEnd = ringEnd
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
      function ringPoint(lambda, phi) {
        // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
        linePoint((lambda00 = lambda), phi), (x00 = x0), (y00 = y0), (a00 = a0), (b00 = b0), (c00 = c0)
        resampleStream.point = linePoint
      }

      function ringEnd() {
        // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream)
        resampleStream.lineEnd = lineEnd
        lineEnd()
      }

      return resampleStream
    }
  }

  const transformRadians = transformer({
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      this.stream.point(x * radians$1, y * radians$1)
    },
  })

  // @ts-expect-error TS(7006) FIXME: Parameter 'rotate' implicitly has an 'any' type.
  function transformRotate(rotate) {
    return transformer({
      // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
      point: function (x, y) {
        const r = rotate(x, y)
        return this.stream.point(r[0], r[1])
      },
    })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
  function scaleTranslate(k, dx, dy, sx, sy) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function transform(x, y) {
      x *= sx
      y *= sy
      return [dx + k * x, dy - k * y]
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    transform.invert = function (x, y) {
      return [((x - dx) / k) * sx, ((dy - y) / k) * sy]
    }
    return transform
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
  function scaleTranslateRotate(k, dx, dy, sx, sy, alpha) {
    if (!alpha) return scaleTranslate(k, dx, dy, sx, sy)
    const cosAlpha = cos$1(alpha),
      sinAlpha = sin$1(alpha),
      a = cosAlpha * k,
      b = sinAlpha * k,
      ai = cosAlpha / k,
      bi = sinAlpha / k,
      ci = (sinAlpha * dy - cosAlpha * dx) / k,
      fi = (sinAlpha * dx + cosAlpha * dy) / k
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function transform(x, y) {
      x *= sx
      y *= sy
      return [a * x - b * y + dx, dy - b * x - a * y]
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    transform.invert = function (x, y) {
      return [sx * (ai * x - bi * y + ci), sy * (fi - bi * x - ai * y)]
    }
    return transform
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'project' implicitly has an 'any' type.
  function projection(project) {
    return projectionMutator(function () {
      return project
    })()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'projectAt' implicitly has an 'any' type... Remove this comment to see the full error message
  function projectionMutator(projectAt) {
    // @ts-expect-error TS(7034) FIXME: Variable 'project' implicitly has type 'any' in so... Remove this comment to see the full error message
    let project,
      k = 150, // scale
      x = 480,
      y = 250, // translate
      lambda = 0,
      phi = 0, // center
      deltaLambda = 0,
      deltaPhi = 0,
      deltaGamma = 0,
      // @ts-expect-error TS(7034) FIXME: Variable 'rotate' implicitly has type 'any' in som... Remove this comment to see the full error message
      rotate, // pre-rotate
      alpha = 0, // post-rotate angle
      sx = 1, // reflectX
      sy = 1, // reflectX
      // @ts-expect-error TS(7034) FIXME: Variable 'theta' implicitly has type 'any' in some... Remove this comment to see the full error message
      theta = null,
      preclip = clipAntimeridian, // pre-clip angle
      // @ts-expect-error TS(7034) FIXME: Variable 'x0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      x0 = null,
      // @ts-expect-error TS(7034) FIXME: Variable 'y0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      y0,
      // @ts-expect-error TS(7034) FIXME: Variable 'x1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      x1,
      // @ts-expect-error TS(7034) FIXME: Variable 'y1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      y1,
      postclip = identity$4, // post-clip extent
      delta2 = 0.5, // precision
      // @ts-expect-error TS(7034) FIXME: Variable 'projectResample' implicitly has type 'an... Remove this comment to see the full error message
      projectResample,
      // @ts-expect-error TS(7034) FIXME: Variable 'projectTransform' implicitly has type 'a... Remove this comment to see the full error message
      projectTransform,
      // @ts-expect-error TS(7034) FIXME: Variable 'projectRotateTransform' implicitly has t... Remove this comment to see the full error message
      projectRotateTransform,
      // @ts-expect-error TS(7034) FIXME: Variable 'cache' implicitly has type 'any' in some... Remove this comment to see the full error message
      cache,
      // @ts-expect-error TS(7034) FIXME: Variable 'cacheStream' implicitly has type 'any' i... Remove this comment to see the full error message
      cacheStream

    // @ts-expect-error TS(7006) FIXME: Parameter 'point' implicitly has an 'any' type.
    function projection(point) {
      // @ts-expect-error TS(7005) FIXME: Variable 'projectRotateTransform' implicitly has a... Remove this comment to see the full error message
      return projectRotateTransform(point[0] * radians$1, point[1] * radians$1)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'point' implicitly has an 'any' type.
    function invert(point) {
      // @ts-expect-error TS(7005) FIXME: Variable 'projectRotateTransform' implicitly has a... Remove this comment to see the full error message
      point = projectRotateTransform.invert(point[0], point[1])
      return point && [point[0] * degrees$2, point[1] * degrees$2]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'stream' implicitly has an 'any' type.
    projection.stream = function (stream) {
      // @ts-expect-error TS(7005) FIXME: Variable 'cache' implicitly has an 'any' type.
      return cache && cacheStream === stream
        ? // @ts-expect-error TS(7005) FIXME: Variable 'cache' implicitly has an 'any' type.
          cache
        : (cache = transformRadians(
            // @ts-expect-error TS(7005) FIXME: Variable 'rotate' implicitly has an 'any' type.
            transformRotate(rotate)(preclip(projectResample(postclip((cacheStream = stream)))))
          ))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.preclip = function (_) {
      return arguments.length ? ((preclip = _), (theta = undefined), reset()) : preclip
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.postclip = function (_) {
      return arguments.length ? ((postclip = _), (x0 = y0 = x1 = y1 = null), reset()) : postclip
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.clipAngle = function (_) {
      return arguments.length
        ? ((preclip = +_ ? clipCircle((theta = _ * radians$1)) : ((theta = null), clipAntimeridian)), reset())
        : // @ts-expect-error TS(7005) FIXME: Variable 'theta' implicitly has an 'any' type.
          theta * degrees$2
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.clipExtent = function (_) {
      return arguments.length
        ? ((postclip =
            _ == null
              ? ((x0 = y0 = x1 = y1 = null), identity$4)
              : clipRectangle((x0 = +_[0][0]), (y0 = +_[0][1]), (x1 = +_[1][0]), (y1 = +_[1][1]))),
          reset())
        : // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
        x0 == null
        ? null
        : [
            // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
            [x0, y0],
            // @ts-expect-error TS(7005) FIXME: Variable 'x1' implicitly has an 'any' type.
            [x1, y1],
          ]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.scale = function (_) {
      return arguments.length ? ((k = +_), recenter()) : k
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.translate = function (_) {
      return arguments.length ? ((x = +_[0]), (y = +_[1]), recenter()) : [x, y]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.center = function (_) {
      return arguments.length
        ? ((lambda = (_[0] % 360) * radians$1), (phi = (_[1] % 360) * radians$1), recenter())
        : [lambda * degrees$2, phi * degrees$2]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.rotate = function (_) {
      return arguments.length
        ? ((deltaLambda = (_[0] % 360) * radians$1),
          (deltaPhi = (_[1] % 360) * radians$1),
          (deltaGamma = _.length > 2 ? (_[2] % 360) * radians$1 : 0),
          recenter())
        : [deltaLambda * degrees$2, deltaPhi * degrees$2, deltaGamma * degrees$2]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.angle = function (_) {
      return arguments.length ? ((alpha = (_ % 360) * radians$1), recenter()) : alpha * degrees$2
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.reflectX = function (_) {
      return arguments.length ? ((sx = _ ? -1 : 1), recenter()) : sx < 0
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.reflectY = function (_) {
      return arguments.length ? ((sy = _ ? -1 : 1), recenter()) : sy < 0
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.precision = function (_) {
      return arguments.length
        ? // @ts-expect-error TS(7005) FIXME: Variable 'projectTransform' implicitly has an 'any... Remove this comment to see the full error message
          ((projectResample = resample(projectTransform, (delta2 = _ * _))), reset())
        : sqrt(delta2)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'extent' implicitly has an 'any' type.
    projection.fitExtent = function (extent, object) {
      return fitExtent(projection, extent, object)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'size' implicitly has an 'any' type.
    projection.fitSize = function (size, object) {
      return fitSize(projection, size, object)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'width' implicitly has an 'any' type.
    projection.fitWidth = function (width, object) {
      return fitWidth(projection, width, object)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'height' implicitly has an 'any' type.
    projection.fitHeight = function (height, object) {
      return fitHeight(projection, height, object)
    }

    function recenter() {
      // @ts-expect-error TS(7005) FIXME: Variable 'project' implicitly has an 'any' type.
      const center = scaleTranslateRotate(k, 0, 0, sx, sy, alpha).apply(null, project(lambda, phi)),
        transform = scaleTranslateRotate(k, x - center[0], y - center[1], sx, sy, alpha)
      rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma)
      // @ts-expect-error TS(7005) FIXME: Variable 'project' implicitly has an 'any' type.
      projectTransform = compose(project, transform)
      projectRotateTransform = compose(rotate, projectTransform)
      projectResample = resample(projectTransform, delta2)
      return reset()
    }

    function reset() {
      cache = cacheStream = null
      return projection
    }

    return function () {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      project = projectAt.apply(this, arguments)
      // @ts-expect-error TS(2339) FIXME: Property 'invert' does not exist on type '{ (point... Remove this comment to see the full error message
      projection.invert = project.invert && invert
      return recenter()
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'projectAt' implicitly has an 'any' type... Remove this comment to see the full error message
  function conicProjection(projectAt) {
    let phi0 = 0,
      phi1 = pi$3 / 3,
      m = projectionMutator(projectAt),
      // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 2.
      p = m(phi0, phi1)

    // @ts-expect-error TS(2339) FIXME: Property 'parallels' does not exist on type '{ (po... Remove this comment to see the full error message
    p.parallels = function (_) {
      return arguments.length
        ? // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 2.
          m((phi0 = _[0] * radians$1), (phi1 = _[1] * radians$1))
        : [phi0 * degrees$2, phi1 * degrees$2]
    }

    return p
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'phi0' implicitly has an 'any' type.
  function cylindricalEqualAreaRaw(phi0) {
    const cosPhi0 = cos$1(phi0)

    // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
    function forward(lambda, phi) {
      return [lambda * cosPhi0, sin$1(phi) / cosPhi0]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    forward.invert = function (x, y) {
      return [x / cosPhi0, asin(y * cosPhi0)]
    }

    return forward
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'y0' implicitly has an 'any' type.
  function conicEqualAreaRaw(y0, y1) {
    const sy0 = sin$1(y0),
      n = (sy0 + sin$1(y1)) / 2

    // Are the parallels symmetrical around the Equator?
    if (abs$2(n) < epsilon$4) return cylindricalEqualAreaRaw(y0)

    const c = 1 + sy0 * (2 * n - sy0),
      r0 = sqrt(c) / n

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function project(x, y) {
      const r = sqrt(c - 2 * n * sin$1(y)) / n
      return [r * sin$1((x *= n)), r0 - r * cos$1(x)]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    project.invert = function (x, y) {
      let r0y = r0 - y,
        l = atan2(x, abs$2(r0y)) * sign(r0y)
      if (r0y * n < 0) l -= pi$3 * sign(x) * sign(r0y)
      return [l / n, asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))]
    }

    return project
  }

  function conicEqualArea() {
    return (
      conicProjection(conicEqualAreaRaw)
        .scale(155.424)
        // @ts-expect-error TS(2339) FIXME: Property 'center' does not exist on type 'number |... Remove this comment to see the full error message
        .center([0, 33.6442])
    )
  }

  function albers() {
    return conicEqualArea()
      .parallels([29.5, 45.5])
      .scale(1070)
      .translate([480, 250])
      .rotate([96, 0])
      .center([-0.6, 38.7])
  }

  // The projections must have mutually exclusive clip regions on the sphere,
  // as this will avoid emitting interleaving lines and polygons.
  // @ts-expect-error TS(7006) FIXME: Parameter 'streams' implicitly has an 'any' type.
  function multiplex(streams) {
    const n = streams.length
    return {
      // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
      point: function (x, y) {
        let i = -1
        while (++i < n) streams[i].point(x, y)
      },
      sphere: function () {
        let i = -1
        while (++i < n) streams[i].sphere()
      },
      lineStart: function () {
        let i = -1
        while (++i < n) streams[i].lineStart()
      },
      lineEnd: function () {
        let i = -1
        while (++i < n) streams[i].lineEnd()
      },
      polygonStart: function () {
        let i = -1
        while (++i < n) streams[i].polygonStart()
      },
      polygonEnd: function () {
        let i = -1
        while (++i < n) streams[i].polygonEnd()
      },
    }
  }

  // A composite projection for the United States, configured by default for
  // 960×500. The projection also works quite well at 960×600 if you change the
  // scale to 1285 and adjust the translate accordingly. The set of standard
  // parallels for each region comes from USGS, which is published here:
  // http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
  function albersUsa() {
    // @ts-expect-error TS(7034) FIXME: Variable 'cache' implicitly has type 'any' in some... Remove this comment to see the full error message
    let cache,
      // @ts-expect-error TS(7034) FIXME: Variable 'cacheStream' implicitly has type 'any' i... Remove this comment to see the full error message
      cacheStream,
      lower48 = albers(),
      // @ts-expect-error TS(7034) FIXME: Variable 'lower48Point' implicitly has type 'any' ... Remove this comment to see the full error message
      lower48Point,
      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]),
      // @ts-expect-error TS(7034) FIXME: Variable 'alaskaPoint' implicitly has type 'any' i... Remove this comment to see the full error message
      alaskaPoint, // EPSG:3338
      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]),
      // @ts-expect-error TS(7034) FIXME: Variable 'hawaiiPoint' implicitly has type 'any' i... Remove this comment to see the full error message
      hawaiiPoint, // ESRI:102007
      point,
      pointStream = {
        // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
        point: function (x, y) {
          point = [x, y]
        },
      }

    // @ts-expect-error TS(7006) FIXME: Parameter 'coordinates' implicitly has an 'any' ty... Remove this comment to see the full error message
    function albersUsa(coordinates) {
      const x = coordinates[0],
        y = coordinates[1]
      return (
        (point = null),
        // @ts-expect-error TS(7005) FIXME: Variable 'lower48Point' implicitly has an 'any' ty... Remove this comment to see the full error message
        (lower48Point.point(x, y), point) ||
          // @ts-expect-error TS(7005) FIXME: Variable 'alaskaPoint' implicitly has an 'any' typ... Remove this comment to see the full error message
          (alaskaPoint.point(x, y), point) ||
          // @ts-expect-error TS(7005) FIXME: Variable 'hawaiiPoint' implicitly has an 'any' typ... Remove this comment to see the full error message
          (hawaiiPoint.point(x, y), point)
      )
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'coordinates' implicitly has an 'any' ty... Remove this comment to see the full error message
    albersUsa.invert = function (coordinates) {
      const k = lower48.scale(),
        t = lower48.translate(),
        x = (coordinates[0] - t[0]) / k,
        y = (coordinates[1] - t[1]) / k
      return (
        y >= 0.12 && y < 0.234 && x >= -0.425 && x < -0.214
          ? alaska
          : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115
          ? hawaii
          : lower48
      ).invert(coordinates)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'stream' implicitly has an 'any' type.
    albersUsa.stream = function (stream) {
      // @ts-expect-error TS(7005) FIXME: Variable 'cache' implicitly has an 'any' type.
      return cache && cacheStream === stream
        ? // @ts-expect-error TS(7005) FIXME: Variable 'cache' implicitly has an 'any' type.
          cache
        : (cache = multiplex([lower48.stream((cacheStream = stream)), alaska.stream(stream), hawaii.stream(stream)]))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    albersUsa.precision = function (_) {
      if (!arguments.length) return lower48.precision()
      lower48.precision(_), alaska.precision(_), hawaii.precision(_)
      return reset()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    albersUsa.scale = function (_) {
      if (!arguments.length) return lower48.scale()
      lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_)
      return albersUsa.translate(lower48.translate())
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    albersUsa.translate = function (_) {
      if (!arguments.length) return lower48.translate()
      const k = lower48.scale(),
        x = +_[0],
        y = +_[1]

      lower48Point = lower48
        .translate(_)
        .clipExtent([
          [x - 0.455 * k, y - 0.238 * k],
          [x + 0.455 * k, y + 0.238 * k],
        ])
        .stream(pointStream)

      alaskaPoint = alaska
        .translate([x - 0.307 * k, y + 0.201 * k])
        .clipExtent([
          [x - 0.425 * k + epsilon$4, y + 0.12 * k + epsilon$4],
          [x - 0.214 * k - epsilon$4, y + 0.234 * k - epsilon$4],
        ])
        .stream(pointStream)

      hawaiiPoint = hawaii
        .translate([x - 0.205 * k, y + 0.212 * k])
        .clipExtent([
          [x - 0.214 * k + epsilon$4, y + 0.166 * k + epsilon$4],
          [x - 0.115 * k - epsilon$4, y + 0.234 * k - epsilon$4],
        ])
        .stream(pointStream)

      return reset()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'extent' implicitly has an 'any' type.
    albersUsa.fitExtent = function (extent, object) {
      return fitExtent(albersUsa, extent, object)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'size' implicitly has an 'any' type.
    albersUsa.fitSize = function (size, object) {
      return fitSize(albersUsa, size, object)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'width' implicitly has an 'any' type.
    albersUsa.fitWidth = function (width, object) {
      return fitWidth(albersUsa, width, object)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'height' implicitly has an 'any' type.
    albersUsa.fitHeight = function (height, object) {
      return fitHeight(albersUsa, height, object)
    }

    function reset() {
      cache = cacheStream = null
      return albersUsa
    }

    return albersUsa.scale(1070)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'scale' implicitly has an 'any' type.
  function azimuthalRaw(scale) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    return function (x, y) {
      const cx = cos$1(x),
        cy = cos$1(y),
        k = scale(cx * cy)
      if (k === Infinity) return [2, 0]
      return [k * cy * sin$1(x), k * sin$1(y)]
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'angle' implicitly has an 'any' type.
  function azimuthalInvert(angle) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    return function (x, y) {
      const z = sqrt(x * x + y * y),
        c = angle(z),
        sc = sin$1(c),
        cc = cos$1(c)
      return [atan2(x * sc, z * cc), asin(z && (y * sc) / z)]
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'cxcy' implicitly has an 'any' type.
  const azimuthalEqualAreaRaw = azimuthalRaw(function (cxcy) {
    return sqrt(2 / (1 + cxcy))
  })

  // @ts-expect-error TS(2339) FIXME: Property 'invert' does not exist on type '(x: any,... Remove this comment to see the full error message
  azimuthalEqualAreaRaw.invert = azimuthalInvert(function (z) {
    return 2 * asin(z / 2)
  })

  function azimuthalEqualArea() {
    return (
      projection(azimuthalEqualAreaRaw)
        .scale(124.75)
        // @ts-expect-error TS(2339) FIXME: Property 'clipAngle' does not exist on type 'numbe... Remove this comment to see the full error message
        .clipAngle(180 - 1e-3)
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'c' implicitly has an 'any' type.
  const azimuthalEquidistantRaw = azimuthalRaw(function (c) {
    return (c = acos(c)) && c / sin$1(c)
  })

  // @ts-expect-error TS(2339) FIXME: Property 'invert' does not exist on type '(x: any,... Remove this comment to see the full error message
  azimuthalEquidistantRaw.invert = azimuthalInvert(function (z) {
    return z
  })

  function azimuthalEquidistant() {
    return (
      projection(azimuthalEquidistantRaw)
        .scale(79.4188)
        // @ts-expect-error TS(2339) FIXME: Property 'clipAngle' does not exist on type 'numbe... Remove this comment to see the full error message
        .clipAngle(180 - 1e-3)
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function mercatorRaw(lambda, phi) {
    return [lambda, log(tan((halfPi$2 + phi) / 2))]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  mercatorRaw.invert = function (x, y) {
    return [x, 2 * atan(exp(y)) - halfPi$2]
  }

  function mercator() {
    return (
      // @ts-expect-error TS(2531) FIXME: Object is possibly 'null'.
      mercatorProjection(mercatorRaw)
        // @ts-expect-error TS(2339) FIXME: Property 'scale' does not exist on type 'any[][] |... Remove this comment to see the full error message
        .scale(961 / tau$4)
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'project' implicitly has an 'any' type.
  function mercatorProjection(project) {
    let m = projection(project),
      center = m.center,
      scale = m.scale,
      translate = m.translate,
      clipExtent = m.clipExtent,
      // @ts-expect-error TS(7034) FIXME: Variable 'x0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      x0 = null,
      // @ts-expect-error TS(7034) FIXME: Variable 'y0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      y0,
      // @ts-expect-error TS(7034) FIXME: Variable 'x1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      x1,
      // @ts-expect-error TS(7034) FIXME: Variable 'y1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      y1 // clip extent

    // @ts-expect-error TS(2322) FIXME: Type '(_: any) => number | any[][] | { (point: any... Remove this comment to see the full error message
    m.scale = function (_) {
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
      return arguments.length ? (scale(_), reclip()) : scale()
    }

    // @ts-expect-error TS(2322) FIXME: Type '(_: any) => number[] | any[][] | { (point: a... Remove this comment to see the full error message
    m.translate = function (_) {
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
      return arguments.length ? (translate(_), reclip()) : translate()
    }

    // @ts-expect-error TS(2322) FIXME: Type '(_: any) => number[] | any[][] | { (point: a... Remove this comment to see the full error message
    m.center = function (_) {
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
      return arguments.length ? (center(_), reclip()) : center()
    }

    m.clipExtent = function (_) {
      return arguments.length
        ? (_ == null
            ? (x0 = y0 = x1 = y1 = null)
            : ((x0 = +_[0][0]), (y0 = +_[0][1]), (x1 = +_[1][0]), (y1 = +_[1][1])),
          reclip())
        : // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
        x0 == null
        ? null
        : [
            // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
            [x0, y0],
            // @ts-expect-error TS(7005) FIXME: Variable 'x1' implicitly has an 'any' type.
            [x1, y1],
          ]
    }

    function reclip() {
      // @ts-expect-error TS(2363) FIXME: The right-hand side of an arithmetic operation mus... Remove this comment to see the full error message
      const k = pi$3 * scale(),
        // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
        t = m(rotation(m.rotate()).invert([0, 0]))
      return clipExtent(
        // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
        x0 == null
          ? [
              [t[0] - k, t[1] - k],
              [t[0] + k, t[1] + k],
            ]
          : project === mercatorRaw
          ? [
              // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
              [Math.max(t[0] - k, x0), y0],
              // @ts-expect-error TS(7005) FIXME: Variable 'x1' implicitly has an 'any' type.
              [Math.min(t[0] + k, x1), y1],
            ]
          : [
              // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
              [x0, Math.max(t[1] - k, y0)],
              // @ts-expect-error TS(7005) FIXME: Variable 'x1' implicitly has an 'any' type.
              [x1, Math.min(t[1] + k, y1)],
            ]
      )
    }

    return reclip()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
  function tany(y) {
    return tan((halfPi$2 + y) / 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'y0' implicitly has an 'any' type.
  function conicConformalRaw(y0, y1) {
    const cy0 = cos$1(y0),
      n = y0 === y1 ? sin$1(y0) : log(cy0 / cos$1(y1)) / log(tany(y1) / tany(y0)),
      f = (cy0 * pow$1(tany(y0), n)) / n

    if (!n) return mercatorRaw

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function project(x, y) {
      if (f > 0) {
        if (y < -halfPi$2 + epsilon$4) y = -halfPi$2 + epsilon$4
      } else {
        if (y > halfPi$2 - epsilon$4) y = halfPi$2 - epsilon$4
      }
      const r = f / pow$1(tany(y), n)
      return [r * sin$1(n * x), f - r * cos$1(n * x)]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    project.invert = function (x, y) {
      let fy = f - y,
        r = sign(n) * sqrt(x * x + fy * fy),
        l = atan2(x, abs$2(fy)) * sign(fy)
      if (fy * n < 0) l -= pi$3 * sign(x) * sign(fy)
      return [l / n, 2 * atan(pow$1(f / r, 1 / n)) - halfPi$2]
    }

    return project
  }

  function conicConformal() {
    return (
      conicProjection(conicConformalRaw)
        .scale(109.5)
        // @ts-expect-error TS(2339) FIXME: Property 'parallels' does not exist on type 'numbe... Remove this comment to see the full error message
        .parallels([30, 30])
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function equirectangularRaw(lambda, phi) {
    return [lambda, phi]
  }

  equirectangularRaw.invert = equirectangularRaw

  function equirectangular() {
    return projection(equirectangularRaw).scale(152.63)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'y0' implicitly has an 'any' type.
  function conicEquidistantRaw(y0, y1) {
    const cy0 = cos$1(y0),
      n = y0 === y1 ? sin$1(y0) : (cy0 - cos$1(y1)) / (y1 - y0),
      g = cy0 / n + y0

    if (abs$2(n) < epsilon$4) return equirectangularRaw

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function project(x, y) {
      const gy = g - y,
        nx = n * x
      return [gy * sin$1(nx), g - gy * cos$1(nx)]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    project.invert = function (x, y) {
      let gy = g - y,
        l = atan2(x, abs$2(gy)) * sign(gy)
      if (gy * n < 0) l -= pi$3 * sign(x) * sign(gy)
      return [l / n, g - sign(n) * sqrt(x * x + gy * gy)]
    }

    return project
  }

  function conicEquidistant() {
    return (
      conicProjection(conicEquidistantRaw)
        .scale(131.154)
        // @ts-expect-error TS(2339) FIXME: Property 'center' does not exist on type 'number |... Remove this comment to see the full error message
        .center([0, 13.9389])
    )
  }

  const A1 = 1.340264,
    A2 = -0.081106,
    A3 = 0.000893,
    A4 = 0.003796,
    M = sqrt(3) / 2,
    iterations = 12

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function equalEarthRaw(lambda, phi) {
    const l = asin(M * sin$1(phi)),
      l2 = l * l,
      l6 = l2 * l2 * l2
    return [
      (lambda * cos$1(l)) / (M * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))),
      l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)),
    ]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  equalEarthRaw.invert = function (x, y) {
    let l = y,
      l2 = l * l,
      l6 = l2 * l2 * l2
    for (var i = 0, delta, fy, fpy; i < iterations; ++i) {
      fy = l * (A1 + A2 * l2 + l6 * (A3 + A4 * l2)) - y
      fpy = A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2)
      ;(l -= delta = fy / fpy), (l2 = l * l), (l6 = l2 * l2 * l2)
      if (abs$2(delta) < epsilon2$1) break
    }
    return [(M * x * (A1 + 3 * A2 * l2 + l6 * (7 * A3 + 9 * A4 * l2))) / cos$1(l), asin(sin$1(l) / M)]
  }

  function equalEarth() {
    return projection(equalEarthRaw).scale(177.158)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function gnomonicRaw(x, y) {
    const cy = cos$1(y),
      k = cos$1(x) * cy
    return [(cy * sin$1(x)) / k, sin$1(y) / k]
  }

  gnomonicRaw.invert = azimuthalInvert(atan)

  function gnomonic() {
    return (
      projection(gnomonicRaw)
        .scale(144.049)
        // @ts-expect-error TS(2339) FIXME: Property 'clipAngle' does not exist on type 'numbe... Remove this comment to see the full error message
        .clipAngle(60)
    )
  }

  function identity$5() {
    let k = 1,
      tx = 0,
      ty = 0,
      sx = 1,
      sy = 1, // scale, translate and reflect
      alpha = 0,
      // @ts-expect-error TS(7034) FIXME: Variable 'ca' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      ca,
      // @ts-expect-error TS(7034) FIXME: Variable 'sa' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      sa, // angle
      // @ts-expect-error TS(7034) FIXME: Variable 'x0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      x0 = null,
      // @ts-expect-error TS(7034) FIXME: Variable 'y0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      y0,
      // @ts-expect-error TS(7034) FIXME: Variable 'x1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      x1,
      // @ts-expect-error TS(7034) FIXME: Variable 'y1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      y1, // clip extent
      kx = 1,
      ky = 1,
      transform = transformer({
        // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
        point: function (x, y) {
          const p = projection([x, y])
          this.stream.point(p[0], p[1])
        },
      }),
      postclip = identity$4,
      // @ts-expect-error TS(7034) FIXME: Variable 'cache' implicitly has type 'any' in some... Remove this comment to see the full error message
      cache,
      // @ts-expect-error TS(7034) FIXME: Variable 'cacheStream' implicitly has type 'any' i... Remove this comment to see the full error message
      cacheStream

    function reset() {
      kx = k * sx
      ky = k * sy
      cache = cacheStream = null
      return projection
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
    function projection(p) {
      let x = p[0] * kx,
        y = p[1] * ky
      if (alpha) {
        // @ts-expect-error TS(7005) FIXME: Variable 'ca' implicitly has an 'any' type.
        const t = y * ca - x * sa
        // @ts-expect-error TS(7005) FIXME: Variable 'ca' implicitly has an 'any' type.
        x = x * ca + y * sa
        y = t
      }
      return [x + tx, y + ty]
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
    projection.invert = function (p) {
      let x = p[0] - tx,
        y = p[1] - ty
      if (alpha) {
        // @ts-expect-error TS(7005) FIXME: Variable 'ca' implicitly has an 'any' type.
        const t = y * ca + x * sa
        // @ts-expect-error TS(7005) FIXME: Variable 'ca' implicitly has an 'any' type.
        x = x * ca - y * sa
        y = t
      }
      return [x / kx, y / ky]
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'stream' implicitly has an 'any' type.
    projection.stream = function (stream) {
      // @ts-expect-error TS(7005) FIXME: Variable 'cache' implicitly has an 'any' type.
      return cache && cacheStream === stream ? cache : (cache = transform(postclip((cacheStream = stream))))
    }
    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.postclip = function (_) {
      return arguments.length ? ((postclip = _), (x0 = y0 = x1 = y1 = null), reset()) : postclip
    }
    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.clipExtent = function (_) {
      return arguments.length
        ? ((postclip =
            _ == null
              ? ((x0 = y0 = x1 = y1 = null), identity$4)
              : clipRectangle((x0 = +_[0][0]), (y0 = +_[0][1]), (x1 = +_[1][0]), (y1 = +_[1][1]))),
          reset())
        : // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
        x0 == null
        ? null
        : [
            // @ts-expect-error TS(7005) FIXME: Variable 'x0' implicitly has an 'any' type.
            [x0, y0],
            // @ts-expect-error TS(7005) FIXME: Variable 'x1' implicitly has an 'any' type.
            [x1, y1],
          ]
    }
    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.scale = function (_) {
      return arguments.length ? ((k = +_), reset()) : k
    }
    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.translate = function (_) {
      return arguments.length ? ((tx = +_[0]), (ty = +_[1]), reset()) : [tx, ty]
    }
    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.angle = function (_) {
      return arguments.length
        ? ((alpha = (_ % 360) * radians$1), (sa = sin$1(alpha)), (ca = cos$1(alpha)), reset())
        : alpha * degrees$2
    }
    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.reflectX = function (_) {
      return arguments.length ? ((sx = _ ? -1 : 1), reset()) : sx < 0
    }
    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    projection.reflectY = function (_) {
      return arguments.length ? ((sy = _ ? -1 : 1), reset()) : sy < 0
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'extent' implicitly has an 'any' type.
    projection.fitExtent = function (extent, object) {
      return fitExtent(projection, extent, object)
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'size' implicitly has an 'any' type.
    projection.fitSize = function (size, object) {
      return fitSize(projection, size, object)
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'width' implicitly has an 'any' type.
    projection.fitWidth = function (width, object) {
      return fitWidth(projection, width, object)
    }
    // @ts-expect-error TS(7006) FIXME: Parameter 'height' implicitly has an 'any' type.
    projection.fitHeight = function (height, object) {
      return fitHeight(projection, height, object)
    }

    return projection
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function naturalEarth1Raw(lambda, phi) {
    const phi2 = phi * phi,
      phi4 = phi2 * phi2
    return [
      lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
      phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))),
    ]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  naturalEarth1Raw.invert = function (x, y) {
    let phi = y,
      i = 25,
      delta
    do {
      var phi2 = phi * phi,
        phi4 = phi2 * phi2
      phi -= delta =
        (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /
        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)))
    } while (abs$2(delta) > epsilon$4 && --i > 0)
    return [
      x /
        (0.8707 +
          (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
      phi,
    ]
  }

  function naturalEarth1() {
    return projection(naturalEarth1Raw).scale(175.295)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function orthographicRaw(x, y) {
    return [cos$1(y) * sin$1(x), sin$1(y)]
  }

  orthographicRaw.invert = azimuthalInvert(asin)

  function orthographic() {
    return (
      projection(orthographicRaw)
        .scale(249.5)
        // @ts-expect-error TS(2339) FIXME: Property 'clipAngle' does not exist on type 'numbe... Remove this comment to see the full error message
        .clipAngle(90 + epsilon$4)
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function stereographicRaw(x, y) {
    const cy = cos$1(y),
      k = 1 + cos$1(x) * cy
    return [(cy * sin$1(x)) / k, sin$1(y) / k]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'z' implicitly has an 'any' type.
  stereographicRaw.invert = azimuthalInvert(function (z) {
    return 2 * atan(z)
  })

  function stereographic() {
    return (
      projection(stereographicRaw)
        .scale(250)
        // @ts-expect-error TS(2339) FIXME: Property 'clipAngle' does not exist on type 'numbe... Remove this comment to see the full error message
        .clipAngle(142)
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
  function transverseMercatorRaw(lambda, phi) {
    return [log(tan((halfPi$2 + phi) / 2)), -lambda]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  transverseMercatorRaw.invert = function (x, y) {
    return [-y, 2 * atan(exp(x)) - halfPi$2]
  }

  function transverseMercator() {
    const m = mercatorProjection(transverseMercatorRaw),
      // @ts-expect-error TS(2531) FIXME: Object is possibly 'null'.
      center = m.center,
      // @ts-expect-error TS(2531) FIXME: Object is possibly 'null'.
      rotate = m.rotate

    // @ts-expect-error TS(2531) FIXME: Object is possibly 'null'.
    m.center = function (_) {
      return arguments.length ? center([-_[1], _[0]]) : ((_ = center()), [_[1], -_[0]])
    }

    // @ts-expect-error TS(2531) FIXME: Object is possibly 'null'.
    m.rotate = function (_) {
      return arguments.length
        ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90])
        : ((_ = rotate()), [_[0], _[1], _[2] - 90])
    }

    return rotate([0, 0, 90]).scale(159.155)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function defaultSeparation(a, b) {
    return a.parent === b.parent ? 1 : 2
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'children' implicitly has an 'any' type.
  function meanX(children) {
    return children.reduce(meanXReduce, 0) / children.length
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function meanXReduce(x, c) {
    return x + c.x
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'children' implicitly has an 'any' type.
  function maxY(children) {
    return 1 + children.reduce(maxYReduce, 0)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
  function maxYReduce(y, c) {
    return Math.max(y, c.y)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function leafLeft(node) {
    let children
    while ((children = node.children)) node = children[0]
    return node
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function leafRight(node) {
    let children
    while ((children = node.children)) node = children[children.length - 1]
    return node
  }

  function cluster() {
    let separation = defaultSeparation,
      dx = 1,
      dy = 1,
      nodeSize = false

    // @ts-expect-error TS(7006) FIXME: Parameter 'root' implicitly has an 'any' type.
    function cluster(root) {
      // @ts-expect-error TS(7034) FIXME: Variable 'previousNode' implicitly has type 'any' ... Remove this comment to see the full error message
      let previousNode,
        x = 0

      // First walk, computing the initial x & y values.
      // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
      root.eachAfter(function (node) {
        const children = node.children
        if (children) {
          node.x = meanX(children)
          node.y = maxY(children)
        } else {
          // @ts-expect-error TS(7005) FIXME: Variable 'previousNode' implicitly has an 'any' ty... Remove this comment to see the full error message
          node.x = previousNode ? (x += separation(node, previousNode)) : 0
          node.y = 0
          previousNode = node
        }
      })

      const left = leafLeft(root),
        right = leafRight(root),
        x0 = left.x - separation(left, right) / 2,
        x1 = right.x + separation(right, left) / 2

      // Second walk, normalizing x & y to the desired size.
      return root.eachAfter(
        nodeSize
          ? // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
            function (node) {
              node.x = (node.x - root.x) * dx
              node.y = (root.y - node.y) * dy
            }
          : // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
            function (node) {
              node.x = ((node.x - x0) / (x1 - x0)) * dx
              node.y = (1 - (root.y ? node.y / root.y : 1)) * dy
            }
      )
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    cluster.separation = function (x) {
      return arguments.length ? ((separation = x), cluster) : separation
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    cluster.size = function (x) {
      return arguments.length ? ((nodeSize = false), (dx = +x[0]), (dy = +x[1]), cluster) : nodeSize ? null : [dx, dy]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    cluster.nodeSize = function (x) {
      return arguments.length ? ((nodeSize = true), (dx = +x[0]), (dy = +x[1]), cluster) : nodeSize ? [dx, dy] : null
    }

    return cluster
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function count$1(node) {
    let sum = 0,
      children = node.children,
      i = children && children.length
    if (!i) sum = 1
    else while (--i >= 0) sum += children[i].value
    node.value = sum
  }

  function node_count() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.eachAfter(count$1)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'callback' implicitly has an 'any' type.
  function node_each(callback, that) {
    let index = -1
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (const node of this) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      callback.call(that, node, ++index, this)
    }
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'callback' implicitly has an 'any' type.
  function node_eachBefore(callback, that) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    let node = this,
      nodes = [node],
      children,
      i,
      index = -1
    while ((node = nodes.pop())) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      callback.call(that, node, ++index, this)
      if ((children = node.children)) {
        for (i = children.length - 1; i >= 0; --i) {
          nodes.push(children[i])
        }
      }
    }
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'callback' implicitly has an 'any' type.
  function node_eachAfter(callback, that) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    let node = this,
      nodes = [node],
      next = [],
      children,
      i,
      n,
      index = -1
    while ((node = nodes.pop())) {
      next.push(node)
      if ((children = node.children)) {
        for (i = 0, n = children.length; i < n; ++i) {
          nodes.push(children[i])
        }
      }
    }
    while ((node = next.pop())) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      callback.call(that, node, ++index, this)
    }
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'callback' implicitly has an 'any' type.
  function node_find(callback, that) {
    let index = -1
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    for (const node of this) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (callback.call(that, node, ++index, this)) {
        return node
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function node_sum(value) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.eachAfter(function (node) {
      let sum = +value(node.data) || 0,
        children = node.children,
        i = children && children.length
      while (--i >= 0) sum += children[i].value
      node.value = sum
    })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'compare' implicitly has an 'any' type.
  function node_sort(compare) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.eachBefore(function (node) {
      if (node.children) {
        node.children.sort(compare)
      }
    })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'end' implicitly has an 'any' type.
  function node_path(end) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    let start = this,
      ancestor = leastCommonAncestor(start, end),
      nodes = [start]
    while (start !== ancestor) {
      start = start.parent
      nodes.push(start)
    }
    const k = nodes.length
    while (end !== ancestor) {
      nodes.splice(k, 0, end)
      end = end.parent
    }
    return nodes
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function leastCommonAncestor(a, b) {
    if (a === b) return a
    let aNodes = a.ancestors(),
      bNodes = b.ancestors(),
      c = null
    a = aNodes.pop()
    b = bNodes.pop()
    while (a === b) {
      c = a
      a = aNodes.pop()
      b = bNodes.pop()
    }
    return c
  }

  function node_ancestors() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    let node = this,
      nodes = [node]
    while ((node = node.parent)) {
      nodes.push(node)
    }
    return nodes
  }

  function node_descendants() {
    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    return Array.from(this)
  }

  function node_leaves() {
    // @ts-expect-error TS(7034) FIXME: Variable 'leaves' implicitly has type 'any[]' in s... Remove this comment to see the full error message
    const leaves = []
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.eachBefore(function (node) {
      if (!node.children) {
        leaves.push(node)
      }
    })
    // @ts-expect-error TS(7005) FIXME: Variable 'leaves' implicitly has an 'any[]' type.
    return leaves
  }

  function node_links() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    const root = this,
      // @ts-expect-error TS(7034) FIXME: Variable 'links' implicitly has type 'any[]' in so... Remove this comment to see the full error message
      links = []
    // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
    root.each(function (node) {
      if (node !== root) {
        // Don’t include the root’s parent, if any.
        links.push({ source: node.parent, target: node })
      }
    })
    // @ts-expect-error TS(7005) FIXME: Variable 'links' implicitly has an 'any[]' type.
    return links
  }

  function* node_iterator() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    let node = this,
      current,
      next = [node],
      children,
      i,
      n
    do {
      ;(current = next.reverse()), (next = [])
      while ((node = current.pop())) {
        yield node
        if ((children = node.children)) {
          for (i = 0, n = children.length; i < n; ++i) {
            next.push(children[i])
          }
        }
      }
    } while (next.length)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'data' implicitly has an 'any' type.
  function hierarchy(data, children) {
    // @ts-expect-error TS(2583) FIXME: Cannot find name 'Map'. Do you need to change your... Remove this comment to see the full error message
    if (data instanceof Map) {
      data = [undefined, data]
      if (children === undefined) children = mapChildren
    } else if (children === undefined) {
      children = objectChildren
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    let root = new Node(data),
      node,
      nodes = [root],
      child,
      childs,
      i,
      n

    while ((node = nodes.pop())) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      if ((childs = children(node.data)) && (n = (childs = Array.from(childs)).length)) {
        node.children = childs
        for (i = n - 1; i >= 0; --i) {
          // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
          nodes.push((child = childs[i] = new Node(childs[i])))
          child.parent = node
          child.depth = node.depth + 1
        }
      }
    }

    return root.eachBefore(computeHeight)
  }

  function node_copy() {
    // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
    return hierarchy(this).eachBefore(copyData)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function objectChildren(d) {
    return d.children
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function mapChildren(d) {
    return Array.isArray(d) ? d[1] : null
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function copyData(node) {
    if (node.data.value !== undefined) node.value = node.data.value
    node.data = node.data.data
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function computeHeight(node) {
    let height = 0
    do node.height = height
    while ((node = node.parent) && node.height < ++height)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'data' implicitly has an 'any' type.
  function Node(data) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.data = data
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.depth =
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.height = 0
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.parent = null
  }

  Node.prototype = hierarchy.prototype = {
    constructor: Node,
    count: node_count,
    each: node_each,
    eachAfter: node_eachAfter,
    eachBefore: node_eachBefore,
    find: node_find,
    sum: node_sum,
    sort: node_sort,
    path: node_path,
    ancestors: node_ancestors,
    descendants: node_descendants,
    leaves: node_leaves,
    links: node_links,
    copy: node_copy,
    // @ts-expect-error TS(2585) FIXME: 'Symbol' only refers to a type, but is being used ... Remove this comment to see the full error message
    [Symbol.iterator]: node_iterator,
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function array$4(x) {
    return typeof x === 'object' && 'length' in x
      ? x // Array, TypedArray, NodeList, array-like
      : // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
        Array.from(x) // Map, Set, iterable, string, or anything else
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'array' implicitly has an 'any' type.
  function shuffle$1(array) {
    let m = array.length,
      t,
      i

    while (m) {
      i = (Math.random() * m--) | 0
      t = array[m]
      array[m] = array[i]
      array[i] = t
    }

    return array
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'circles' implicitly has an 'any' type.
  function enclose(circles) {
    let i = 0,
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      n = (circles = shuffle$1(Array.from(circles))).length,
      B = [],
      p,
      e

    while (i < n) {
      p = circles[i]
      if (e && enclosesWeak(e, p)) ++i
      else (e = encloseBasis((B = extendBasis(B, p)))), (i = 0)
    }

    return e
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'B' implicitly has an 'any' type.
  function extendBasis(B, p) {
    let i, j

    if (enclosesWeakAll(p, B)) return [p]

    // If we get here then B must have at least one element.
    for (i = 0; i < B.length; ++i) {
      if (enclosesNot(p, B[i]) && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
        return [B[i], p]
      }
    }

    // If we get here then B must have at least two elements.
    for (i = 0; i < B.length - 1; ++i) {
      for (j = i + 1; j < B.length; ++j) {
        if (
          enclosesNot(encloseBasis2(B[i], B[j]), p) &&
          enclosesNot(encloseBasis2(B[i], p), B[j]) &&
          enclosesNot(encloseBasis2(B[j], p), B[i]) &&
          enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)
        ) {
          return [B[i], B[j], p]
        }
      }
    }

    // If we get here then something is very wrong.
    throw new Error()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function enclosesNot(a, b) {
    const dr = a.r - b.r,
      dx = b.x - a.x,
      dy = b.y - a.y
    return dr < 0 || dr * dr < dx * dx + dy * dy
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function enclosesWeak(a, b) {
    const dr = a.r - b.r + Math.max(a.r, b.r, 1) * 1e-9,
      dx = b.x - a.x,
      dy = b.y - a.y
    return dr > 0 && dr * dr > dx * dx + dy * dy
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function enclosesWeakAll(a, B) {
    for (let i = 0; i < B.length; ++i) {
      if (!enclosesWeak(a, B[i])) {
        return false
      }
    }
    return true
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'B' implicitly has an 'any' type.
  function encloseBasis(B) {
    switch (B.length) {
      case 1:
        return encloseBasis1(B[0])
      case 2:
        return encloseBasis2(B[0], B[1])
      case 3:
        return encloseBasis3(B[0], B[1], B[2])
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function encloseBasis1(a) {
    return {
      x: a.x,
      y: a.y,
      r: a.r,
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function encloseBasis2(a, b) {
    const x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x21 = x2 - x1,
      y21 = y2 - y1,
      r21 = r2 - r1,
      l = Math.sqrt(x21 * x21 + y21 * y21)
    return {
      x: (x1 + x2 + (x21 / l) * r21) / 2,
      y: (y1 + y2 + (y21 / l) * r21) / 2,
      r: (l + r1 + r2) / 2,
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function encloseBasis3(a, b, c) {
    const x1 = a.x,
      y1 = a.y,
      r1 = a.r,
      x2 = b.x,
      y2 = b.y,
      r2 = b.r,
      x3 = c.x,
      y3 = c.y,
      r3 = c.r,
      a2 = x1 - x2,
      a3 = x1 - x3,
      b2 = y1 - y2,
      b3 = y1 - y3,
      c2 = r2 - r1,
      c3 = r3 - r1,
      d1 = x1 * x1 + y1 * y1 - r1 * r1,
      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
      ab = a3 * b2 - a2 * b3,
      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
      xb = (b3 * c2 - b2 * c3) / ab,
      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
      yb = (a2 * c3 - a3 * c2) / ab,
      A = xb * xb + yb * yb - 1,
      B = 2 * (r1 + xa * xb + ya * yb),
      C = xa * xa + ya * ya - r1 * r1,
      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B)
    return {
      x: x1 + xa + xb * r,
      y: y1 + ya + yb * r,
      r: r,
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'b' implicitly has an 'any' type.
  function place(b, a, c) {
    let dx = b.x - a.x,
      x,
      a2,
      dy = b.y - a.y,
      y,
      b2,
      d2 = dx * dx + dy * dy
    if (d2) {
      ;(a2 = a.r + c.r), (a2 *= a2)
      ;(b2 = b.r + c.r), (b2 *= b2)
      if (a2 > b2) {
        x = (d2 + b2 - a2) / (2 * d2)
        y = Math.sqrt(Math.max(0, b2 / d2 - x * x))
        c.x = b.x - x * dx - y * dy
        c.y = b.y - x * dy + y * dx
      } else {
        x = (d2 + a2 - b2) / (2 * d2)
        y = Math.sqrt(Math.max(0, a2 / d2 - x * x))
        c.x = a.x + x * dx - y * dy
        c.y = a.y + x * dy + y * dx
      }
    } else {
      c.x = a.x + c.r
      c.y = a.y
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function intersects(a, b) {
    const dr = a.r + b.r - 1e-6,
      dx = b.x - a.x,
      dy = b.y - a.y
    return dr > 0 && dr * dr > dx * dx + dy * dy
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function score(node) {
    const a = node._,
      b = node.next._,
      ab = a.r + b.r,
      dx = (a.x * b.r + b.x * a.r) / ab,
      dy = (a.y * b.r + b.y * a.r) / ab
    return dx * dx + dy * dy
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'circle' implicitly has an 'any' type.
  function Node$1(circle) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._ = circle
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.next = null
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.previous = null
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'circles' implicitly has an 'any' type.
  function packEnclose(circles) {
    if (!(n = (circles = array$4(circles)).length)) return 0

    let a,
      b,
      c,
      n,
      aa,
      ca,
      i,
      j,
      k,
      sj,
      sk

      // Place the first circle.
    ;(a = circles[0]), (a.x = 0), (a.y = 0)
    if (!(n > 1))
      return a.r

      // Place the second circle.
    ;(b = circles[1]), (a.x = -b.r), (b.x = a.r), (b.y = 0)
    if (!(n > 2)) return a.r + b.r

    // Place the third circle.
    place(b, a, (c = circles[2]))

    // Initialize the front-chain using the first three circles a, b and c.
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    ;(a = new Node$1(a)), (b = new Node$1(b)), (c = new Node$1(c))
    a.next = c.previous = b
    b.next = a.previous = c
    c.next = b.previous = a

    // Attempt to place each remaining circle…
    pack: for (i = 3; i < n; ++i) {
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      place(a._, b._, (c = circles[i])), (c = new Node$1(c))

      // Find the closest intersecting circle on the front-chain, if any.
      // “Closeness” is determined by linear distance along the front-chain.
      // “Ahead” or “behind” is likewise determined by linear distance.
      ;(j = b.next), (k = a.previous), (sj = b._.r), (sk = a._.r)
      do {
        if (sj <= sk) {
          if (intersects(j._, c._)) {
            ;(b = j), (a.next = b), (b.previous = a), --i
            continue pack
          }
          ;(sj += j._.r), (j = j.next)
        } else {
          if (intersects(k._, c._)) {
            ;(a = k), (a.next = b), (b.previous = a), --i
            continue pack
          }
          ;(sk += k._.r), (k = k.previous)
        }
      } while (
        j !== k.next

        // Success! Insert the new circle c between a and b.
      )
      ;(c.previous = a), (c.next = b), (a.next = b.previous = b = c)

      // Compute the new closest circle pair to the centroid.
      aa = score(a)
      while ((c = c.next) !== b) {
        if ((ca = score(c)) < aa) {
          ;(a = c), (aa = ca)
        }
      }
      b = a.next
    }

    // Compute the enclosing circle of the front chain.
    ;(a = [b._]), (c = b)
    while ((c = c.next) !== b) a.push(c._)
    c = enclose(a)

    // Translate the circles to put the enclosing circle around the origin.
    // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
    for (i = 0; i < n; ++i) (a = circles[i]), (a.x -= c.x), (a.y -= c.y)

    // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
    return c.r
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'circles' implicitly has an 'any' type.
  function siblings(circles) {
    packEnclose(circles)
    return circles
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'f' implicitly has an 'any' type.
  function optional(f) {
    return f == null ? null : required(f)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'f' implicitly has an 'any' type.
  function required(f) {
    if (typeof f !== 'function') throw new Error()
    return f
  }

  function constantZero() {
    return 0
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function constant$9(x) {
    return function () {
      return x
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function defaultRadius$1(d) {
    return Math.sqrt(d.value)
  }

  function index$3() {
    // @ts-expect-error TS(7034) FIXME: Variable 'radius' implicitly has type 'any' in som... Remove this comment to see the full error message
    let radius = null,
      dx = 1,
      dy = 1,
      padding = constantZero

    // @ts-expect-error TS(7006) FIXME: Parameter 'root' implicitly has an 'any' type.
    function pack(root) {
      ;(root.x = dx / 2), (root.y = dy / 2)
      // @ts-expect-error TS(7005) FIXME: Variable 'radius' implicitly has an 'any' type.
      if (radius) {
        // @ts-expect-error TS(7005) FIXME: Variable 'radius' implicitly has an 'any' type.
        root.eachBefore(radiusLeaf(radius)).eachAfter(packChildren(padding, 0.5)).eachBefore(translateChild(1))
      } else {
        root
          .eachBefore(radiusLeaf(defaultRadius$1))
          .eachAfter(packChildren(constantZero, 1))
          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)))
      }
      return root
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    pack.radius = function (x) {
      // @ts-expect-error TS(7005) FIXME: Variable 'radius' implicitly has an 'any' type.
      return arguments.length ? ((radius = optional(x)), pack) : radius
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    pack.size = function (x) {
      return arguments.length ? ((dx = +x[0]), (dy = +x[1]), pack) : [dx, dy]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    pack.padding = function (x) {
      return arguments.length ? ((padding = typeof x === 'function' ? x : constant$9(+x)), pack) : padding
    }

    return pack
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'radius' implicitly has an 'any' type.
  function radiusLeaf(radius) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
    return function (node) {
      if (!node.children) {
        node.r = Math.max(0, +radius(node) || 0)
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'padding' implicitly has an 'any' type.
  function packChildren(padding, k) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
    return function (node) {
      if ((children = node.children)) {
        var children,
          i,
          n = children.length,
          r = padding(node) * k || 0,
          e

        if (r) for (i = 0; i < n; ++i) children[i].r += r
        e = packEnclose(children)
        if (r) for (i = 0; i < n; ++i) children[i].r -= r
        node.r = e + r
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
  function translateChild(k) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
    return function (node) {
      const parent = node.parent
      node.r *= k
      if (parent) {
        node.x = parent.x + k * node.x
        node.y = parent.y + k * node.y
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function roundNode(node) {
    node.x0 = Math.round(node.x0)
    node.y0 = Math.round(node.y0)
    node.x1 = Math.round(node.x1)
    node.y1 = Math.round(node.y1)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.
  function treemapDice(parent, x0, y0, x1, y1) {
    let nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (x1 - x0) / parent.value

    while (++i < n) {
      ;(node = nodes[i]), (node.y0 = y0), (node.y1 = y1)
      ;(node.x0 = x0), (node.x1 = x0 += node.value * k)
    }
  }

  function partition() {
    let dx = 1,
      dy = 1,
      padding = 0,
      round = false

    // @ts-expect-error TS(7006) FIXME: Parameter 'root' implicitly has an 'any' type.
    function partition(root) {
      const n = root.height + 1
      root.x0 = root.y0 = padding
      root.x1 = dx
      root.y1 = dy / n
      root.eachBefore(positionNode(dy, n))
      if (round) root.eachBefore(roundNode)
      return root
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'dy' implicitly has an 'any' type.
    function positionNode(dy, n) {
      // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
      return function (node) {
        if (node.children) {
          treemapDice(node, node.x0, (dy * (node.depth + 1)) / n, node.x1, (dy * (node.depth + 2)) / n)
        }
        let x0 = node.x0,
          y0 = node.y0,
          x1 = node.x1 - padding,
          y1 = node.y1 - padding
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2
        node.x0 = x0
        node.y0 = y0
        node.x1 = x1
        node.y1 = y1
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    partition.round = function (x) {
      return arguments.length ? ((round = !!x), partition) : round
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    partition.size = function (x) {
      return arguments.length ? ((dx = +x[0]), (dy = +x[1]), partition) : [dx, dy]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    partition.padding = function (x) {
      return arguments.length ? ((padding = +x), partition) : padding
    }

    return partition
  }

  const preroot = { depth: -1 },
    ambiguous = {}

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function defaultId(d) {
    return d.id
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function defaultParentId(d) {
    return d.parentId
  }

  function stratify() {
    let id = defaultId,
      parentId = defaultParentId

    // @ts-expect-error TS(7006) FIXME: Parameter 'data' implicitly has an 'any' type.
    function stratify(data) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      let nodes = Array.from(data),
        n = nodes.length,
        d,
        i,
        root,
        parent,
        node,
        nodeId,
        nodeKey,
        // @ts-expect-error TS(2583) FIXME: Cannot find name 'Map'. Do you need to change your... Remove this comment to see the full error message
        nodeByKey = new Map()

      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
        ;(d = nodes[i]), (node = nodes[i] = new Node(d))
        // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 3.
        if ((nodeId = id(d, i, data)) != null && (nodeId += '')) {
          nodeKey = node.id = nodeId
          nodeByKey.set(nodeKey, nodeByKey.has(nodeKey) ? ambiguous : node)
        }
        // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 3.
        if ((nodeId = parentId(d, i, data)) != null && (nodeId += '')) {
          node.parent = nodeId
        }
      }

      for (i = 0; i < n; ++i) {
        node = nodes[i]
        if ((nodeId = node.parent)) {
          parent = nodeByKey.get(nodeId)
          if (!parent) throw new Error('missing: ' + nodeId)
          if (parent === ambiguous) throw new Error('ambiguous: ' + nodeId)
          if (parent.children) parent.children.push(node)
          else parent.children = [node]
          node.parent = parent
        } else {
          if (root) throw new Error('multiple roots')
          root = node
        }
      }

      if (!root) throw new Error('no root')
      root.parent = preroot
      root
        // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
        .eachBefore(function (node) {
          node.depth = node.parent.depth + 1
          --n
        })
        .eachBefore(computeHeight)
      root.parent = null
      if (n > 0) throw new Error('cycle')

      return root
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    stratify.id = function (x) {
      return arguments.length ? ((id = required(x)), stratify) : id
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    stratify.parentId = function (x) {
      return arguments.length ? ((parentId = required(x)), stratify) : parentId
    }

    return stratify
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function defaultSeparation$1(a, b) {
    return a.parent === b.parent ? 1 : 2
  }

  // function radialSeparation(a, b) {
  //   return (a.parent === b.parent ? 1 : 2) / a.depth;
  // }

  // This function is used to traverse the left contour of a subtree (or
  // subforest). It returns the successor of v on this contour. This successor is
  // either given by the leftmost child of v or by the thread of v. The function
  // returns null if and only if v is on the highest level of its subtree.
  // @ts-expect-error TS(7006) FIXME: Parameter 'v' implicitly has an 'any' type.
  function nextLeft(v) {
    const children = v.children
    return children ? children[0] : v.t
  }

  // This function works analogously to nextLeft.
  // @ts-expect-error TS(7006) FIXME: Parameter 'v' implicitly has an 'any' type.
  function nextRight(v) {
    const children = v.children
    return children ? children[children.length - 1] : v.t
  }

  // Shifts the current subtree rooted at w+. This is done by increasing
  // prelim(w+) and mod(w+) by shift.
  // @ts-expect-error TS(7006) FIXME: Parameter 'wm' implicitly has an 'any' type.
  function moveSubtree(wm, wp, shift) {
    const change = shift / (wp.i - wm.i)
    wp.c -= change
    wp.s += shift
    wm.c += change
    wp.z += shift
    wp.m += shift
  }

  // All other shifts, applied to the smaller subtrees between w- and w+, are
  // performed by this function. To prepare the shifts, we have to adjust
  // change(w+), shift(w+), and change(w-).
  // @ts-expect-error TS(7006) FIXME: Parameter 'v' implicitly has an 'any' type.
  function executeShifts(v) {
    let shift = 0,
      change = 0,
      children = v.children,
      i = children.length,
      w
    while (--i >= 0) {
      w = children[i]
      w.z += shift
      w.m += shift
      shift += w.s + (change += w.c)
    }
  }

  // If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
  // returns the specified (default) ancestor.
  // @ts-expect-error TS(7006) FIXME: Parameter 'vim' implicitly has an 'any' type.
  function nextAncestor(vim, v, ancestor) {
    return vim.a.parent === v.parent ? vim.a : ancestor
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function TreeNode(node, i) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._ = node
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.parent = null
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.children = null
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.A = null // default ancestor
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.a = this // ancestor
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.z = 0 // prelim
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.m = 0 // mod
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.c = 0 // change
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.s = 0 // shift
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.t = null // thread
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.i = i // number
  }

  TreeNode.prototype = Object.create(Node.prototype)

  // @ts-expect-error TS(7006) FIXME: Parameter 'root' implicitly has an 'any' type.
  function treeRoot(root) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    let tree = new TreeNode(root, 0),
      node,
      nodes = [tree],
      child,
      children,
      i,
      n

    while ((node = nodes.pop())) {
      if ((children = node._.children)) {
        node.children = new Array((n = children.length))
        for (i = n - 1; i >= 0; --i) {
          // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
          nodes.push((child = node.children[i] = new TreeNode(children[i], i)))
          child.parent = node
        }
      }
    }

    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    ;(tree.parent = new TreeNode(null, 0)).children = [tree]
    return tree
  }

  // Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
  function tree() {
    let separation = defaultSeparation$1,
      dx = 1,
      dy = 1,
      // @ts-expect-error TS(7034) FIXME: Variable 'nodeSize' implicitly has type 'any' in s... Remove this comment to see the full error message
      nodeSize = null

    // @ts-expect-error TS(7006) FIXME: Parameter 'root' implicitly has an 'any' type.
    function tree(root) {
      const t = treeRoot(root)

      // Compute the layout using Buchheim et al.’s algorithm.
      t.eachAfter(firstWalk), (t.parent.m = -t.z)
      t.eachBefore(secondWalk)

      // If a fixed node size is specified, scale x and y.
      // @ts-expect-error TS(7005) FIXME: Variable 'nodeSize' implicitly has an 'any' type.
      if (nodeSize) root.eachBefore(sizeNode)
      // If a fixed tree size is specified, scale x and y based on the extent.
      // Compute the left-most, right-most, and depth-most nodes for extents.
      else {
        let left = root,
          right = root,
          bottom = root
        // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
        root.eachBefore(function (node) {
          if (node.x < left.x) left = node
          if (node.x > right.x) right = node
          if (node.depth > bottom.depth) bottom = node
        })
        const s = left === right ? 1 : separation(left, right) / 2,
          tx = s - left.x,
          kx = dx / (right.x + s + tx),
          ky = dy / (bottom.depth || 1)
        // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
        root.eachBefore(function (node) {
          node.x = (node.x + tx) * kx
          node.y = node.depth * ky
        })
      }

      return root
    }

    // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
    // applied recursively to the children of v, as well as the function
    // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
    // node v is placed to the midpoint of its outermost children.
    // @ts-expect-error TS(7006) FIXME: Parameter 'v' implicitly has an 'any' type.
    function firstWalk(v) {
      const children = v.children,
        siblings = v.parent.children,
        w = v.i ? siblings[v.i - 1] : null
      if (children) {
        executeShifts(v)
        const midpoint = (children[0].z + children[children.length - 1].z) / 2
        if (w) {
          v.z = w.z + separation(v._, w._)
          v.m = v.z - midpoint
        } else {
          v.z = midpoint
        }
      } else if (w) {
        v.z = w.z + separation(v._, w._)
      }
      v.parent.A = apportion(v, w, v.parent.A || siblings[0])
    }

    // Computes all real x-coordinates by summing up the modifiers recursively.
    // @ts-expect-error TS(7006) FIXME: Parameter 'v' implicitly has an 'any' type.
    function secondWalk(v) {
      v._.x = v.z + v.parent.m
      v.m += v.parent.m
    }

    // The core of the algorithm. Here, a new subtree is combined with the
    // previous subtrees. Threads are used to traverse the inside and outside
    // contours of the left and right subtree up to the highest common level. The
    // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
    // superscript o means outside and i means inside, the subscript - means left
    // subtree and + means right subtree. For summing up the modifiers along the
    // contour, we use respective variables si+, si-, so-, and so+. Whenever two
    // nodes of the inside contours conflict, we compute the left one of the
    // greatest uncommon ancestors using the function ANCESTOR and call MOVE
    // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
    // Finally, we add a new thread (if necessary).
    // @ts-expect-error TS(7006) FIXME: Parameter 'v' implicitly has an 'any' type.
    function apportion(v, w, ancestor) {
      if (w) {
        let vip = v,
          vop = v,
          vim = w,
          vom = vip.parent.children[0],
          sip = vip.m,
          sop = vop.m,
          sim = vim.m,
          som = vom.m,
          shift
        while (((vim = nextRight(vim)), (vip = nextLeft(vip)), vim && vip)) {
          vom = nextLeft(vom)
          vop = nextRight(vop)
          vop.a = v
          shift = vim.z + sim - vip.z - sip + separation(vim._, vip._)
          if (shift > 0) {
            moveSubtree(nextAncestor(vim, v, ancestor), v, shift)
            sip += shift
            sop += shift
          }
          sim += vim.m
          sip += vip.m
          som += vom.m
          sop += vop.m
        }
        if (vim && !nextRight(vop)) {
          vop.t = vim
          vop.m += sim - sop
        }
        if (vip && !nextLeft(vom)) {
          vom.t = vip
          vom.m += sip - som
          ancestor = v
        }
      }
      return ancestor
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
    function sizeNode(node) {
      node.x *= dx
      node.y = node.depth * dy
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    tree.separation = function (x) {
      return arguments.length ? ((separation = x), tree) : separation
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    tree.size = function (x) {
      // @ts-expect-error TS(7005) FIXME: Variable 'nodeSize' implicitly has an 'any' type.
      return arguments.length ? ((nodeSize = false), (dx = +x[0]), (dy = +x[1]), tree) : nodeSize ? null : [dx, dy]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    tree.nodeSize = function (x) {
      // @ts-expect-error TS(7005) FIXME: Variable 'nodeSize' implicitly has an 'any' type.
      return arguments.length ? ((nodeSize = true), (dx = +x[0]), (dy = +x[1]), tree) : nodeSize ? [dx, dy] : null
    }

    return tree
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.
  function treemapSlice(parent, x0, y0, x1, y1) {
    let nodes = parent.children,
      node,
      i = -1,
      n = nodes.length,
      k = parent.value && (y1 - y0) / parent.value

    while (++i < n) {
      ;(node = nodes[i]), (node.x0 = x0), (node.x1 = x1)
      ;(node.y0 = y0), (node.y1 = y0 += node.value * k)
    }
  }

  const phi = (1 + Math.sqrt(5)) / 2

  // @ts-expect-error TS(7006) FIXME: Parameter 'ratio' implicitly has an 'any' type.
  function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
    let rows = [],
      nodes = parent.children,
      row,
      nodeValue,
      i0 = 0,
      i1 = 0,
      n = nodes.length,
      dx,
      dy,
      value = parent.value,
      sumValue,
      minValue,
      maxValue,
      newRatio,
      minRatio,
      alpha,
      beta

    while (i0 < n) {
      ;(dx = x1 - x0), (dy = y1 - y0)

      // Find the next non-empty node.
      do sumValue = nodes[i1++].value
      while (!sumValue && i1 < n)
      minValue = maxValue = sumValue
      alpha = Math.max(dy / dx, dx / dy) / (value * ratio)
      beta = sumValue * sumValue * alpha
      minRatio = Math.max(maxValue / beta, beta / minValue)

      // Keep adding nodes while the aspect ratio maintains or improves.
      for (; i1 < n; ++i1) {
        sumValue += nodeValue = nodes[i1].value
        if (nodeValue < minValue) minValue = nodeValue
        if (nodeValue > maxValue) maxValue = nodeValue
        beta = sumValue * sumValue * alpha
        newRatio = Math.max(maxValue / beta, beta / minValue)
        if (newRatio > minRatio) {
          sumValue -= nodeValue
          break
        }
        minRatio = newRatio
      }

      // Position and record the row orientation.
      rows.push((row = { value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1) }))
      if (row.dice) treemapDice(row, x0, y0, x1, value ? (y0 += (dy * sumValue) / value) : y1)
      else treemapSlice(row, x0, y0, value ? (x0 += (dx * sumValue) / value) : x1, y1)
      ;(value -= sumValue), (i0 = i1)
    }

    return rows
  }

  const squarify = (function custom(ratio) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.
    function squarify(parent, x0, y0, x1, y1) {
      squarifyRatio(ratio, parent, x0, y0, x1, y1)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    squarify.ratio = function (x) {
      return custom((x = +x) > 1 ? x : 1)
    }

    return squarify
  })(phi)

  function index$4() {
    let tile = squarify,
      round = false,
      dx = 1,
      dy = 1,
      paddingStack = [0],
      paddingInner = constantZero,
      paddingTop = constantZero,
      paddingRight = constantZero,
      paddingBottom = constantZero,
      paddingLeft = constantZero

    // @ts-expect-error TS(7006) FIXME: Parameter 'root' implicitly has an 'any' type.
    function treemap(root) {
      root.x0 = root.y0 = 0
      root.x1 = dx
      root.y1 = dy
      root.eachBefore(positionNode)
      paddingStack = [0]
      if (round) root.eachBefore(roundNode)
      return root
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
    function positionNode(node) {
      let p = paddingStack[node.depth],
        x0 = node.x0 + p,
        y0 = node.y0 + p,
        x1 = node.x1 - p,
        y1 = node.y1 - p
      if (x1 < x0) x0 = x1 = (x0 + x1) / 2
      if (y1 < y0) y0 = y1 = (y0 + y1) / 2
      node.x0 = x0
      node.y0 = y0
      node.x1 = x1
      node.y1 = y1
      if (node.children) {
        // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 1.
        p = paddingStack[node.depth + 1] = paddingInner(node) / 2
        // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 1.
        x0 += paddingLeft(node) - p
        // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 1.
        y0 += paddingTop(node) - p
        // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 1.
        x1 -= paddingRight(node) - p
        // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 1.
        y1 -= paddingBottom(node) - p
        if (x1 < x0) x0 = x1 = (x0 + x1) / 2
        if (y1 < y0) y0 = y1 = (y0 + y1) / 2
        tile(node, x0, y0, x1, y1)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    treemap.round = function (x) {
      return arguments.length ? ((round = !!x), treemap) : round
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    treemap.size = function (x) {
      return arguments.length ? ((dx = +x[0]), (dy = +x[1]), treemap) : [dx, dy]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    treemap.tile = function (x) {
      return arguments.length ? ((tile = required(x)), treemap) : tile
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    treemap.padding = function (x) {
      // @ts-expect-error TS(2339) FIXME: Property 'paddingOuter' does not exist on type '((... Remove this comment to see the full error message
      return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    treemap.paddingInner = function (x) {
      return arguments.length ? ((paddingInner = typeof x === 'function' ? x : constant$9(+x)), treemap) : paddingInner
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    treemap.paddingOuter = function (x) {
      return arguments.length
        ? // @ts-expect-error TS(2339) FIXME: Property 'paddingRight' does not exist on type '((... Remove this comment to see the full error message
          treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x)
        : // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
          treemap.paddingTop()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    treemap.paddingTop = function (x) {
      return arguments.length ? ((paddingTop = typeof x === 'function' ? x : constant$9(+x)), treemap) : paddingTop
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    treemap.paddingRight = function (x) {
      return arguments.length ? ((paddingRight = typeof x === 'function' ? x : constant$9(+x)), treemap) : paddingRight
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    treemap.paddingBottom = function (x) {
      return arguments.length
        ? ((paddingBottom = typeof x === 'function' ? x : constant$9(+x)), treemap)
        : paddingBottom
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    treemap.paddingLeft = function (x) {
      return arguments.length ? ((paddingLeft = typeof x === 'function' ? x : constant$9(+x)), treemap) : paddingLeft
    }

    return treemap
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.
  function binary(parent, x0, y0, x1, y1) {
    let nodes = parent.children,
      i,
      n = nodes.length,
      sum,
      sums = new Array(n + 1)

    for (sums[0] = sum = i = 0; i < n; ++i) {
      sums[i + 1] = sum += nodes[i].value
    }

    partition(0, n, parent.value, x0, y0, x1, y1)

    // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
    function partition(i, j, value, x0, y0, x1, y1) {
      if (i >= j - 1) {
        const node = nodes[i]
        ;(node.x0 = x0), (node.y0 = y0)
        ;(node.x1 = x1), (node.y1 = y1)
        return
      }

      let valueOffset = sums[i],
        valueTarget = value / 2 + valueOffset,
        k = i + 1,
        hi = j - 1

      while (k < hi) {
        const mid = (k + hi) >>> 1
        if (sums[mid] < valueTarget) k = mid + 1
        else hi = mid
      }

      if (valueTarget - sums[k - 1] < sums[k] - valueTarget && i + 1 < k) --k

      const valueLeft = sums[k] - valueOffset,
        valueRight = value - valueLeft

      if (x1 - x0 > y1 - y0) {
        const xk = value ? (x0 * valueRight + x1 * valueLeft) / value : x1
        partition(i, k, valueLeft, x0, y0, xk, y1)
        partition(k, j, valueRight, xk, y0, x1, y1)
      } else {
        const yk = value ? (y0 * valueRight + y1 * valueLeft) / value : y1
        partition(i, k, valueLeft, x0, y0, x1, yk)
        partition(k, j, valueRight, x0, yk, x1, y1)
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.
  function sliceDice(parent, x0, y0, x1, y1) {
    ;(parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1)
  }

  const resquarify = (function custom(ratio) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.
    function resquarify(parent, x0, y0, x1, y1) {
      if ((rows = parent._squarify) && rows.ratio === ratio) {
        var rows,
          row,
          nodes,
          i,
          j = -1,
          n,
          m = rows.length,
          value = parent.value

        while (++j < m) {
          (row = rows[j]), (nodes = row.children)
          for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value
          if (row.dice) treemapDice(row, x0, y0, x1, value ? (y0 += ((y1 - y0) * row.value) / value) : y1)
          else treemapSlice(row, x0, y0, value ? (x0 += ((x1 - x0) * row.value) / value) : x1, y1)
          value -= row.value
        }
      } else {
        parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1)
        // @ts-expect-error TS(2339) FIXME: Property 'ratio' does not exist on type '{ value: ... Remove this comment to see the full error message
        rows.ratio = ratio
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    resquarify.ratio = function (x) {
      return custom((x = +x) > 1 ? x : 1)
    }

    return resquarify
  })(phi)

  // @ts-expect-error TS(7006) FIXME: Parameter 'polygon' implicitly has an 'any' type.
  function area$2(polygon) {
    let i = -1,
      n = polygon.length,
      a,
      b = polygon[n - 1],
      area = 0

    while (++i < n) {
      a = b
      b = polygon[i]
      area += a[1] * b[0] - a[0] * b[1]
    }

    return area / 2
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'polygon' implicitly has an 'any' type.
  function centroid$1(polygon) {
    let i = -1,
      n = polygon.length,
      x = 0,
      y = 0,
      a,
      b = polygon[n - 1],
      c,
      k = 0

    while (++i < n) {
      a = b
      b = polygon[i]
      k += c = a[0] * b[1] - b[0] * a[1]
      x += (a[0] + b[0]) * c
      y += (a[1] + b[1]) * c
    }

    return (k *= 3), [x / k, y / k]
  }

  // Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
  // the 3D cross product in a quadrant I Cartesian coordinate system (+x is
  // right, +y is up). Returns a positive value if ABC is counter-clockwise,
  // negative if clockwise, and zero if the points are collinear.
  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function cross$1(a, b, c) {
    return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0])
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function lexicographicOrder(a, b) {
    return a[0] - b[0] || a[1] - b[1]
  }

  // Computes the upper convex hull per the monotone chain algorithm.
  // Assumes points.length >= 3, is sorted by x, unique in y.
  // Returns an array of indices into points in left-to-right order.
  // @ts-expect-error TS(7006) FIXME: Parameter 'points' implicitly has an 'any' type.
  function computeUpperHullIndexes(points) {
    const n = points.length,
      indexes = [0, 1]
    let size = 2,
      i

    for (i = 2; i < n; ++i) {
      while (size > 1 && cross$1(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size
      indexes[size++] = i
    }

    return indexes.slice(0, size) // remove popped points
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'points' implicitly has an 'any' type.
  function hull(points) {
    if ((n = points.length) < 3) return null

    let i,
      n,
      sortedPoints = new Array(n),
      flippedPoints = new Array(n)

    for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i]
    sortedPoints.sort(lexicographicOrder)
    for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]]

    const upperIndexes = computeUpperHullIndexes(sortedPoints),
      lowerIndexes = computeUpperHullIndexes(flippedPoints)

    // Construct the hull polygon, removing possible duplicate endpoints.
    const skipLeft = lowerIndexes[0] === upperIndexes[0],
      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
      hull = []

    // Add upper hull in right-to-l order.
    // Then add lower hull in left-to-right order.
    for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]])
    // @ts-expect-error TS(2363) FIXME: The right-hand side of an arithmetic operation mus... Remove this comment to see the full error message
    for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]])

    return hull
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'polygon' implicitly has an 'any' type.
  function contains$2(polygon, point) {
    let n = polygon.length,
      p = polygon[n - 1],
      x = point[0],
      y = point[1],
      x0 = p[0],
      y0 = p[1],
      x1,
      y1,
      inside = false

    for (let i = 0; i < n; ++i) {
      ;(p = polygon[i]), (x1 = p[0]), (y1 = p[1])
      if (y1 > y !== y0 > y && x < ((x0 - x1) * (y - y1)) / (y0 - y1) + x1) inside = !inside
      ;(x0 = x1), (y0 = y1)
    }

    return inside
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'polygon' implicitly has an 'any' type.
  function length$3(polygon) {
    let i = -1,
      n = polygon.length,
      b = polygon[n - 1],
      xa,
      ya,
      xb = b[0],
      yb = b[1],
      perimeter = 0

    while (++i < n) {
      xa = xb
      ya = yb
      b = polygon[i]
      xb = b[0]
      yb = b[1]
      xa -= xb
      ya -= yb
      // @ts-expect-error TS(2550) FIXME: Property 'hypot' does not exist on type 'Math'. Do... Remove this comment to see the full error message
      perimeter += Math.hypot(xa, ya)
    }

    return perimeter
  }

  const defaultSource$1 = Math.random

  const uniform = (function sourceRandomUniform(source) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'min' implicitly has an 'any' type.
    function randomUniform(min, max) {
      min = min == null ? 0 : +min
      max = max == null ? 1 : +max
      if (arguments.length === 1) (max = min), (min = 0)
      else max -= min
      return function () {
        return source() * max + min
      }
    }

    randomUniform.source = sourceRandomUniform

    return randomUniform
  })(defaultSource$1)

  const int = (function sourceRandomInt(source) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'min' implicitly has an 'any' type.
    function randomInt(min, max) {
      if (arguments.length < 2) (max = min), (min = 0)
      min = Math.floor(min)
      max = Math.floor(max) - min
      return function () {
        return Math.floor(source() * max + min)
      }
    }

    randomInt.source = sourceRandomInt

    return randomInt
  })(defaultSource$1)

  const normal = (function sourceRandomNormal(source) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'mu' implicitly has an 'any' type.
    function randomNormal(mu, sigma) {
      // @ts-expect-error TS(7034) FIXME: Variable 'x' implicitly has type 'any' in some loc... Remove this comment to see the full error message
      let x, r
      mu = mu == null ? 0 : +mu
      sigma = sigma == null ? 1 : +sigma
      return function () {
        let y

        // If available, use the second previously-generated uniform random.
        // @ts-expect-error TS(7005) FIXME: Variable 'x' implicitly has an 'any' type.
        if (x != null) (y = x), (x = null)
        // Otherwise, generate a new x and y.
        else
          do {
            x = source() * 2 - 1
            y = source() * 2 - 1
            r = x * x + y * y
          } while (!r || r > 1)

        // @ts-expect-error TS(7005) FIXME: Variable 'r' implicitly has an 'any' type.
        return mu + sigma * y * Math.sqrt((-2 * Math.log(r)) / r)
      }
    }

    randomNormal.source = sourceRandomNormal

    return randomNormal
  })(defaultSource$1)

  const logNormal = (function sourceRandomLogNormal(source) {
    const N = normal.source(source)

    function randomLogNormal() {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const randomNormal = N.apply(this, arguments)
      return function () {
        return Math.exp(randomNormal())
      }
    }

    randomLogNormal.source = sourceRandomLogNormal

    return randomLogNormal
  })(defaultSource$1)

  const irwinHall = (function sourceRandomIrwinHall(source) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'n' implicitly has an 'any' type.
    function randomIrwinHall(n) {
      if ((n = +n) <= 0) return () => 0
      return function () {
        for (var sum = 0, i = n; i > 1; --i) sum += source()
        return sum + i * source()
      }
    }

    randomIrwinHall.source = sourceRandomIrwinHall

    return randomIrwinHall
  })(defaultSource$1)

  const bates = (function sourceRandomBates(source) {
    const I = irwinHall.source(source)

    // @ts-expect-error TS(7006) FIXME: Parameter 'n' implicitly has an 'any' type.
    function randomBates(n) {
      // use limiting distribution at n === 0
      if ((n = +n) === 0) return source
      const randomIrwinHall = I(n)
      return function () {
        return randomIrwinHall() / n
      }
    }

    randomBates.source = sourceRandomBates

    return randomBates
  })(defaultSource$1)

  const exponential$1 = (function sourceRandomExponential(source) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
    function randomExponential(lambda) {
      return function () {
        // @ts-expect-error TS(2550) FIXME: Property 'log1p' does not exist on type 'Math'. Do... Remove this comment to see the full error message
        return -Math.log1p(-source()) / lambda
      }
    }

    randomExponential.source = sourceRandomExponential

    return randomExponential
  })(defaultSource$1)

  const pareto = (function sourceRandomPareto(source) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'alpha' implicitly has an 'any' type.
    function randomPareto(alpha) {
      if ((alpha = +alpha) < 0) throw new RangeError('invalid alpha')
      alpha = 1 / -alpha
      return function () {
        return Math.pow(1 - source(), alpha)
      }
    }

    randomPareto.source = sourceRandomPareto

    return randomPareto
  })(defaultSource$1)

  const bernoulli = (function sourceRandomBernoulli(source) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
    function randomBernoulli(p) {
      if ((p = +p) < 0 || p > 1) throw new RangeError('invalid p')
      return function () {
        return Math.floor(source() + p)
      }
    }

    randomBernoulli.source = sourceRandomBernoulli

    return randomBernoulli
  })(defaultSource$1)

  const geometric = (function sourceRandomGeometric(source) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
    function randomGeometric(p) {
      if ((p = +p) < 0 || p > 1) throw new RangeError('invalid p')
      if (p === 0) return () => Infinity
      if (p === 1) return () => 1
      // @ts-expect-error TS(2550) FIXME: Property 'log1p' does not exist on type 'Math'. Do... Remove this comment to see the full error message
      p = Math.log1p(-p)
      return function () {
        // @ts-expect-error TS(2550) FIXME: Property 'log1p' does not exist on type 'Math'. Do... Remove this comment to see the full error message
        return 1 + Math.floor(Math.log1p(-source()) / p)
      }
    }

    randomGeometric.source = sourceRandomGeometric

    return randomGeometric
  })(defaultSource$1)

  const gamma$1 = (function sourceRandomGamma(source) {
    // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 0.
    const randomNormal = normal.source(source)()

    // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
    function randomGamma(k, theta) {
      if ((k = +k) < 0) throw new RangeError('invalid k')
      // degenerate distribution if k === 0
      if (k === 0) return () => 0
      theta = theta == null ? 1 : +theta
      // exponential distribution if k === 1
      // @ts-expect-error TS(2550) FIXME: Property 'log1p' does not exist on type 'Math'. Do... Remove this comment to see the full error message
      if (k === 1) return () => -Math.log1p(-source()) * theta

      const d = (k < 1 ? k + 1 : k) - 1 / 3,
        c = 1 / (3 * Math.sqrt(d)),
        multiplier = k < 1 ? () => Math.pow(source(), 1 / k) : () => 1
      return function () {
        do {
          do {
            var x = randomNormal(),
              v = 1 + c * x
          } while (v <= 0)
          v *= v * v
          var u = 1 - source()
        } while (u >= 1 - 0.0331 * x * x * x * x && Math.log(u) >= 0.5 * x * x + d * (1 - v + Math.log(v)))
        return d * v * multiplier() * theta
      }
    }

    randomGamma.source = sourceRandomGamma

    return randomGamma
  })(defaultSource$1)

  const beta = (function sourceRandomBeta(source) {
    const G = gamma$1.source(source)

    // @ts-expect-error TS(7006) FIXME: Parameter 'alpha' implicitly has an 'any' type.
    function randomBeta(alpha, beta) {
      // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
      const X = G(alpha),
        // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
        Y = G(beta)
      return function () {
        const x = X()
        return x === 0 ? 0 : x / (x + Y())
      }
    }

    randomBeta.source = sourceRandomBeta

    return randomBeta
  })(defaultSource$1)

  const binomial = (function sourceRandomBinomial(source) {
    const G = geometric.source(source),
      B = beta.source(source)

    // @ts-expect-error TS(7006) FIXME: Parameter 'n' implicitly has an 'any' type.
    function randomBinomial(n, p) {
      n = +n
      if ((p = +p) >= 1) return () => n
      if (p <= 0) return () => 0
      return function () {
        let acc = 0,
          nn = n,
          pp = p
        while (nn * pp > 16 && nn * (1 - pp) > 16) {
          const i = Math.floor((nn + 1) * pp),
            y = B(i, nn - i + 1)()
          if (y <= pp) {
            acc += i
            nn -= i
            pp = (pp - y) / (1 - y)
          } else {
            nn = i - 1
            pp /= y
          }
        }
        const sign = pp < 0.5,
          pFinal = sign ? pp : 1 - pp,
          g = G(pFinal)
        for (var s = g(), k = 0; s <= nn; ++k) s += g()
        return acc + (sign ? k : nn - k)
      }
    }

    randomBinomial.source = sourceRandomBinomial

    return randomBinomial
  })(defaultSource$1)

  const weibull = (function sourceRandomWeibull(source) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
    function randomWeibull(k, a, b) {
      // @ts-expect-error TS(7034) FIXME: Variable 'outerFunc' implicitly has type 'any' in ... Remove this comment to see the full error message
      let outerFunc
      if ((k = +k) === 0) {
        // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
        outerFunc = x => -Math.log(x)
      } else {
        k = 1 / k
        // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
        outerFunc = x => Math.pow(x, k)
      }
      a = a == null ? 0 : +a
      b = b == null ? 1 : +b
      return function () {
        // @ts-expect-error TS(7005) FIXME: Variable 'outerFunc' implicitly has an 'any' type.
        return a + b * outerFunc(-Math.log1p(-source()))
      }
    }

    randomWeibull.source = sourceRandomWeibull

    return randomWeibull
  })(defaultSource$1)

  const cauchy = (function sourceRandomCauchy(source) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    function randomCauchy(a, b) {
      a = a == null ? 0 : +a
      b = b == null ? 1 : +b
      return function () {
        return a + b * Math.tan(Math.PI * source())
      }
    }

    randomCauchy.source = sourceRandomCauchy

    return randomCauchy
  })(defaultSource$1)

  const logistic = (function sourceRandomLogistic(source) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    function randomLogistic(a, b) {
      a = a == null ? 0 : +a
      b = b == null ? 1 : +b
      return function () {
        const u = source()
        return a + b * Math.log(u / (1 - u))
      }
    }

    randomLogistic.source = sourceRandomLogistic

    return randomLogistic
  })(defaultSource$1)

  const poisson = (function sourceRandomPoisson(source) {
    const G = gamma$1.source(source),
      B = binomial.source(source)

    // @ts-expect-error TS(7006) FIXME: Parameter 'lambda' implicitly has an 'any' type.
    function randomPoisson(lambda) {
      return function () {
        let acc = 0,
          l = lambda
        while (l > 16) {
          const n = Math.floor(0.875 * l),
            // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
            t = G(n)()
          if (t > l) return acc + B(n - 1, l / t)()
          acc += n
          l -= t
        }
        // @ts-expect-error TS(2550) FIXME: Property 'log1p' does not exist on type 'Math'. Do... Remove this comment to see the full error message
        for (var s = -Math.log1p(-source()), k = 0; s <= l; ++k) s -= Math.log1p(-source())
        return acc + k
      }
    }

    randomPoisson.source = sourceRandomPoisson

    return randomPoisson
  })(defaultSource$1)

  // https://en.wikipedia.org/wiki/Linear_congruential_generator#Parameters_in_common_use
  const mul = 0x19660d
  const inc = 0x3c6ef35f
  const eps = 1 / 0x100000000

  function lcg$1(seed = Math.random()) {
    let state = (0 <= seed && seed < 1 ? seed / eps : Math.abs(seed)) | 0
    return () => ((state = (mul * state + inc) | 0), eps * (state >>> 0))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'domain' implicitly has an 'any' type.
  function initRange(domain, range) {
    switch (arguments.length) {
      case 0:
        break
      case 1:
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.range(domain)
        break
      default:
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.range(range).domain(domain)
        break
    }
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'domain' implicitly has an 'any' type.
  function initInterpolator(domain, interpolator) {
    switch (arguments.length) {
      case 0:
        break
      case 1: {
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        if (typeof domain === 'function') this.interpolator(domain)
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        else this.range(domain)
        break
      }
      default: {
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        this.domain(domain)
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        if (typeof interpolator === 'function') this.interpolator(interpolator)
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        else this.range(interpolator)
        break
      }
    }
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this
  }

  // @ts-expect-error TS(2585) FIXME: 'Symbol' only refers to a type, but is being used ... Remove this comment to see the full error message
  const implicit = Symbol('implicit')

  function ordinal() {
    // @ts-expect-error TS(2583) FIXME: Cannot find name 'Map'. Do you need to change your... Remove this comment to see the full error message
    let index = new Map(),
      // @ts-expect-error TS(7034) FIXME: Variable 'domain' implicitly has type 'any[]' in s... Remove this comment to see the full error message
      domain = [],
      // @ts-expect-error TS(7034) FIXME: Variable 'range' implicitly has type 'any[]' in so... Remove this comment to see the full error message
      range = [],
      unknown = implicit

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function scale(d) {
      let key = d + '',
        i = index.get(key)
      if (!i) {
        if (unknown !== implicit) return unknown
        index.set(key, (i = domain.push(d)))
      }
      // @ts-expect-error TS(7005) FIXME: Variable 'range' implicitly has an 'any[]' type.
      return range[(i - 1) % range.length]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.domain = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'domain' implicitly has an 'any[]' type.
      if (!arguments.length)
        return domain.slice()
        // @ts-expect-error TS(2583) FIXME: Cannot find name 'Map'. Do you need to change your... Remove this comment to see the full error message
      ;(domain = []), (index = new Map())
      for (const value of _) {
        const key = value + ''
        if (index.has(key)) continue
        index.set(key, domain.push(value))
      }
      return scale
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.range = function (_) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      return arguments.length ? ((range = Array.from(_)), scale) : range.slice()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.unknown = function (_) {
      return arguments.length ? ((unknown = _), scale) : unknown
    }

    scale.copy = function () {
      // @ts-expect-error TS(7005) FIXME: Variable 'domain' implicitly has an 'any[]' type.
      return ordinal(domain, range).unknown(unknown)
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    initRange.apply(scale, arguments)

    return scale
  }

  function band() {
    let scale = ordinal().unknown(undefined),
      domain = scale.domain,
      ordinalRange = scale.range,
      r0 = 0,
      r1 = 1,
      // @ts-expect-error TS(7034) FIXME: Variable 'step' implicitly has type 'any' in some ... Remove this comment to see the full error message
      step,
      // @ts-expect-error TS(7034) FIXME: Variable 'bandwidth' implicitly has type 'any' in ... Remove this comment to see the full error message
      bandwidth,
      round = false,
      paddingInner = 0,
      paddingOuter = 0,
      align = 0.5

    delete scale.unknown

    function rescale() {
      let n = domain().length,
        reverse = r1 < r0,
        start = reverse ? r1 : r0,
        stop = reverse ? r0 : r1
      step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2)
      if (round) step = Math.floor(step)
      start += (stop - start - step * (n - paddingInner)) * align
      bandwidth = step * (1 - paddingInner)
      if (round) (start = Math.round(start)), (bandwidth = Math.round(bandwidth))
      // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 1.
      const values = sequence(n).map(function (i) {
        // @ts-expect-error TS(7005) FIXME: Variable 'step' implicitly has an 'any' type.
        return start + step * i
      })
      return ordinalRange(reverse ? values.reverse() : values)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.domain = function (_) {
      return arguments.length ? (domain(_), rescale()) : domain()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.range = function (_) {
      return arguments.length ? (([r0, r1] = _), (r0 = +r0), (r1 = +r1), rescale()) : [r0, r1]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.rangeRound = function (_) {
      return ([r0, r1] = _), (r0 = +r0), (r1 = +r1), (round = true), rescale()
    }

    scale.bandwidth = function () {
      // @ts-expect-error TS(7005) FIXME: Variable 'bandwidth' implicitly has an 'any' type.
      return bandwidth
    }

    scale.step = function () {
      // @ts-expect-error TS(7005) FIXME: Variable 'step' implicitly has an 'any' type.
      return step
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.round = function (_) {
      return arguments.length ? ((round = !!_), rescale()) : round
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.padding = function (_) {
      return arguments.length ? ((paddingInner = Math.min(1, (paddingOuter = +_))), rescale()) : paddingInner
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.paddingInner = function (_) {
      return arguments.length ? ((paddingInner = Math.min(1, _)), rescale()) : paddingInner
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.paddingOuter = function (_) {
      return arguments.length ? ((paddingOuter = +_), rescale()) : paddingOuter
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.align = function (_) {
      return arguments.length ? ((align = Math.max(0, Math.min(1, _))), rescale()) : align
    }

    scale.copy = function () {
      // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 2.
      return band(domain(), [r0, r1]).round(round).paddingInner(paddingInner).paddingOuter(paddingOuter).align(align)
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initRange.apply(rescale(), arguments)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'scale' implicitly has an 'any' type.
  function pointish(scale) {
    const copy = scale.copy

    scale.padding = scale.paddingOuter
    delete scale.paddingInner
    delete scale.paddingOuter

    scale.copy = function () {
      return pointish(copy())
    }

    return scale
  }

  function point() {
    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return pointish(band.apply(null, arguments).paddingInner(1))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function constants(x) {
    return function () {
      return x
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function number$2(x) {
    return +x
  }

  const unit = [0, 1]

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function identity$6(x) {
    return x
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function normalize(a, b) {
    return (b -= a = +a)
      ? // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
        function (x) {
          return (x - a) / b
        }
      : constants(isNaN(b) ? NaN : 0.5)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function clamper(a, b) {
    let t
    if (a > b) (t = a), (a = b), (b = t)
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    return function (x) {
      return Math.max(a, Math.min(b, x))
    }
  }

  // normalize(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
  // interpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding range value x in [a,b].
  // @ts-expect-error TS(7006) FIXME: Parameter 'domain' implicitly has an 'any' type.
  function bimap(domain, range, interpolate) {
    let d0 = domain[0],
      d1 = domain[1],
      r0 = range[0],
      r1 = range[1]
    if (d1 < d0) (d0 = normalize(d1, d0)), (r0 = interpolate(r1, r0))
    else (d0 = normalize(d0, d1)), (r0 = interpolate(r0, r1))
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    return function (x) {
      return r0(d0(x))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'domain' implicitly has an 'any' type.
  function polymap(domain, range, interpolate) {
    let j = Math.min(domain.length, range.length) - 1,
      d = new Array(j),
      r = new Array(j),
      i = -1

    // Reverse descending domains.
    if (domain[j] < domain[0]) {
      domain = domain.slice().reverse()
      range = range.slice().reverse()
    }

    while (++i < j) {
      d[i] = normalize(domain[i], domain[i + 1])
      r[i] = interpolate(range[i], range[i + 1])
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    return function (x) {
      const i = bisectRight(domain, x, 1, j) - 1
      return r[i](d[i](x))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'source' implicitly has an 'any' type.
  function copy(source, target) {
    return target
      .domain(source.domain())
      .range(source.range())
      .interpolate(source.interpolate())
      .clamp(source.clamp())
      .unknown(source.unknown())
  }

  function transformer$1() {
    let domain = unit,
      range = unit,
      interpolate$1 = interpolate,
      // @ts-expect-error TS(7034) FIXME: Variable 'transform' implicitly has type 'any' in ... Remove this comment to see the full error message
      transform,
      // @ts-expect-error TS(7034) FIXME: Variable 'untransform' implicitly has type 'any' i... Remove this comment to see the full error message
      untransform,
      // @ts-expect-error TS(7034) FIXME: Variable 'unknown' implicitly has type 'any' in so... Remove this comment to see the full error message
      unknown,
      clamp = identity$6,
      // @ts-expect-error TS(7034) FIXME: Variable 'piecewise' implicitly has type 'any' in ... Remove this comment to see the full error message
      piecewise,
      // @ts-expect-error TS(7034) FIXME: Variable 'output' implicitly has type 'any' in som... Remove this comment to see the full error message
      output,
      // @ts-expect-error TS(7034) FIXME: Variable 'input' implicitly has type 'any' in some... Remove this comment to see the full error message
      input

    function rescale() {
      const n = Math.min(domain.length, range.length)
      if (clamp !== identity$6) clamp = clamper(domain[0], domain[n - 1])
      piecewise = n > 2 ? polymap : bimap
      output = input = null
      return scale
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function scale(x) {
      return isNaN((x = +x))
        ? // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
          unknown
        : // @ts-expect-error TS(7005) FIXME: Variable 'output' implicitly has an 'any' type.
          (output || (output = piecewise(domain.map(transform), range, interpolate$1)))(transform(clamp(x)))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
    scale.invert = function (y) {
      // @ts-expect-error TS(7005) FIXME: Variable 'untransform' implicitly has an 'any' typ... Remove this comment to see the full error message
      return clamp(untransform((input || (input = piecewise(range, domain.map(transform), interpolateNumber)))(y)))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.domain = function (_) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      return arguments.length ? ((domain = Array.from(_, number$2)), rescale()) : domain.slice()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.range = function (_) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      return arguments.length ? ((range = Array.from(_)), rescale()) : range.slice()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.rangeRound = function (_) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      return (range = Array.from(_)), (interpolate$1 = interpolateRound), rescale()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.clamp = function (_) {
      // @ts-expect-error TS(2322) FIXME: Type 'true | ((x: any) => any)' is not assignable ... Remove this comment to see the full error message
      return arguments.length ? ((clamp = _ ? true : identity$6), rescale()) : clamp !== identity$6
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.interpolate = function (_) {
      return arguments.length ? ((interpolate$1 = _), rescale()) : interpolate$1
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.unknown = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return arguments.length ? ((unknown = _), scale) : unknown
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t, u) {
      ;(transform = t), (untransform = u)
      return rescale()
    }
  }

  function continuous() {
    return transformer$1()(identity$6, identity$6)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
  function tickFormat(start, stop, count, specifier) {
    let step = tickStep(start, stop, count),
      precision
    specifier = formatSpecifier(specifier == null ? ',f' : specifier)
    switch (specifier.type) {
      case 's': {
        const value = Math.max(Math.abs(start), Math.abs(stop))
        if (specifier.precision == null && !isNaN((precision = precisionPrefix(step, value))))
          specifier.precision = precision
        return exports.formatPrefix(specifier, value)
      }
      case '':
      case 'e':
      case 'g':
      case 'p':
      case 'r': {
        if (
          specifier.precision == null &&
          !isNaN((precision = precisionRound(step, Math.max(Math.abs(start), Math.abs(stop)))))
        )
          // @ts-expect-error TS(2363) FIXME: The right-hand side of an arithmetic operation mus... Remove this comment to see the full error message
          specifier.precision = precision - (specifier.type === 'e')
        break
      }
      case 'f':
      case '%': {
        if (specifier.precision == null && !isNaN((precision = precisionFixed(step))))
          // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
          specifier.precision = precision - (specifier.type === '%') * 2
        break
      }
    }
    return exports.format(specifier)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'scale' implicitly has an 'any' type.
  function linearish(scale) {
    const domain = scale.domain

    // @ts-expect-error TS(7006) FIXME: Parameter 'count' implicitly has an 'any' type.
    scale.ticks = function (count) {
      const d = domain()
      return ticks(d[0], d[d.length - 1], count == null ? 10 : count)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'count' implicitly has an 'any' type.
    scale.tickFormat = function (count, specifier) {
      const d = domain()
      return tickFormat(d[0], d[d.length - 1], count == null ? 10 : count, specifier)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'count' implicitly has an 'any' type.
    scale.nice = function (count) {
      if (count == null) count = 10

      const d = domain()
      let i0 = 0
      let i1 = d.length - 1
      let start = d[i0]
      let stop = d[i1]
      let prestep
      let step
      let maxIter = 10

      if (stop < start) {
        ;(step = start), (start = stop), (stop = step)
        ;(step = i0), (i0 = i1), (i1 = step)
      }

      while (maxIter-- > 0) {
        step = tickIncrement(start, stop, count)
        if (step === prestep) {
          d[i0] = start
          d[i1] = stop
          return domain(d)
        } else if (step > 0) {
          start = Math.floor(start / step) * step
          stop = Math.ceil(stop / step) * step
        } else if (step < 0) {
          start = Math.ceil(start * step) / step
          stop = Math.floor(stop * step) / step
        } else {
          break
        }
        prestep = step
      }

      return scale
    }

    return scale
  }

  function linear$2() {
    const scale = continuous()

    // @ts-expect-error TS(2339) FIXME: Property 'copy' does not exist on type '{ (x: any)... Remove this comment to see the full error message
    scale.copy = function () {
      return copy(scale, linear$2())
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    initRange.apply(scale, arguments)

    return linearish(scale)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'domain' implicitly has an 'any' type.
  function identity$7(domain) {
    // @ts-expect-error TS(7034) FIXME: Variable 'unknown' implicitly has type 'any' in so... Remove this comment to see the full error message
    let unknown

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function scale(x) {
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return isNaN((x = +x)) ? unknown : x
    }

    scale.invert = scale

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.domain = scale.range = function (_) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      return arguments.length ? ((domain = Array.from(_, number$2)), scale) : domain.slice()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.unknown = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return arguments.length ? ((unknown = _), scale) : unknown
    }

    scale.copy = function () {
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return identity$7(domain).unknown(unknown)
    }

    // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
    domain = arguments.length ? Array.from(domain, number$2) : [0, 1]

    return linearish(scale)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'domain' implicitly has an 'any' type.
  function nice$1(domain, interval) {
    domain = domain.slice()

    let i0 = 0,
      i1 = domain.length - 1,
      x0 = domain[i0],
      x1 = domain[i1],
      t

    if (x1 < x0) {
      ;(t = i0), (i0 = i1), (i1 = t)
      ;(t = x0), (x0 = x1), (x1 = t)
    }

    domain[i0] = interval.floor(x0)
    domain[i1] = interval.ceil(x1)
    return domain
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function transformLog(x) {
    return Math.log(x)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function transformExp(x) {
    return Math.exp(x)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function transformLogn(x) {
    return -Math.log(-x)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function transformExpn(x) {
    return -Math.exp(-x)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function pow10(x) {
    return isFinite(x) ? +('1e' + x) : x < 0 ? 0 : x
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'base' implicitly has an 'any' type.
  function powp(base) {
    return base === 10
      ? pow10
      : base === Math.E
      ? Math.exp
      : // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
        function (x) {
          return Math.pow(base, x)
        }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'base' implicitly has an 'any' type.
  function logp(base) {
    return base === Math.E
      ? Math.log
      : // @ts-expect-error TS(2550) FIXME: Property 'log10' does not exist on type 'Math'. Do... Remove this comment to see the full error message
        (base === 10 && Math.log10) ||
          // @ts-expect-error TS(2550) FIXME: Property 'log2' does not exist on type 'Math'. Do ... Remove this comment to see the full error message
          (base === 2 && Math.log2) ||
          ((base = Math.log(base)),
          // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
          function (x) {
            return Math.log(x) / base
          })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'f' implicitly has an 'any' type.
  function reflect(f) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    return function (x) {
      return -f(-x)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'transform' implicitly has an 'any' type... Remove this comment to see the full error message
  function loggish(transform) {
    let scale = transform(transformLog, transformExp),
      domain = scale.domain,
      base = 10,
      // @ts-expect-error TS(7034) FIXME: Variable 'logs' implicitly has type 'any' in some ... Remove this comment to see the full error message
      logs,
      // @ts-expect-error TS(7034) FIXME: Variable 'pows' implicitly has type 'any' in some ... Remove this comment to see the full error message
      pows

    function rescale() {
      ;(logs = logp(base)), (pows = powp(base))
      if (domain()[0] < 0) {
        ;(logs = reflect(logs)), (pows = reflect(pows))
        transform(transformLogn, transformExpn)
      } else {
        transform(transformLog, transformExp)
      }
      return scale
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.base = function (_) {
      return arguments.length ? ((base = +_), rescale()) : base
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.domain = function (_) {
      return arguments.length ? (domain(_), rescale()) : domain()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'count' implicitly has an 'any' type.
    scale.ticks = function (count) {
      let d = domain(),
        u = d[0],
        v = d[d.length - 1],
        r

      if ((r = v < u)) (i = u), (u = v), (v = i)

      // @ts-expect-error TS(7005) FIXME: Variable 'logs' implicitly has an 'any' type.
      var i = logs(u),
        // @ts-expect-error TS(7005) FIXME: Variable 'logs' implicitly has an 'any' type.
        j = logs(v),
        p,
        k,
        t,
        n = count == null ? 10 : +count,
        z = []

      if (!(base % 1) && j - i < n) {
        ;(i = Math.floor(i)), (j = Math.ceil(j))
        if (u > 0)
          for (; i <= j; ++i) {
            // @ts-expect-error TS(7005) FIXME: Variable 'pows' implicitly has an 'any' type.
            for (k = 1, p = pows(i); k < base; ++k) {
              t = p * k
              if (t < u) continue
              if (t > v) break
              z.push(t)
            }
          }
        else
          for (; i <= j; ++i) {
            // @ts-expect-error TS(7005) FIXME: Variable 'pows' implicitly has an 'any' type.
            for (k = base - 1, p = pows(i); k >= 1; --k) {
              t = p * k
              if (t < u) continue
              if (t > v) break
              z.push(t)
            }
          }
        if (z.length * 2 < n) z = ticks(u, v, n)
      } else {
        // @ts-expect-error TS(7005) FIXME: Variable 'pows' implicitly has an 'any' type.
        z = ticks(i, j, Math.min(j - i, n)).map(pows)
      }

      return r ? z.reverse() : z
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'count' implicitly has an 'any' type.
    scale.tickFormat = function (count, specifier) {
      if (specifier == null) specifier = base === 10 ? '.0e' : ','
      if (typeof specifier !== 'function') specifier = exports.format(specifier)
      if (count === Infinity) return specifier
      if (count == null) count = 10
      const k = Math.max(1, (base * count) / scale.ticks().length) // TODO fast estimate?
      // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
      return function (d) {
        // @ts-expect-error TS(7005) FIXME: Variable 'pows' implicitly has an 'any' type.
        let i = d / pows(Math.round(logs(d)))
        if (i * base < base - 0.5) i *= base
        return i <= k ? specifier(d) : ''
      }
    }

    scale.nice = function () {
      return domain(
        nice$1(domain(), {
          // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
          floor: function (x) {
            // @ts-expect-error TS(7005) FIXME: Variable 'pows' implicitly has an 'any' type.
            return pows(Math.floor(logs(x)))
          },
          // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
          ceil: function (x) {
            // @ts-expect-error TS(7005) FIXME: Variable 'pows' implicitly has an 'any' type.
            return pows(Math.ceil(logs(x)))
          },
        })
      )
    }

    return scale
  }

  function log$1() {
    const scale = loggish(transformer$1()).domain([1, 10])

    scale.copy = function () {
      return copy(scale, log$1()).base(scale.base())
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    initRange.apply(scale, arguments)

    return scale
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'c' implicitly has an 'any' type.
  function transformSymlog(c) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    return function (x) {
      // @ts-expect-error TS(2550) FIXME: Property 'sign' does not exist on type 'Math'. Do ... Remove this comment to see the full error message
      return Math.sign(x) * Math.log1p(Math.abs(x / c))
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'c' implicitly has an 'any' type.
  function transformSymexp(c) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    return function (x) {
      // @ts-expect-error TS(2550) FIXME: Property 'sign' does not exist on type 'Math'. Do ... Remove this comment to see the full error message
      return Math.sign(x) * Math.expm1(Math.abs(x)) * c
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'transform' implicitly has an 'any' type... Remove this comment to see the full error message
  function symlogish(transform) {
    let c = 1,
      scale = transform(transformSymlog(c), transformSymexp(c))

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.constant = function (_) {
      return arguments.length ? transform(transformSymlog((c = +_)), transformSymexp(c)) : c
    }

    return linearish(scale)
  }

  function symlog() {
    const scale = symlogish(transformer$1())

    scale.copy = function () {
      return copy(scale, symlog()).constant(scale.constant())
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initRange.apply(scale, arguments)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'exponent' implicitly has an 'any' type.
  function transformPow(exponent) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    return function (x) {
      return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent)
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function transformSqrt(x) {
    return x < 0 ? -Math.sqrt(-x) : Math.sqrt(x)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function transformSquare(x) {
    return x < 0 ? -x * x : x * x
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'transform' implicitly has an 'any' type... Remove this comment to see the full error message
  function powish(transform) {
    let scale = transform(identity$6, identity$6),
      exponent = 1

    function rescale() {
      return exponent === 1
        ? transform(identity$6, identity$6)
        : exponent === 0.5
        ? transform(transformSqrt, transformSquare)
        : transform(transformPow(exponent), transformPow(1 / exponent))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.exponent = function (_) {
      return arguments.length ? ((exponent = +_), rescale()) : exponent
    }

    return linearish(scale)
  }

  function pow$2() {
    const scale = powish(transformer$1())

    scale.copy = function () {
      return copy(scale, pow$2()).exponent(scale.exponent())
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    initRange.apply(scale, arguments)

    return scale
  }

  function sqrt$1() {
    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return pow$2.apply(null, arguments).exponent(0.5)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function square(x) {
    // @ts-expect-error TS(2550) FIXME: Property 'sign' does not exist on type 'Math'. Do ... Remove this comment to see the full error message
    return Math.sign(x) * x * x
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function unsquare(x) {
    // @ts-expect-error TS(2550) FIXME: Property 'sign' does not exist on type 'Math'. Do ... Remove this comment to see the full error message
    return Math.sign(x) * Math.sqrt(Math.abs(x))
  }

  function radial$1() {
    let squared = continuous(),
      range = [0, 1],
      round = false,
      // @ts-expect-error TS(7034) FIXME: Variable 'unknown' implicitly has type 'any' in so... Remove this comment to see the full error message
      unknown

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function scale(x) {
      const y = unsquare(squared(x))
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return isNaN(y) ? unknown : round ? Math.round(y) : y
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
    scale.invert = function (y) {
      return squared.invert(square(y))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.domain = function (_) {
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
      return arguments.length ? (squared.domain(_), scale) : squared.domain()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.range = function (_) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      return arguments.length ? (squared.range((range = Array.from(_, number$2)).map(square)), scale) : range.slice()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.rangeRound = function (_) {
      // @ts-expect-error TS(2339) FIXME: Property 'round' does not exist on type 'number[] ... Remove this comment to see the full error message
      return scale.range(_).round(true)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.round = function (_) {
      return arguments.length ? ((round = !!_), scale) : round
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.clamp = function (_) {
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
      return arguments.length ? (squared.clamp(_), scale) : squared.clamp()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.unknown = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return arguments.length ? ((unknown = _), scale) : unknown
    }

    scale.copy = function () {
      return (
        // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 2.
        radial$1(squared.domain(), range)
          .round(round)
          // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
          .clamp(squared.clamp())
          // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
          .unknown(unknown)
      )
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    initRange.apply(scale, arguments)

    return linearish(scale)
  }

  function quantile$1() {
    // @ts-expect-error TS(7034) FIXME: Variable 'domain' implicitly has type 'any[]' in s... Remove this comment to see the full error message
    let domain = [],
      // @ts-expect-error TS(7034) FIXME: Variable 'range' implicitly has type 'any[]' in so... Remove this comment to see the full error message
      range = [],
      // @ts-expect-error TS(7034) FIXME: Variable 'thresholds' implicitly has type 'any[]' ... Remove this comment to see the full error message
      thresholds = [],
      // @ts-expect-error TS(7034) FIXME: Variable 'unknown' implicitly has type 'any' in so... Remove this comment to see the full error message
      unknown

    function rescale() {
      let i = 0,
        n = Math.max(1, range.length)
      thresholds = new Array(n - 1)
      // @ts-expect-error TS(7005) FIXME: Variable 'domain' implicitly has an 'any[]' type.
      while (++i < n) thresholds[i - 1] = quantileSorted(domain, i / n)
      return scale
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function scale(x) {
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return isNaN((x = +x)) ? unknown : range[bisectRight(thresholds, x)]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
    scale.invertExtent = function (y) {
      // @ts-expect-error TS(7005) FIXME: Variable 'range' implicitly has an 'any[]' type.
      const i = range.indexOf(y)
      return i < 0
        ? [NaN, NaN]
        : [
            // @ts-expect-error TS(7005) FIXME: Variable 'thresholds' implicitly has an 'any[]' ty... Remove this comment to see the full error message
            i > 0 ? thresholds[i - 1] : domain[0],
            // @ts-expect-error TS(7005) FIXME: Variable 'thresholds' implicitly has an 'any[]' ty... Remove this comment to see the full error message
            i < thresholds.length ? thresholds[i] : domain[domain.length - 1],
          ]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.domain = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'domain' implicitly has an 'any[]' type.
      if (!arguments.length) return domain.slice()
      domain = []
      for (let d of _) if (d != null && !isNaN((d = +d))) domain.push(d)
      domain.sort(ascending)
      return rescale()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.range = function (_) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      return arguments.length ? ((range = Array.from(_)), rescale()) : range.slice()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.unknown = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return arguments.length ? ((unknown = _), scale) : unknown
    }

    scale.quantiles = function () {
      // @ts-expect-error TS(7005) FIXME: Variable 'thresholds' implicitly has an 'any[]' ty... Remove this comment to see the full error message
      return thresholds.slice()
    }

    scale.copy = function () {
      return (
        quantile$1()
          // @ts-expect-error TS(7005) FIXME: Variable 'domain' implicitly has an 'any[]' type.
          .domain(domain)
          // @ts-expect-error TS(7005) FIXME: Variable 'range' implicitly has an 'any[]' type.
          .range(range)
          // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
          .unknown(unknown)
      )
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initRange.apply(scale, arguments)
  }

  function quantize$1() {
    let x0 = 0,
      x1 = 1,
      n = 1,
      domain = [0.5],
      range = [0, 1],
      // @ts-expect-error TS(7034) FIXME: Variable 'unknown' implicitly has type 'any' in so... Remove this comment to see the full error message
      unknown

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function scale(x) {
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown
    }

    function rescale() {
      let i = -1
      domain = new Array(n)
      while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1)
      return scale
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.domain = function (_) {
      return arguments.length ? (([x0, x1] = _), (x0 = +x0), (x1 = +x1), rescale()) : [x0, x1]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.range = function (_) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      return arguments.length ? ((n = (range = Array.from(_)).length - 1), rescale()) : range.slice()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
    scale.invertExtent = function (y) {
      const i = range.indexOf(y)
      return i < 0 ? [NaN, NaN] : i < 1 ? [x0, domain[0]] : i >= n ? [domain[n - 1], x1] : [domain[i - 1], domain[i]]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.unknown = function (_) {
      return arguments.length ? ((unknown = _), scale) : scale
    }

    scale.thresholds = function () {
      return domain.slice()
    }

    scale.copy = function () {
      return (
        quantize$1()
          .domain([x0, x1])
          .range(range)
          // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
          .unknown(unknown)
      )
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initRange.apply(linearish(scale), arguments)
  }

  function threshold() {
    let domain = [0.5],
      range = [0, 1],
      // @ts-expect-error TS(7034) FIXME: Variable 'unknown' implicitly has type 'any' in so... Remove this comment to see the full error message
      unknown,
      n = 1

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function scale(x) {
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return x <= x ? range[bisectRight(domain, x, 0, n)] : unknown
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.domain = function (_) {
      return arguments.length
        ? // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
          ((domain = Array.from(_)), (n = Math.min(domain.length, range.length - 1)), scale)
        : domain.slice()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.range = function (_) {
      return arguments.length
        ? // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
          ((range = Array.from(_)), (n = Math.min(domain.length, range.length - 1)), scale)
        : range.slice()
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
    scale.invertExtent = function (y) {
      const i = range.indexOf(y)
      return [domain[i - 1], domain[i]]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.unknown = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return arguments.length ? ((unknown = _), scale) : unknown
    }

    scale.copy = function () {
      return (
        threshold()
          .domain(domain)
          .range(range)
          // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
          .unknown(unknown)
      )
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initRange.apply(scale, arguments)
  }

  const t0$1 = new Date(),
    t1$1 = new Date()

  // @ts-expect-error TS(7006) FIXME: Parameter 'floori' implicitly has an 'any' type.
  function newInterval(floori, offseti, count, field) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function interval(date) {
      return floori((date = arguments.length === 0 ? new Date() : new Date(+date))), date
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    interval.floor = function (date) {
      return floori((date = new Date(+date))), date
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    interval.ceil = function (date) {
      return floori((date = new Date(date - 1))), offseti(date, 1), floori(date), date
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    interval.round = function (date) {
      const d0 = interval(date),
        d1 = interval.ceil(date)
      return date - d0 < d1 - date ? d0 : d1
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    interval.offset = function (date, step) {
      return offseti((date = new Date(+date)), step == null ? 1 : Math.floor(step)), date
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    interval.range = function (start, stop, step) {
      // @ts-expect-error TS(7034) FIXME: Variable 'range' implicitly has type 'any[]' in so... Remove this comment to see the full error message
      let range = [],
        previous
      start = interval.ceil(start)
      step = step == null ? 1 : Math.floor(step)
      // @ts-expect-error TS(7005) FIXME: Variable 'range' implicitly has an 'any[]' type.
      if (!(start < stop) || !(step > 0)) return range // also handles Invalid Date
      do range.push((previous = new Date(+start))), offseti(start, step), floori(start)
      while (previous < start && start < stop)
      return range
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'test' implicitly has an 'any' type.
    interval.filter = function (test) {
      // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 2.
      return newInterval(
        // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
        function (date) {
          if (date >= date) while ((floori(date), !test(date))) date.setTime(date - 1)
        },
        // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
        function (date, step) {
          if (date >= date) {
            if (step < 0)
              while (++step <= 0) {
                while ((offseti(date, -1), !test(date))) {} // eslint-disable-line no-empty
              }
            else
              while (--step >= 0) {
                while ((offseti(date, +1), !test(date))) {} // eslint-disable-line no-empty
              }
          }
        }
      )
    }

    if (count) {
      // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
      interval.count = function (start, end) {
        t0$1.setTime(+start), t1$1.setTime(+end)
        floori(t0$1), floori(t1$1)
        return Math.floor(count(t0$1, t1$1))
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'step' implicitly has an 'any' type.
      interval.every = function (step) {
        step = Math.floor(step)
        return !isFinite(step) || !(step > 0)
          ? null
          : !(step > 1)
          ? interval
          : interval.filter(
              field
                ? // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
                  function (d) {
                    return field(d) % step === 0
                  }
                : // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
                  function (d) {
                    return interval.count(0, d) % step === 0
                  }
            )
      }
    }

    return interval
  }

  // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 3.
  const millisecond = newInterval(
    function () {
      // noop
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date, step) {
      date.setTime(+date + step)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    function (start, end) {
      return end - start
    }
  )

  // An optimized implementation for this simple case.
  millisecond.every = function (k) {
    k = Math.floor(k)
    if (!isFinite(k) || !(k > 0)) return null
    if (!(k > 1)) return millisecond
    // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 3.
    return newInterval(
      // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
      function (date) {
        date.setTime(Math.floor(date / k) * k)
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
      function (date, step) {
        date.setTime(+date + step * k)
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
      function (start, end) {
        return (end - start) / k
      }
    )
  }
  const milliseconds = millisecond.range

  const durationSecond = 1e3
  const durationMinute = 6e4
  const durationHour = 36e5
  const durationDay = 864e5
  const durationWeek = 6048e5

  const second = newInterval(
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      date.setTime(date - date.getMilliseconds())
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date, step) {
      date.setTime(+date + step * durationSecond)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    function (start, end) {
      return (end - start) / durationSecond
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      return date.getUTCSeconds()
    }
  )
  const seconds = second.range

  const minute = newInterval(
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      date.setTime(date - date.getMilliseconds() - date.getSeconds() * durationSecond)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date, step) {
      date.setTime(+date + step * durationMinute)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    function (start, end) {
      return (end - start) / durationMinute
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      return date.getMinutes()
    }
  )
  const minutes = minute.range

  const hour = newInterval(
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      date.setTime(
        date - date.getMilliseconds() - date.getSeconds() * durationSecond - date.getMinutes() * durationMinute
      )
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date, step) {
      date.setTime(+date + step * durationHour)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    function (start, end) {
      return (end - start) / durationHour
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      return date.getHours()
    }
  )
  const hours = hour.range

  const day = newInterval(
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    date => date.setHours(0, 0, 0, 0),
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    (date, step) => date.setDate(date.getDate() + step),
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    (start, end) =>
      (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay,
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    date => date.getDate() - 1
  )
  const days = day.range

  // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
  function weekday(i) {
    // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 3.
    return newInterval(
      // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
      function (date) {
        date.setDate(date.getDate() - ((date.getDay() + 7 - i) % 7))
        date.setHours(0, 0, 0, 0)
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
      function (date, step) {
        date.setDate(date.getDate() + step * 7)
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
      function (start, end) {
        return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek
      }
    )
  }

  const sunday = weekday(0)
  const monday = weekday(1)
  const tuesday = weekday(2)
  const wednesday = weekday(3)
  const thursday = weekday(4)
  const friday = weekday(5)
  const saturday = weekday(6)

  const sundays = sunday.range
  const mondays = monday.range
  const tuesdays = tuesday.range
  const wednesdays = wednesday.range
  const thursdays = thursday.range
  const fridays = friday.range
  const saturdays = saturday.range

  const month = newInterval(
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      date.setDate(1)
      date.setHours(0, 0, 0, 0)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date, step) {
      date.setMonth(date.getMonth() + step)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    function (start, end) {
      return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      return date.getMonth()
    }
  )
  const months = month.range

  const year = newInterval(
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      date.setMonth(0, 1)
      date.setHours(0, 0, 0, 0)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date, step) {
      date.setFullYear(date.getFullYear() + step)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    function (start, end) {
      return end.getFullYear() - start.getFullYear()
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      return date.getFullYear()
    }
  )

  // An optimized implementation for this simple case.
  year.every = function (k) {
    return !isFinite((k = Math.floor(k))) || !(k > 0)
      ? null
      : // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 2.
        newInterval(
          // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
          function (date) {
            date.setFullYear(Math.floor(date.getFullYear() / k) * k)
            date.setMonth(0, 1)
            date.setHours(0, 0, 0, 0)
          },
          // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
          function (date, step) {
            date.setFullYear(date.getFullYear() + step * k)
          }
        )
  }
  const years = year.range

  const utcMinute = newInterval(
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      date.setUTCSeconds(0, 0)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date, step) {
      date.setTime(+date + step * durationMinute)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    function (start, end) {
      return (end - start) / durationMinute
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      return date.getUTCMinutes()
    }
  )
  const utcMinutes = utcMinute.range

  const utcHour = newInterval(
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      date.setUTCMinutes(0, 0, 0)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date, step) {
      date.setTime(+date + step * durationHour)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    function (start, end) {
      return (end - start) / durationHour
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      return date.getUTCHours()
    }
  )
  const utcHours = utcHour.range

  const utcDay = newInterval(
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      date.setUTCHours(0, 0, 0, 0)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date, step) {
      date.setUTCDate(date.getUTCDate() + step)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    function (start, end) {
      return (end - start) / durationDay
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      return date.getUTCDate() - 1
    }
  )
  const utcDays = utcDay.range

  // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
  function utcWeekday(i) {
    // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 3.
    return newInterval(
      // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
      function (date) {
        date.setUTCDate(date.getUTCDate() - ((date.getUTCDay() + 7 - i) % 7))
        date.setUTCHours(0, 0, 0, 0)
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
      function (date, step) {
        date.setUTCDate(date.getUTCDate() + step * 7)
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
      function (start, end) {
        return (end - start) / durationWeek
      }
    )
  }

  const utcSunday = utcWeekday(0)
  const utcMonday = utcWeekday(1)
  const utcTuesday = utcWeekday(2)
  const utcWednesday = utcWeekday(3)
  const utcThursday = utcWeekday(4)
  const utcFriday = utcWeekday(5)
  const utcSaturday = utcWeekday(6)

  const utcSundays = utcSunday.range
  const utcMondays = utcMonday.range
  const utcTuesdays = utcTuesday.range
  const utcWednesdays = utcWednesday.range
  const utcThursdays = utcThursday.range
  const utcFridays = utcFriday.range
  const utcSaturdays = utcSaturday.range

  const utcMonth = newInterval(
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      date.setUTCDate(1)
      date.setUTCHours(0, 0, 0, 0)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date, step) {
      date.setUTCMonth(date.getUTCMonth() + step)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    function (start, end) {
      return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      return date.getUTCMonth()
    }
  )
  const utcMonths = utcMonth.range

  const utcYear = newInterval(
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      date.setUTCMonth(0, 1)
      date.setUTCHours(0, 0, 0, 0)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date, step) {
      date.setUTCFullYear(date.getUTCFullYear() + step)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'start' implicitly has an 'any' type.
    function (start, end) {
      return end.getUTCFullYear() - start.getUTCFullYear()
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function (date) {
      return date.getUTCFullYear()
    }
  )

  // An optimized implementation for this simple case.
  utcYear.every = function (k) {
    return !isFinite((k = Math.floor(k))) || !(k > 0)
      ? null
      : // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 2.
        newInterval(
          // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
          function (date) {
            date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k)
            date.setUTCMonth(0, 1)
            date.setUTCHours(0, 0, 0, 0)
          },
          // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
          function (date, step) {
            date.setUTCFullYear(date.getUTCFullYear() + step * k)
          }
        )
  }
  const utcYears = utcYear.range

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function localDate(d) {
    if (0 <= d.y && d.y < 100) {
      const date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L)
      date.setFullYear(d.y)
      return date
    }
    return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function utcDate(d) {
    if (0 <= d.y && d.y < 100) {
      const date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L))
      date.setUTCFullYear(d.y)
      return date
    }
    return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
  function newDate(y, m, d) {
    return { y: y, m: m, d: d, H: 0, M: 0, S: 0, L: 0 }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'locale' implicitly has an 'any' type.
  function formatLocale$1(locale) {
    const locale_dateTime = locale.dateTime,
      locale_date = locale.date,
      locale_time = locale.time,
      locale_periods = locale.periods,
      locale_weekdays = locale.days,
      locale_shortWeekdays = locale.shortDays,
      locale_months = locale.months,
      locale_shortMonths = locale.shortMonths

    const periodRe = formatRe(locale_periods),
      periodLookup = formatLookup(locale_periods),
      weekdayRe = formatRe(locale_weekdays),
      weekdayLookup = formatLookup(locale_weekdays),
      shortWeekdayRe = formatRe(locale_shortWeekdays),
      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
      monthRe = formatRe(locale_months),
      monthLookup = formatLookup(locale_months),
      shortMonthRe = formatRe(locale_shortMonths),
      shortMonthLookup = formatLookup(locale_shortMonths)

    const formats = {
      a: formatShortWeekday,
      A: formatWeekday,
      b: formatShortMonth,
      B: formatMonth,
      c: null,
      d: formatDayOfMonth,
      e: formatDayOfMonth,
      f: formatMicroseconds,
      g: formatYearISO,
      G: formatFullYearISO,
      H: formatHour24,
      I: formatHour12,
      j: formatDayOfYear,
      L: formatMilliseconds,
      m: formatMonthNumber,
      M: formatMinutes,
      p: formatPeriod,
      q: formatQuarter,
      Q: formatUnixTimestamp,
      s: formatUnixTimestampSeconds,
      S: formatSeconds,
      u: formatWeekdayNumberMonday,
      U: formatWeekNumberSunday,
      V: formatWeekNumberISO,
      w: formatWeekdayNumberSunday,
      W: formatWeekNumberMonday,
      x: null,
      X: null,
      y: formatYear$1,
      Y: formatFullYear,
      Z: formatZone,
      '%': formatLiteralPercent,
    }

    const utcFormats = {
      a: formatUTCShortWeekday,
      A: formatUTCWeekday,
      b: formatUTCShortMonth,
      B: formatUTCMonth,
      c: null,
      d: formatUTCDayOfMonth,
      e: formatUTCDayOfMonth,
      f: formatUTCMicroseconds,
      g: formatUTCYearISO,
      G: formatUTCFullYearISO,
      H: formatUTCHour24,
      I: formatUTCHour12,
      j: formatUTCDayOfYear,
      L: formatUTCMilliseconds,
      m: formatUTCMonthNumber,
      M: formatUTCMinutes,
      p: formatUTCPeriod,
      q: formatUTCQuarter,
      Q: formatUnixTimestamp,
      s: formatUnixTimestampSeconds,
      S: formatUTCSeconds,
      u: formatUTCWeekdayNumberMonday,
      U: formatUTCWeekNumberSunday,
      V: formatUTCWeekNumberISO,
      w: formatUTCWeekdayNumberSunday,
      W: formatUTCWeekNumberMonday,
      x: null,
      X: null,
      y: formatUTCYear,
      Y: formatUTCFullYear,
      Z: formatUTCZone,
      '%': formatLiteralPercent,
    }

    const parses = {
      a: parseShortWeekday,
      A: parseWeekday,
      b: parseShortMonth,
      B: parseMonth,
      c: parseLocaleDateTime,
      d: parseDayOfMonth,
      e: parseDayOfMonth,
      f: parseMicroseconds,
      g: parseYear,
      G: parseFullYear,
      H: parseHour24,
      I: parseHour24,
      j: parseDayOfYear,
      L: parseMilliseconds,
      m: parseMonthNumber,
      M: parseMinutes,
      p: parsePeriod,
      q: parseQuarter,
      Q: parseUnixTimestamp,
      s: parseUnixTimestampSeconds,
      S: parseSeconds,
      u: parseWeekdayNumberMonday,
      U: parseWeekNumberSunday,
      V: parseWeekNumberISO,
      w: parseWeekdayNumberSunday,
      W: parseWeekNumberMonday,
      x: parseLocaleDate,
      X: parseLocaleTime,
      y: parseYear,
      Y: parseFullYear,
      Z: parseZone,
      '%': parseLiteralPercent,
    }

    // These recursive directive definitions must be deferred.
    // @ts-expect-error TS(2322) FIXME: Type '(date: any) => string' is not assignable to ... Remove this comment to see the full error message
    formats.x = newFormat(locale_date, formats)
    // @ts-expect-error TS(2322) FIXME: Type '(date: any) => string' is not assignable to ... Remove this comment to see the full error message
    formats.X = newFormat(locale_time, formats)
    // @ts-expect-error TS(2322) FIXME: Type '(date: any) => string' is not assignable to ... Remove this comment to see the full error message
    formats.c = newFormat(locale_dateTime, formats)
    // @ts-expect-error TS(2322) FIXME: Type '(date: any) => string' is not assignable to ... Remove this comment to see the full error message
    utcFormats.x = newFormat(locale_date, utcFormats)
    // @ts-expect-error TS(2322) FIXME: Type '(date: any) => string' is not assignable to ... Remove this comment to see the full error message
    utcFormats.X = newFormat(locale_time, utcFormats)
    // @ts-expect-error TS(2322) FIXME: Type '(date: any) => string' is not assignable to ... Remove this comment to see the full error message
    utcFormats.c = newFormat(locale_dateTime, utcFormats)

    // @ts-expect-error TS(7006) FIXME: Parameter 'specifier' implicitly has an 'any' type... Remove this comment to see the full error message
    function newFormat(specifier, formats) {
      // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
      return function (date) {
        let string = [],
          i = -1,
          j = 0,
          n = specifier.length,
          c,
          pad,
          format

        if (!(date instanceof Date)) date = new Date(+date)

        while (++i < n) {
          if (specifier.charCodeAt(i) === 37) {
            string.push(specifier.slice(j, i))
            // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
            if ((pad = pads[(c = specifier.charAt(++i))]) != null) c = specifier.charAt(++i)
            else pad = c === 'e' ? ' ' : '0'
            if ((format = formats[c])) c = format(date, pad)
            string.push(c)
            j = i + 1
          }
        }

        string.push(specifier.slice(j, i))
        return string.join('')
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'specifier' implicitly has an 'any' type... Remove this comment to see the full error message
    function newParse(specifier, Z) {
      // @ts-expect-error TS(7006) FIXME: Parameter 'string' implicitly has an 'any' type.
      return function (string) {
        let d = newDate(1900, undefined, 1),
          i = parseSpecifier(d, specifier, (string += ''), 0),
          week,
          day$1
        if (i != string.length) return null

        // If a UNIX timestamp is specified, return it.
        // @ts-expect-error TS(2339) FIXME: Property 'Q' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
        if ('Q' in d) return new Date(d.Q)
        // @ts-expect-error TS(2551) FIXME: Property 's' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
        if ('s' in d) return new Date(d.s * 1000 + ('L' in d ? d.L : 0))

        // If this is utcParse, never use the local timezone.
        // @ts-expect-error TS(2339) FIXME: Property 'Z' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
        if (Z && !('Z' in d)) d.Z = 0

        // The am-pm flag is 0 for AM, and 1 for PM.
        // @ts-expect-error TS(2339) FIXME: Property 'p' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
        if ('p' in d) d.H = (d.H % 12) + d.p * 12

        // If the month was not specified, inherit from the quarter.
        // @ts-expect-error TS(2339) FIXME: Property 'q' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
        if (d.m === undefined) d.m = 'q' in d ? d.q : 0

        // Convert day-of-week and week-of-year to day-of-year.
        if ('V' in d) {
          // @ts-expect-error TS(2339) FIXME: Property 'V' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
          if (d.V < 1 || d.V > 53) return null
          // @ts-expect-error TS(2339) FIXME: Property 'w' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
          if (!('w' in d)) d.w = 1
          if ('Z' in d) {
            ;(week = utcDate(newDate(d.y, 0, 1))), (day$1 = week.getUTCDay())
            week = day$1 > 4 || day$1 === 0 ? utcMonday.ceil(week) : utcMonday(week)
            // @ts-expect-error TS(2339) FIXME: Property 'V' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
            week = utcDay.offset(week, (d.V - 1) * 7)
            d.y = week.getUTCFullYear()
            d.m = week.getUTCMonth()
            // @ts-expect-error TS(2339) FIXME: Property 'w' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
            d.d = week.getUTCDate() + ((d.w + 6) % 7)
          } else {
            ;(week = localDate(newDate(d.y, 0, 1))), (day$1 = week.getDay())
            week = day$1 > 4 || day$1 === 0 ? monday.ceil(week) : monday(week)
            // @ts-expect-error TS(2339) FIXME: Property 'V' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
            week = day.offset(week, (d.V - 1) * 7)
            d.y = week.getFullYear()
            d.m = week.getMonth()
            // @ts-expect-error TS(2339) FIXME: Property 'w' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
            d.d = week.getDate() + ((d.w + 6) % 7)
          }
        } else if ('W' in d || 'U' in d) {
          // @ts-expect-error TS(2339) FIXME: Property 'w' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
          if (!('w' in d)) d.w = 'u' in d ? d.u % 7 : 'W' in d ? 1 : 0
          day$1 = 'Z' in d ? utcDate(newDate(d.y, 0, 1)).getUTCDay() : localDate(newDate(d.y, 0, 1)).getDay()
          d.m = 0
          // @ts-expect-error TS(2339) FIXME: Property 'w' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
          d.d = 'W' in d ? ((d.w + 6) % 7) + d.W * 7 - ((day$1 + 5) % 7) : d.w + d.U * 7 - ((day$1 + 6) % 7)
        }

        // If a time zone is specified, all fields are interpreted as UTC and then
        // offset according to the specified time zone.
        if ('Z' in d) {
          // @ts-expect-error TS(2339) FIXME: Property 'Z' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
          d.H += (d.Z / 100) | 0
          // @ts-expect-error TS(2339) FIXME: Property 'Z' does not exist on type '{ y: any; m: ... Remove this comment to see the full error message
          d.M += d.Z % 100
          return utcDate(d)
        }

        // Otherwise, all fields are in local time.
        return localDate(d)
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function parseSpecifier(d, specifier, string, j) {
      let i = 0,
        n = specifier.length,
        m = string.length,
        c,
        parse

      while (i < n) {
        if (j >= m) return -1
        c = specifier.charCodeAt(i++)
        if (c === 37) {
          c = specifier.charAt(i++)
          // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
          parse = parses[c in pads ? specifier.charAt(i++) : c]
          if (!parse || (j = parse(d, string, j)) < 0) return -1
        } else if (c != string.charCodeAt(j++)) {
          return -1
        }
      }

      return j
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function parsePeriod(d, string, i) {
      const n = periodRe.exec(string.slice(i))
      return n ? ((d.p = periodLookup.get(n[0].toLowerCase())), i + n[0].length) : -1
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function parseShortWeekday(d, string, i) {
      const n = shortWeekdayRe.exec(string.slice(i))
      return n ? ((d.w = shortWeekdayLookup.get(n[0].toLowerCase())), i + n[0].length) : -1
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function parseWeekday(d, string, i) {
      const n = weekdayRe.exec(string.slice(i))
      return n ? ((d.w = weekdayLookup.get(n[0].toLowerCase())), i + n[0].length) : -1
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function parseShortMonth(d, string, i) {
      const n = shortMonthRe.exec(string.slice(i))
      return n ? ((d.m = shortMonthLookup.get(n[0].toLowerCase())), i + n[0].length) : -1
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function parseMonth(d, string, i) {
      const n = monthRe.exec(string.slice(i))
      return n ? ((d.m = monthLookup.get(n[0].toLowerCase())), i + n[0].length) : -1
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function parseLocaleDateTime(d, string, i) {
      return parseSpecifier(d, locale_dateTime, string, i)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function parseLocaleDate(d, string, i) {
      return parseSpecifier(d, locale_date, string, i)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function parseLocaleTime(d, string, i) {
      return parseSpecifier(d, locale_time, string, i)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function formatShortWeekday(d) {
      return locale_shortWeekdays[d.getDay()]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function formatWeekday(d) {
      return locale_weekdays[d.getDay()]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function formatShortMonth(d) {
      return locale_shortMonths[d.getMonth()]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function formatMonth(d) {
      return locale_months[d.getMonth()]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function formatPeriod(d) {
      return locale_periods[+(d.getHours() >= 12)]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function formatQuarter(d) {
      return 1 + ~~(d.getMonth() / 3)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function formatUTCShortWeekday(d) {
      return locale_shortWeekdays[d.getUTCDay()]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function formatUTCWeekday(d) {
      return locale_weekdays[d.getUTCDay()]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function formatUTCShortMonth(d) {
      return locale_shortMonths[d.getUTCMonth()]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function formatUTCMonth(d) {
      return locale_months[d.getUTCMonth()]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function formatUTCPeriod(d) {
      return locale_periods[+(d.getUTCHours() >= 12)]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
    function formatUTCQuarter(d) {
      return 1 + ~~(d.getUTCMonth() / 3)
    }

    return {
      // @ts-expect-error TS(7006) FIXME: Parameter 'specifier' implicitly has an 'any' type... Remove this comment to see the full error message
      format: function (specifier) {
        const f = newFormat((specifier += ''), formats)
        f.toString = function () {
          return specifier
        }
        return f
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'specifier' implicitly has an 'any' type... Remove this comment to see the full error message
      parse: function (specifier) {
        const p = newParse((specifier += ''), false)
        p.toString = function () {
          return specifier
        }
        return p
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'specifier' implicitly has an 'any' type... Remove this comment to see the full error message
      utcFormat: function (specifier) {
        const f = newFormat((specifier += ''), utcFormats)
        f.toString = function () {
          return specifier
        }
        return f
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'specifier' implicitly has an 'any' type... Remove this comment to see the full error message
      utcParse: function (specifier) {
        const p = newParse((specifier += ''), true)
        p.toString = function () {
          return specifier
        }
        return p
      },
    }
  }

  var pads = { '-': '', _: ' ', '0': '0' },
    numberRe = /^\s*\d+/, // note: ignores next directive
    percentRe = /^%/,
    requoteRe = /[\\^$*+?|[\]().{}]/g

  // @ts-expect-error TS(7006) FIXME: Parameter 'value' implicitly has an 'any' type.
  function pad$1(value, fill, width) {
    const sign = value < 0 ? '-' : '',
      string = (sign ? -value : value) + '',
      length = string.length
    return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 's' implicitly has an 'any' type.
  function requote(s) {
    return s.replace(requoteRe, '\\$&')
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'names' implicitly has an 'any' type.
  function formatRe(names) {
    return new RegExp('^(?:' + names.map(requote).join('|') + ')', 'i')
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'names' implicitly has an 'any' type.
  function formatLookup(names) {
    // @ts-expect-error TS(2583) FIXME: Cannot find name 'Map'. Do you need to change your... Remove this comment to see the full error message
    return new Map(names.map((name, i) => [name.toLowerCase(), i]))
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseWeekdayNumberSunday(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 1))
    return n ? ((d.w = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseWeekdayNumberMonday(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 1))
    return n ? ((d.u = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseWeekNumberSunday(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 2))
    return n ? ((d.U = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseWeekNumberISO(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 2))
    return n ? ((d.V = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseWeekNumberMonday(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 2))
    return n ? ((d.W = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseFullYear(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 4))
    return n ? ((d.y = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseYear(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 2))
    return n ? ((d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000)), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseZone(d, string, i) {
    const n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6))
    return n ? ((d.Z = n[1] ? 0 : -(n[2] + (n[3] || '00'))), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseQuarter(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 1))
    // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
    return n ? ((d.q = n[0] * 3 - 3), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseMonthNumber(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 2))
    // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
    return n ? ((d.m = n[0] - 1), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseDayOfMonth(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 2))
    return n ? ((d.d = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseDayOfYear(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 3))
    return n ? ((d.m = 0), (d.d = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseHour24(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 2))
    return n ? ((d.H = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseMinutes(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 2))
    return n ? ((d.M = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseSeconds(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 2))
    return n ? ((d.S = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseMilliseconds(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 3))
    return n ? ((d.L = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseMicroseconds(d, string, i) {
    const n = numberRe.exec(string.slice(i, i + 6))
    // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
    return n ? ((d.L = Math.floor(n[0] / 1000)), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseLiteralPercent(d, string, i) {
    const n = percentRe.exec(string.slice(i, i + 1))
    return n ? i + n[0].length : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseUnixTimestamp(d, string, i) {
    const n = numberRe.exec(string.slice(i))
    return n ? ((d.Q = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function parseUnixTimestampSeconds(d, string, i) {
    const n = numberRe.exec(string.slice(i))
    return n ? ((d.s = +n[0]), i + n[0].length) : -1
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatDayOfMonth(d, p) {
    return pad$1(d.getDate(), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatHour24(d, p) {
    return pad$1(d.getHours(), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatHour12(d, p) {
    return pad$1(d.getHours() % 12 || 12, p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatDayOfYear(d, p) {
    return pad$1(1 + day.count(year(d), d), p, 3)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatMilliseconds(d, p) {
    return pad$1(d.getMilliseconds(), p, 3)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatMicroseconds(d, p) {
    return formatMilliseconds(d, p) + '000'
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatMonthNumber(d, p) {
    return pad$1(d.getMonth() + 1, p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatMinutes(d, p) {
    return pad$1(d.getMinutes(), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatSeconds(d, p) {
    return pad$1(d.getSeconds(), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatWeekdayNumberMonday(d) {
    const day = d.getDay()
    return day === 0 ? 7 : day
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatWeekNumberSunday(d, p) {
    return pad$1(sunday.count(year(d) - 1, d), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function dISO(d) {
    const day = d.getDay()
    return day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatWeekNumberISO(d, p) {
    d = dISO(d)
    // @ts-expect-error TS(2365) FIXME: Operator '+' cannot be applied to types 'number' a... Remove this comment to see the full error message
    return pad$1(thursday.count(year(d), d) + (year(d).getDay() === 4), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatWeekdayNumberSunday(d) {
    return d.getDay()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatWeekNumberMonday(d, p) {
    return pad$1(monday.count(year(d) - 1, d), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatYear$1(d, p) {
    return pad$1(d.getFullYear() % 100, p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatYearISO(d, p) {
    d = dISO(d)
    return pad$1(d.getFullYear() % 100, p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatFullYear(d, p) {
    return pad$1(d.getFullYear() % 10000, p, 4)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatFullYearISO(d, p) {
    const day = d.getDay()
    d = day >= 4 || day === 0 ? thursday(d) : thursday.ceil(d)
    return pad$1(d.getFullYear() % 10000, p, 4)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatZone(d) {
    let z = d.getTimezoneOffset()
    return (z > 0 ? '-' : ((z *= -1), '+')) + pad$1((z / 60) | 0, '0', 2) + pad$1(z % 60, '0', 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCDayOfMonth(d, p) {
    return pad$1(d.getUTCDate(), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCHour24(d, p) {
    return pad$1(d.getUTCHours(), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCHour12(d, p) {
    return pad$1(d.getUTCHours() % 12 || 12, p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCDayOfYear(d, p) {
    return pad$1(1 + utcDay.count(utcYear(d), d), p, 3)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCMilliseconds(d, p) {
    return pad$1(d.getUTCMilliseconds(), p, 3)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCMicroseconds(d, p) {
    return formatUTCMilliseconds(d, p) + '000'
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCMonthNumber(d, p) {
    return pad$1(d.getUTCMonth() + 1, p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCMinutes(d, p) {
    return pad$1(d.getUTCMinutes(), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCSeconds(d, p) {
    return pad$1(d.getUTCSeconds(), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCWeekdayNumberMonday(d) {
    const dow = d.getUTCDay()
    return dow === 0 ? 7 : dow
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCWeekNumberSunday(d, p) {
    return pad$1(utcSunday.count(utcYear(d) - 1, d), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function UTCdISO(d) {
    const day = d.getUTCDay()
    return day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCWeekNumberISO(d, p) {
    d = UTCdISO(d)
    // @ts-expect-error TS(2365) FIXME: Operator '+' cannot be applied to types 'number' a... Remove this comment to see the full error message
    return pad$1(utcThursday.count(utcYear(d), d) + (utcYear(d).getUTCDay() === 4), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCWeekdayNumberSunday(d) {
    return d.getUTCDay()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCWeekNumberMonday(d, p) {
    return pad$1(utcMonday.count(utcYear(d) - 1, d), p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCYear(d, p) {
    return pad$1(d.getUTCFullYear() % 100, p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCYearISO(d, p) {
    d = UTCdISO(d)
    return pad$1(d.getUTCFullYear() % 100, p, 2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCFullYear(d, p) {
    return pad$1(d.getUTCFullYear() % 10000, p, 4)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUTCFullYearISO(d, p) {
    const day = d.getUTCDay()
    d = day >= 4 || day === 0 ? utcThursday(d) : utcThursday.ceil(d)
    return pad$1(d.getUTCFullYear() % 10000, p, 4)
  }

  function formatUTCZone() {
    return '+0000'
  }

  function formatLiteralPercent() {
    return '%'
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUnixTimestamp(d) {
    return +d
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function formatUnixTimestampSeconds(d) {
    return Math.floor(+d / 1000)
  }

  let locale$1

  defaultLocale$1({
    dateTime: '%x, %X',
    date: '%-m/%-d/%Y',
    time: '%-I:%M:%S %p',
    periods: ['AM', 'PM'],
    days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
    shortDays: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
    months: [
      'January',
      'February',
      'March',
      'April',
      'May',
      'June',
      'July',
      'August',
      'September',
      'October',
      'November',
      'December',
    ],
    shortMonths: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
  })

  // @ts-expect-error TS(7006) FIXME: Parameter 'definition' implicitly has an 'any' typ... Remove this comment to see the full error message
  function defaultLocale$1(definition) {
    locale$1 = formatLocale$1(definition)
    exports.timeFormat = locale$1.format
    exports.timeParse = locale$1.parse
    exports.utcFormat = locale$1.utcFormat
    exports.utcParse = locale$1.utcParse
    return locale$1
  }

  const isoSpecifier = '%Y-%m-%dT%H:%M:%S.%LZ'

  // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
  function formatIsoNative(date) {
    return date.toISOString()
  }

  // @ts-expect-error TS(2774) FIXME: This condition will always return true since this ... Remove this comment to see the full error message
  const formatIso = Date.prototype.toISOString ? formatIsoNative : exports.utcFormat(isoSpecifier)

  // @ts-expect-error TS(7006) FIXME: Parameter 'string' implicitly has an 'any' type.
  function parseIsoNative(string) {
    const date = new Date(string)
    // @ts-expect-error TS(2345) FIXME: Argument of type 'Date' is not assignable to param... Remove this comment to see the full error message
    return isNaN(date) ? null : date
  }

  const parseIso = +new Date('2000-01-01T00:00:00.000Z') ? parseIsoNative : exports.utcParse(isoSpecifier)

  const durationSecond$1 = 1000,
    durationMinute$1 = durationSecond$1 * 60,
    durationHour$1 = durationMinute$1 * 60,
    durationDay$1 = durationHour$1 * 24,
    durationWeek$1 = durationDay$1 * 7,
    durationMonth = durationDay$1 * 30,
    durationYear = durationDay$1 * 365

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function date$1(t) {
    return new Date(t)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function number$3(t) {
    return t instanceof Date ? +t : +new Date(+t)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'year' implicitly has an 'any' type.
  function calendar(year, month, week, day, hour, minute, second, millisecond, format) {
    const scale = continuous(),
      invert = scale.invert,
      domain = scale.domain

    const formatMillisecond = format('.%L'),
      formatSecond = format(':%S'),
      formatMinute = format('%I:%M'),
      formatHour = format('%I %p'),
      formatDay = format('%a %d'),
      formatWeek = format('%b %d'),
      formatMonth = format('%B'),
      formatYear = format('%Y')

    const tickIntervals = [
      [second, 1, durationSecond$1],
      [second, 5, 5 * durationSecond$1],
      [second, 15, 15 * durationSecond$1],
      [second, 30, 30 * durationSecond$1],
      [minute, 1, durationMinute$1],
      [minute, 5, 5 * durationMinute$1],
      [minute, 15, 15 * durationMinute$1],
      [minute, 30, 30 * durationMinute$1],
      [hour, 1, durationHour$1],
      [hour, 3, 3 * durationHour$1],
      [hour, 6, 6 * durationHour$1],
      [hour, 12, 12 * durationHour$1],
      [day, 1, durationDay$1],
      [day, 2, 2 * durationDay$1],
      [week, 1, durationWeek$1],
      [month, 1, durationMonth],
      [month, 3, 3 * durationMonth],
      [year, 1, durationYear],
    ]

    // @ts-expect-error TS(7006) FIXME: Parameter 'date' implicitly has an 'any' type.
    function tickFormat(date) {
      return (
        second(date) < date
          ? formatMillisecond
          : minute(date) < date
          ? formatSecond
          : hour(date) < date
          ? formatMinute
          : day(date) < date
          ? formatHour
          : month(date) < date
          ? week(date) < date
            ? formatDay
            : formatWeek
          : year(date) < date
          ? formatMonth
          : formatYear
      )(date)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'interval' implicitly has an 'any' type.
    function tickInterval(interval, start, stop) {
      if (interval == null) interval = 10

      // If a desired tick count is specified, pick a reasonable tick interval
      // based on the extent of the domain and a rough estimate of tick size.
      // Otherwise, assume interval is already a time interval and use it.
      if (typeof interval === 'number') {
        let target = Math.abs(stop - start) / interval,
          // @ts-expect-error TS(7006) FIXME: Parameter 'i' implicitly has an 'any' type.
          i = bisector(function (i) {
            return i[2]
            // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 2.
          }).right(tickIntervals, target),
          step
        if (i === tickIntervals.length) {
          step = tickStep(start / durationYear, stop / durationYear, interval)
          interval = year
        } else if (i) {
          i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i]
          step = i[1]
          interval = i[0]
        } else {
          step = Math.max(tickStep(start, stop, interval), 1)
          interval = millisecond
        }
        return interval.every(step)
      }

      return interval
    }

    scale.invert = function (y) {
      return new Date(invert(y))
    }

    scale.domain = function (_) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      return arguments.length ? domain(Array.from(_, number$3)) : domain().map(date$1)
    }

    // @ts-expect-error TS(2339) FIXME: Property 'ticks' does not exist on type '{ (x: any... Remove this comment to see the full error message
    scale.ticks = function (interval) {
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
      let d = domain(),
        // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        t0 = d[0],
        // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
        t1 = d[d.length - 1],
        r = t1 < t0,
        t
      if (r) (t = t0), (t0 = t1), (t1 = t)
      t = tickInterval(interval, t0, t1)
      t = t ? t.range(t0, t1 + 1) : [] // inclusive stop
      return r ? t.reverse() : t
    }

    // @ts-expect-error TS(2339) FIXME: Property 'tickFormat' does not exist on type '{ (x... Remove this comment to see the full error message
    scale.tickFormat = function (count, specifier) {
      return specifier == null ? tickFormat : format(specifier)
    }

    // @ts-expect-error TS(2339) FIXME: Property 'nice' does not exist on type '{ (x: any)... Remove this comment to see the full error message
    scale.nice = function (interval) {
      // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 0.
      const d = domain()
      // @ts-expect-error TS(7053) FIXME: Element implicitly has an 'any' type because expre... Remove this comment to see the full error message
      return (interval = tickInterval(interval, d[0], d[d.length - 1])) ? domain(nice$1(d, interval)) : scale
    }

    // @ts-expect-error TS(2339) FIXME: Property 'copy' does not exist on type '{ (x: any)... Remove this comment to see the full error message
    scale.copy = function () {
      return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format))
    }

    return scale
  }

  function time() {
    return initRange.apply(
      calendar(year, month, sunday, day, hour, minute, second, millisecond, exports.timeFormat).domain([
        new Date(2000, 0, 1),
        new Date(2000, 0, 2),
      ]),
      // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
      arguments
    )
  }

  function utcTime() {
    return initRange.apply(
      calendar(utcYear, utcMonth, utcSunday, utcDay, utcHour, utcMinute, second, millisecond, exports.utcFormat).domain(
        [Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]
      ),
      // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
      arguments
    )
  }

  function transformer$2() {
    let x0 = 0,
      x1 = 1,
      // @ts-expect-error TS(7034) FIXME: Variable 't0' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      t0,
      t1,
      // @ts-expect-error TS(7034) FIXME: Variable 'k10' implicitly has type 'any' in some l... Remove this comment to see the full error message
      k10,
      // @ts-expect-error TS(7034) FIXME: Variable 'transform' implicitly has type 'any' in ... Remove this comment to see the full error message
      transform,
      interpolator = identity$6,
      clamp = false,
      // @ts-expect-error TS(7034) FIXME: Variable 'unknown' implicitly has type 'any' in so... Remove this comment to see the full error message
      unknown

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function scale(x) {
      return isNaN((x = +x))
        ? // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
          unknown
        : // @ts-expect-error TS(7005) FIXME: Variable 'k10' implicitly has an 'any' type.
          interpolator(k10 === 0 ? 0.5 : ((x = (transform(x) - t0) * k10), clamp ? Math.max(0, Math.min(1, x)) : x))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.domain = function (_) {
      return arguments.length
        ? (([x0, x1] = _),
          // @ts-expect-error TS(7005) FIXME: Variable 'transform' implicitly has an 'any' type.
          (t0 = transform((x0 = +x0))),
          // @ts-expect-error TS(7005) FIXME: Variable 'transform' implicitly has an 'any' type.
          (t1 = transform((x1 = +x1))),
          (k10 = t0 === t1 ? 0 : 1 / (t1 - t0)),
          scale)
        : [x0, x1]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.clamp = function (_) {
      return arguments.length ? ((clamp = !!_), scale) : clamp
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.interpolator = function (_) {
      return arguments.length ? ((interpolator = _), scale) : interpolator
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'interpolate' implicitly has an 'any' ty... Remove this comment to see the full error message
    function range(interpolate) {
      // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
      return function (_) {
        let r0, r1
        return arguments.length
          ? (([r0, r1] = _), (interpolator = interpolate(r0, r1)), scale)
          : [interpolator(0), interpolator(1)]
      }
    }

    scale.range = range(interpolate)

    scale.rangeRound = range(interpolateRound)

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.unknown = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return arguments.length ? ((unknown = _), scale) : unknown
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      ;(transform = t), (t0 = t(x0)), (t1 = t(x1)), (k10 = t0 === t1 ? 0 : 1 / (t1 - t0))
      return scale
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'source' implicitly has an 'any' type.
  function copy$1(source, target) {
    return target
      .domain(source.domain())
      .interpolator(source.interpolator())
      .clamp(source.clamp())
      .unknown(source.unknown())
  }

  function sequential() {
    const scale = linearish(transformer$2()(identity$6))

    scale.copy = function () {
      return copy$1(scale, sequential())
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initInterpolator.apply(scale, arguments)
  }

  function sequentialLog() {
    const scale = loggish(transformer$2()).domain([1, 10])

    scale.copy = function () {
      return copy$1(scale, sequentialLog()).base(scale.base())
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initInterpolator.apply(scale, arguments)
  }

  function sequentialSymlog() {
    const scale = symlogish(transformer$2())

    scale.copy = function () {
      return copy$1(scale, sequentialSymlog()).constant(scale.constant())
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initInterpolator.apply(scale, arguments)
  }

  function sequentialPow() {
    const scale = powish(transformer$2())

    scale.copy = function () {
      return copy$1(scale, sequentialPow()).exponent(scale.exponent())
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initInterpolator.apply(scale, arguments)
  }

  function sequentialSqrt() {
    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return sequentialPow.apply(null, arguments).exponent(0.5)
  }

  function sequentialQuantile() {
    // @ts-expect-error TS(7034) FIXME: Variable 'domain' implicitly has type 'any[]' in s... Remove this comment to see the full error message
    let domain = [],
      interpolator = identity$6

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function scale(x) {
      // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 3.
      if (!isNaN((x = +x))) return interpolator((bisectRight(domain, x, 1) - 1) / (domain.length - 1))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.domain = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'domain' implicitly has an 'any[]' type.
      if (!arguments.length) return domain.slice()
      domain = []
      for (let d of _) if (d != null && !isNaN((d = +d))) domain.push(d)
      domain.sort(ascending)
      return scale
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.interpolator = function (_) {
      return arguments.length ? ((interpolator = _), scale) : interpolator
    }

    scale.range = function () {
      // @ts-expect-error TS(7005) FIXME: Variable 'domain' implicitly has an 'any[]' type.
      return domain.map((d, i) => interpolator(i / (domain.length - 1)))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'n' implicitly has an 'any' type.
    scale.quantiles = function (n) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      return Array.from({ length: n + 1 }, (_, i) => quantile(domain, i / n))
    }

    scale.copy = function () {
      // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 1.
      return sequentialQuantile(interpolator).domain(domain)
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initInterpolator.apply(scale, arguments)
  }

  function transformer$3() {
    let x0 = 0,
      x1 = 0.5,
      x2 = 1,
      s = 1,
      t0,
      // @ts-expect-error TS(7034) FIXME: Variable 't1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
      t1,
      t2,
      // @ts-expect-error TS(7034) FIXME: Variable 'k10' implicitly has type 'any' in some l... Remove this comment to see the full error message
      k10,
      // @ts-expect-error TS(7034) FIXME: Variable 'k21' implicitly has type 'any' in some l... Remove this comment to see the full error message
      k21,
      interpolator = identity$6,
      // @ts-expect-error TS(7034) FIXME: Variable 'transform' implicitly has type 'any' in ... Remove this comment to see the full error message
      transform,
      clamp = false,
      // @ts-expect-error TS(7034) FIXME: Variable 'unknown' implicitly has type 'any' in so... Remove this comment to see the full error message
      unknown

    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    function scale(x) {
      return isNaN((x = +x))
        ? // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
          unknown
        : // @ts-expect-error TS(7005) FIXME: Variable 'transform' implicitly has an 'any' type.
          ((x = 0.5 + ((x = +transform(x)) - t1) * (s * x < s * t1 ? k10 : k21)),
          interpolator(clamp ? Math.max(0, Math.min(1, x)) : x))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.domain = function (_) {
      return arguments.length
        ? (([x0, x1, x2] = _),
          // @ts-expect-error TS(7005) FIXME: Variable 'transform' implicitly has an 'any' type.
          (t0 = transform((x0 = +x0))),
          // @ts-expect-error TS(7005) FIXME: Variable 'transform' implicitly has an 'any' type.
          (t1 = transform((x1 = +x1))),
          // @ts-expect-error TS(7005) FIXME: Variable 'transform' implicitly has an 'any' type.
          (t2 = transform((x2 = +x2))),
          (k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0)),
          (k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1)),
          (s = t1 < t0 ? -1 : 1),
          scale)
        : [x0, x1, x2]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.clamp = function (_) {
      return arguments.length ? ((clamp = !!_), scale) : clamp
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.interpolator = function (_) {
      return arguments.length ? ((interpolator = _), scale) : interpolator
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'interpolate' implicitly has an 'any' ty... Remove this comment to see the full error message
    function range(interpolate) {
      // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
      return function (_) {
        let r0, r1, r2
        return arguments.length
          ? (([r0, r1, r2] = _), (interpolator = piecewise(interpolate, [r0, r1, r2])), scale)
          : [interpolator(0), interpolator(0.5), interpolator(1)]
      }
    }

    scale.range = range(interpolate)

    scale.rangeRound = range(interpolateRound)

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    scale.unknown = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'unknown' implicitly has an 'any' type.
      return arguments.length ? ((unknown = _), scale) : unknown
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      ;(transform = t),
        (t0 = t(x0)),
        (t1 = t(x1)),
        (t2 = t(x2)),
        (k10 = t0 === t1 ? 0 : 0.5 / (t1 - t0)),
        (k21 = t1 === t2 ? 0 : 0.5 / (t2 - t1)),
        (s = t1 < t0 ? -1 : 1)
      return scale
    }
  }

  function diverging() {
    const scale = linearish(transformer$3()(identity$6))

    scale.copy = function () {
      return copy$1(scale, diverging())
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initInterpolator.apply(scale, arguments)
  }

  function divergingLog() {
    const scale = loggish(transformer$3()).domain([0.1, 1, 10])

    scale.copy = function () {
      return copy$1(scale, divergingLog()).base(scale.base())
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initInterpolator.apply(scale, arguments)
  }

  function divergingSymlog() {
    const scale = symlogish(transformer$3())

    scale.copy = function () {
      return copy$1(scale, divergingSymlog()).constant(scale.constant())
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initInterpolator.apply(scale, arguments)
  }

  function divergingPow() {
    const scale = powish(transformer$3())

    scale.copy = function () {
      return copy$1(scale, divergingPow()).exponent(scale.exponent())
    }

    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return initInterpolator.apply(scale, arguments)
  }

  function divergingSqrt() {
    // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
    return divergingPow.apply(null, arguments).exponent(0.5)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'specifier' implicitly has an 'any' type... Remove this comment to see the full error message
  function colors(specifier) {
    let n = (specifier.length / 6) | 0,
      colors = new Array(n),
      i = 0
    while (i < n) colors[i] = '#' + specifier.slice(i * 6, ++i * 6)
    return colors
  }

  const category10 = colors('1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf')

  const Accent = colors('7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666')

  const Dark2 = colors('1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666')

  const Paired = colors('a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928')

  const Pastel1 = colors('fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2')

  const Pastel2 = colors('b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc')

  const Set1 = colors('e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999')

  const Set2 = colors('66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3')

  const Set3 = colors('8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f')

  const Tableau10 = colors('4e79a7f28e2ce1575976b7b259a14fedc949af7aa1ff9da79c755fbab0ab')

  // @ts-expect-error TS(7006) FIXME: Parameter 'scheme' implicitly has an 'any' type.
  const ramp = scheme => rgbBasis(scheme[scheme.length - 1])

  const scheme = new Array(3)
    .concat(
      'd8b365f5f5f55ab4ac',
      'a6611adfc27d80cdc1018571',
      'a6611adfc27df5f5f580cdc1018571',
      '8c510ad8b365f6e8c3c7eae55ab4ac01665e',
      '8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e',
      '8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e',
      '8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e',
      '5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30',
      '5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30'
    )
    .map(colors)

  const BrBG = ramp(scheme)

  const scheme$1 = new Array(3)
    .concat(
      'af8dc3f7f7f77fbf7b',
      '7b3294c2a5cfa6dba0008837',
      '7b3294c2a5cff7f7f7a6dba0008837',
      '762a83af8dc3e7d4e8d9f0d37fbf7b1b7837',
      '762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837',
      '762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837',
      '762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837',
      '40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b',
      '40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b'
    )
    .map(colors)

  const PRGn = ramp(scheme$1)

  const scheme$2 = new Array(3)
    .concat(
      'e9a3c9f7f7f7a1d76a',
      'd01c8bf1b6dab8e1864dac26',
      'd01c8bf1b6daf7f7f7b8e1864dac26',
      'c51b7de9a3c9fde0efe6f5d0a1d76a4d9221',
      'c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221',
      'c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221',
      'c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221',
      '8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419',
      '8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419'
    )
    .map(colors)

  const PiYG = ramp(scheme$2)

  const scheme$3 = new Array(3)
    .concat(
      '998ec3f7f7f7f1a340',
      '5e3c99b2abd2fdb863e66101',
      '5e3c99b2abd2f7f7f7fdb863e66101',
      '542788998ec3d8daebfee0b6f1a340b35806',
      '542788998ec3d8daebf7f7f7fee0b6f1a340b35806',
      '5427888073acb2abd2d8daebfee0b6fdb863e08214b35806',
      '5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806',
      '2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08',
      '2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08'
    )
    .map(colors)

  const PuOr = ramp(scheme$3)

  const scheme$4 = new Array(3)
    .concat(
      'ef8a62f7f7f767a9cf',
      'ca0020f4a58292c5de0571b0',
      'ca0020f4a582f7f7f792c5de0571b0',
      'b2182bef8a62fddbc7d1e5f067a9cf2166ac',
      'b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac',
      'b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac',
      'b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac',
      '67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061',
      '67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061'
    )
    .map(colors)

  const RdBu = ramp(scheme$4)

  const scheme$5 = new Array(3)
    .concat(
      'ef8a62ffffff999999',
      'ca0020f4a582bababa404040',
      'ca0020f4a582ffffffbababa404040',
      'b2182bef8a62fddbc7e0e0e09999994d4d4d',
      'b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d',
      'b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d',
      'b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d',
      '67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a',
      '67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a'
    )
    .map(colors)

  const RdGy = ramp(scheme$5)

  const scheme$6 = new Array(3)
    .concat(
      'fc8d59ffffbf91bfdb',
      'd7191cfdae61abd9e92c7bb6',
      'd7191cfdae61ffffbfabd9e92c7bb6',
      'd73027fc8d59fee090e0f3f891bfdb4575b4',
      'd73027fc8d59fee090ffffbfe0f3f891bfdb4575b4',
      'd73027f46d43fdae61fee090e0f3f8abd9e974add14575b4',
      'd73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4',
      'a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695',
      'a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695'
    )
    .map(colors)

  const RdYlBu = ramp(scheme$6)

  const scheme$7 = new Array(3)
    .concat(
      'fc8d59ffffbf91cf60',
      'd7191cfdae61a6d96a1a9641',
      'd7191cfdae61ffffbfa6d96a1a9641',
      'd73027fc8d59fee08bd9ef8b91cf601a9850',
      'd73027fc8d59fee08bffffbfd9ef8b91cf601a9850',
      'd73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850',
      'd73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850',
      'a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837',
      'a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837'
    )
    .map(colors)

  const RdYlGn = ramp(scheme$7)

  const scheme$8 = new Array(3)
    .concat(
      'fc8d59ffffbf99d594',
      'd7191cfdae61abdda42b83ba',
      'd7191cfdae61ffffbfabdda42b83ba',
      'd53e4ffc8d59fee08be6f59899d5943288bd',
      'd53e4ffc8d59fee08bffffbfe6f59899d5943288bd',
      'd53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd',
      'd53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd',
      '9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2',
      '9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2'
    )
    .map(colors)

  const Spectral = ramp(scheme$8)

  const scheme$9 = new Array(3)
    .concat(
      'e5f5f999d8c92ca25f',
      'edf8fbb2e2e266c2a4238b45',
      'edf8fbb2e2e266c2a42ca25f006d2c',
      'edf8fbccece699d8c966c2a42ca25f006d2c',
      'edf8fbccece699d8c966c2a441ae76238b45005824',
      'f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824',
      'f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b'
    )
    .map(colors)

  const BuGn = ramp(scheme$9)

  const scheme$a = new Array(3)
    .concat(
      'e0ecf49ebcda8856a7',
      'edf8fbb3cde38c96c688419d',
      'edf8fbb3cde38c96c68856a7810f7c',
      'edf8fbbfd3e69ebcda8c96c68856a7810f7c',
      'edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b',
      'f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b',
      'f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b'
    )
    .map(colors)

  const BuPu = ramp(scheme$a)

  const scheme$b = new Array(3)
    .concat(
      'e0f3dba8ddb543a2ca',
      'f0f9e8bae4bc7bccc42b8cbe',
      'f0f9e8bae4bc7bccc443a2ca0868ac',
      'f0f9e8ccebc5a8ddb57bccc443a2ca0868ac',
      'f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e',
      'f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e',
      'f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081'
    )
    .map(colors)

  const GnBu = ramp(scheme$b)

  const scheme$c = new Array(3)
    .concat(
      'fee8c8fdbb84e34a33',
      'fef0d9fdcc8afc8d59d7301f',
      'fef0d9fdcc8afc8d59e34a33b30000',
      'fef0d9fdd49efdbb84fc8d59e34a33b30000',
      'fef0d9fdd49efdbb84fc8d59ef6548d7301f990000',
      'fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000',
      'fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000'
    )
    .map(colors)

  const OrRd = ramp(scheme$c)

  const scheme$d = new Array(3)
    .concat(
      'ece2f0a6bddb1c9099',
      'f6eff7bdc9e167a9cf02818a',
      'f6eff7bdc9e167a9cf1c9099016c59',
      'f6eff7d0d1e6a6bddb67a9cf1c9099016c59',
      'f6eff7d0d1e6a6bddb67a9cf3690c002818a016450',
      'fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450',
      'fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636'
    )
    .map(colors)

  const PuBuGn = ramp(scheme$d)

  const scheme$e = new Array(3)
    .concat(
      'ece7f2a6bddb2b8cbe',
      'f1eef6bdc9e174a9cf0570b0',
      'f1eef6bdc9e174a9cf2b8cbe045a8d',
      'f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d',
      'f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b',
      'fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b',
      'fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858'
    )
    .map(colors)

  const PuBu = ramp(scheme$e)

  const scheme$f = new Array(3)
    .concat(
      'e7e1efc994c7dd1c77',
      'f1eef6d7b5d8df65b0ce1256',
      'f1eef6d7b5d8df65b0dd1c77980043',
      'f1eef6d4b9dac994c7df65b0dd1c77980043',
      'f1eef6d4b9dac994c7df65b0e7298ace125691003f',
      'f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f',
      'f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f'
    )
    .map(colors)

  const PuRd = ramp(scheme$f)

  const scheme$g = new Array(3)
    .concat(
      'fde0ddfa9fb5c51b8a',
      'feebe2fbb4b9f768a1ae017e',
      'feebe2fbb4b9f768a1c51b8a7a0177',
      'feebe2fcc5c0fa9fb5f768a1c51b8a7a0177',
      'feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177',
      'fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177',
      'fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a'
    )
    .map(colors)

  const RdPu = ramp(scheme$g)

  const scheme$h = new Array(3)
    .concat(
      'edf8b17fcdbb2c7fb8',
      'ffffcca1dab441b6c4225ea8',
      'ffffcca1dab441b6c42c7fb8253494',
      'ffffccc7e9b47fcdbb41b6c42c7fb8253494',
      'ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84',
      'ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84',
      'ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58'
    )
    .map(colors)

  const YlGnBu = ramp(scheme$h)

  const scheme$i = new Array(3)
    .concat(
      'f7fcb9addd8e31a354',
      'ffffccc2e69978c679238443',
      'ffffccc2e69978c67931a354006837',
      'ffffccd9f0a3addd8e78c67931a354006837',
      'ffffccd9f0a3addd8e78c67941ab5d238443005a32',
      'ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32',
      'ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529'
    )
    .map(colors)

  const YlGn = ramp(scheme$i)

  const scheme$j = new Array(3)
    .concat(
      'fff7bcfec44fd95f0e',
      'ffffd4fed98efe9929cc4c02',
      'ffffd4fed98efe9929d95f0e993404',
      'ffffd4fee391fec44ffe9929d95f0e993404',
      'ffffd4fee391fec44ffe9929ec7014cc4c028c2d04',
      'ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04',
      'ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506'
    )
    .map(colors)

  const YlOrBr = ramp(scheme$j)

  const scheme$k = new Array(3)
    .concat(
      'ffeda0feb24cf03b20',
      'ffffb2fecc5cfd8d3ce31a1c',
      'ffffb2fecc5cfd8d3cf03b20bd0026',
      'ffffb2fed976feb24cfd8d3cf03b20bd0026',
      'ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026',
      'ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026',
      'ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026'
    )
    .map(colors)

  const YlOrRd = ramp(scheme$k)

  const scheme$l = new Array(3)
    .concat(
      'deebf79ecae13182bd',
      'eff3ffbdd7e76baed62171b5',
      'eff3ffbdd7e76baed63182bd08519c',
      'eff3ffc6dbef9ecae16baed63182bd08519c',
      'eff3ffc6dbef9ecae16baed64292c62171b5084594',
      'f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594',
      'f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b'
    )
    .map(colors)

  const Blues = ramp(scheme$l)

  const scheme$m = new Array(3)
    .concat(
      'e5f5e0a1d99b31a354',
      'edf8e9bae4b374c476238b45',
      'edf8e9bae4b374c47631a354006d2c',
      'edf8e9c7e9c0a1d99b74c47631a354006d2c',
      'edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32',
      'f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32',
      'f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b'
    )
    .map(colors)

  const Greens = ramp(scheme$m)

  const scheme$n = new Array(3)
    .concat(
      'f0f0f0bdbdbd636363',
      'f7f7f7cccccc969696525252',
      'f7f7f7cccccc969696636363252525',
      'f7f7f7d9d9d9bdbdbd969696636363252525',
      'f7f7f7d9d9d9bdbdbd969696737373525252252525',
      'fffffff0f0f0d9d9d9bdbdbd969696737373525252252525',
      'fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000'
    )
    .map(colors)

  const Greys = ramp(scheme$n)

  const scheme$o = new Array(3)
    .concat(
      'efedf5bcbddc756bb1',
      'f2f0f7cbc9e29e9ac86a51a3',
      'f2f0f7cbc9e29e9ac8756bb154278f',
      'f2f0f7dadaebbcbddc9e9ac8756bb154278f',
      'f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486',
      'fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486',
      'fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d'
    )
    .map(colors)

  const Purples = ramp(scheme$o)

  const scheme$p = new Array(3)
    .concat(
      'fee0d2fc9272de2d26',
      'fee5d9fcae91fb6a4acb181d',
      'fee5d9fcae91fb6a4ade2d26a50f15',
      'fee5d9fcbba1fc9272fb6a4ade2d26a50f15',
      'fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d',
      'fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d',
      'fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d'
    )
    .map(colors)

  const Reds = ramp(scheme$p)

  const scheme$q = new Array(3)
    .concat(
      'fee6cefdae6be6550d',
      'feeddefdbe85fd8d3cd94701',
      'feeddefdbe85fd8d3ce6550da63603',
      'feeddefdd0a2fdae6bfd8d3ce6550da63603',
      'feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04',
      'fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04',
      'fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704'
    )
    .map(colors)

  const Oranges = ramp(scheme$q)

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function cividis(t) {
    t = Math.max(0, Math.min(1, t))
    return (
      'rgb(' +
      Math.max(
        0,
        Math.min(255, Math.round(-4.54 - t * (35.34 - t * (2381.73 - t * (6402.7 - t * (7024.72 - t * 2710.57))))))
      ) +
      ', ' +
      Math.max(
        0,
        Math.min(255, Math.round(32.49 + t * (170.73 + t * (52.82 - t * (131.46 - t * (176.58 - t * 67.37))))))
      ) +
      ', ' +
      Math.max(
        0,
        Math.min(255, Math.round(81.24 + t * (442.36 - t * (2482.43 - t * (6167.24 - t * (6614.94 - t * 2475.67))))))
      ) +
      ')'
    )
  }

  // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 3.
  const cubehelix$3 = cubehelixLong(cubehelix(300, 0.5, 0.0), cubehelix(-240, 0.5, 1.0))

  // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 3.
  const warm = cubehelixLong(cubehelix(-100, 0.75, 0.35), cubehelix(80, 1.5, 0.8))

  // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 3.
  const cool = cubehelixLong(cubehelix(260, 0.75, 0.35), cubehelix(80, 1.5, 0.8))

  // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 0.
  const c$1 = cubehelix()

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function rainbow(t) {
    if (t < 0 || t > 1) t -= Math.floor(t)
    const ts = Math.abs(t - 0.5)
    c$1.h = 360 * t - 100
    c$1.s = 1.5 - 1.5 * ts
    c$1.l = 0.8 - 0.9 * ts
    return c$1 + ''
  }

  // @ts-expect-error TS(2554) FIXME: Expected 4 arguments, but got 0.
  const c$2 = rgb(),
    pi_1_3 = Math.PI / 3,
    pi_2_3 = (Math.PI * 2) / 3

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function sinebow(t) {
    let x
    t = (0.5 - t) * Math.PI
    c$2.r = 255 * (x = Math.sin(t)) * x
    c$2.g = 255 * (x = Math.sin(t + pi_1_3)) * x
    c$2.b = 255 * (x = Math.sin(t + pi_2_3)) * x
    return c$2 + ''
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
  function turbo(t) {
    t = Math.max(0, Math.min(1, t))
    return (
      'rgb(' +
      Math.max(
        0,
        Math.min(
          255,
          Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05)))))
        )
      ) +
      ', ' +
      Math.max(
        0,
        Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))
      ) +
      ', ' +
      Math.max(
        0,
        Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66))))))
      ) +
      ')'
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'range' implicitly has an 'any' type.
  function ramp$1(range) {
    const n = range.length
    // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
    return function (t) {
      return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))]
    }
  }

  const viridis = ramp$1(
    colors(
      '44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725'
    )
  )

  const magma = ramp$1(
    colors(
      '00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf'
    )
  )

  const inferno = ramp$1(
    colors(
      '00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4'
    )
  )

  const plasma = ramp$1(
    colors(
      '0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921'
    )
  )

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function constant$a(x) {
    return function constant() {
      return x
    }
  }

  const abs$3 = Math.abs
  const atan2$1 = Math.atan2
  const cos$2 = Math.cos
  const max$3 = Math.max
  const min$2 = Math.min
  const sin$2 = Math.sin
  const sqrt$2 = Math.sqrt

  const epsilon$5 = 1e-12
  const pi$4 = Math.PI
  const halfPi$3 = pi$4 / 2
  const tau$5 = 2 * pi$4

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function acos$1(x) {
    return x > 1 ? 0 : x < -1 ? pi$4 : Math.acos(x)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function asin$1(x) {
    return x >= 1 ? halfPi$3 : x <= -1 ? -halfPi$3 : Math.asin(x)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function arcInnerRadius(d) {
    return d.innerRadius
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function arcOuterRadius(d) {
    return d.outerRadius
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function arcStartAngle(d) {
    return d.startAngle
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function arcEndAngle(d) {
    return d.endAngle
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function arcPadAngle(d) {
    return d && d.padAngle // Note: optional!
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x0' implicitly has an 'any' type.
  function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
    let x10 = x1 - x0,
      y10 = y1 - y0,
      x32 = x3 - x2,
      y32 = y3 - y2,
      t = y32 * x10 - x32 * y10
    if (t * t < epsilon$5) return
    t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / t
    return [x0 + t * x10, y0 + t * y10]
  }

  // Compute perpendicular offset line of length rc.
  // http://mathworld.wolfram.com/Circle-LineIntersection.html
  // @ts-expect-error TS(7006) FIXME: Parameter 'x0' implicitly has an 'any' type.
  function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
    let x01 = x0 - x1,
      y01 = y0 - y1,
      lo = (cw ? rc : -rc) / sqrt$2(x01 * x01 + y01 * y01),
      ox = lo * y01,
      oy = -lo * x01,
      x11 = x0 + ox,
      y11 = y0 + oy,
      x10 = x1 + ox,
      y10 = y1 + oy,
      x00 = (x11 + x10) / 2,
      y00 = (y11 + y10) / 2,
      dx = x10 - x11,
      dy = y10 - y11,
      d2 = dx * dx + dy * dy,
      r = r1 - rc,
      D = x11 * y10 - x10 * y11,
      d = (dy < 0 ? -1 : 1) * sqrt$2(max$3(0, r * r * d2 - D * D)),
      cx0 = (D * dy - dx * d) / d2,
      cy0 = (-D * dx - dy * d) / d2,
      cx1 = (D * dy + dx * d) / d2,
      cy1 = (-D * dx + dy * d) / d2,
      dx0 = cx0 - x00,
      dy0 = cy0 - y00,
      dx1 = cx1 - x00,
      dy1 = cy1 - y00

    // Pick the closer of the two intersection points.
    // TODO Is there a faster way to determine which intersection to use?
    if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) (cx0 = cx1), (cy0 = cy1)

    return {
      cx: cx0,
      cy: cy0,
      x01: -ox,
      y01: -oy,
      x11: cx0 * (r1 / r - 1),
      y11: cy0 * (r1 / r - 1),
    }
  }

  function arc() {
    let innerRadius = arcInnerRadius,
      outerRadius = arcOuterRadius,
      cornerRadius = constant$a(0),
      // @ts-expect-error TS(7034) FIXME: Variable 'padRadius' implicitly has type 'any' in ... Remove this comment to see the full error message
      padRadius = null,
      startAngle = arcStartAngle,
      endAngle = arcEndAngle,
      padAngle = arcPadAngle,
      // @ts-expect-error TS(7034) FIXME: Variable 'context' implicitly has type 'any' in so... Remove this comment to see the full error message
      context = null

    function arc() {
      let buffer,
        r,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        r0 = +innerRadius.apply(this, arguments),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        r1 = +outerRadius.apply(this, arguments),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        a0 = startAngle.apply(this, arguments) - halfPi$3,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        a1 = endAngle.apply(this, arguments) - halfPi$3,
        da = abs$3(a1 - a0),
        cw = a1 > a0

      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      if (!context) context = buffer = path()

      // Ensure that the outer radius is always larger than the inner radius.
      if (r1 < r0) (r = r1), (r1 = r0), (r0 = r)

      // Is it a point?
      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      if (!(r1 > epsilon$5)) context.moveTo(0, 0)
      // Or is it a circle or annulus?
      else if (da > tau$5 - epsilon$5) {
        // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
        context.moveTo(r1 * cos$2(a0), r1 * sin$2(a0))
        // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
        context.arc(0, 0, r1, a0, a1, !cw)
        if (r0 > epsilon$5) {
          // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          context.moveTo(r0 * cos$2(a1), r0 * sin$2(a1))
          // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          context.arc(0, 0, r0, a1, a0, cw)
        }
      }

      // Or is it a circular or annular sector?
      else {
        let a01 = a0,
          a11 = a1,
          a00 = a0,
          a10 = a1,
          da0 = da,
          da1 = da,
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          ap = padAngle.apply(this, arguments) / 2,
          // @ts-expect-error TS(7005) FIXME: Variable 'padRadius' implicitly has an 'any' type.
          rp = ap > epsilon$5 && (padRadius ? +padRadius.apply(this, arguments) : sqrt$2(r0 * r0 + r1 * r1)),
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          rc = min$2(abs$3(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
          rc0 = rc,
          rc1 = rc,
          t0,
          t1

        // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
        if (rp > epsilon$5) {
          // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
          let p0 = asin$1((rp / r0) * sin$2(ap)),
            // @ts-expect-error TS(2362) FIXME: The left-hand side of an arithmetic operation must... Remove this comment to see the full error message
            p1 = asin$1((rp / r1) * sin$2(ap))
          if ((da0 -= p0 * 2) > epsilon$5) (p0 *= cw ? 1 : -1), (a00 += p0), (a10 -= p0)
          else (da0 = 0), (a00 = a10 = (a0 + a1) / 2)
          if ((da1 -= p1 * 2) > epsilon$5) (p1 *= cw ? 1 : -1), (a01 += p1), (a11 -= p1)
          else (da1 = 0), (a01 = a11 = (a0 + a1) / 2)
        }

        const x01 = r1 * cos$2(a01),
          y01 = r1 * sin$2(a01),
          x10 = r0 * cos$2(a10),
          y10 = r0 * sin$2(a10)

        // Apply rounded corners?
        if (rc > epsilon$5) {
          var x11 = r1 * cos$2(a11),
            y11 = r1 * sin$2(a11),
            x00 = r0 * cos$2(a00),
            y00 = r0 * sin$2(a00),
            oc

          // Restrict the corner radius according to the sector angle.
          if (da < pi$4 && (oc = intersect(x01, y01, x00, y00, x11, y11, x10, y10))) {
            const ax = x01 - oc[0],
              ay = y01 - oc[1],
              bx = x11 - oc[0],
              by = y11 - oc[1],
              kc = 1 / sin$2(acos$1((ax * bx + ay * by) / (sqrt$2(ax * ax + ay * ay) * sqrt$2(bx * bx + by * by))) / 2),
              lc = sqrt$2(oc[0] * oc[0] + oc[1] * oc[1])
            rc0 = min$2(rc, (r0 - lc) / (kc - 1))
            rc1 = min$2(rc, (r1 - lc) / (kc + 1))
          }
        }

        // Is the sector collapsed to a line?
        // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
        if (!(da1 > epsilon$5)) context.moveTo(x01, y01)
        // Does the sector’s outer ring have rounded corners?
        else if (rc1 > epsilon$5) {
          // @ts-expect-error TS(2454) FIXME: Variable 'x00' is used before being assigned.
          t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw)
          // @ts-expect-error TS(2454) FIXME: Variable 'x11' is used before being assigned.
          t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw)

          // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01)

          // Have the corners merged?
          // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw)
          // Otherwise, draw the two corners and the ring.
          else {
            // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
            context.arc(t0.cx, t0.cy, rc1, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw)
            // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
            context.arc(0, 0, r1, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), !cw)
            // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
            context.arc(t1.cx, t1.cy, rc1, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw)
          }
        }

        // Or is the outer ring just a circular arc?
        // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
        else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw)

        // Is there no inner ring, and it’s a circular sector?
        // Or perhaps it’s an annular sector collapsed due to padding?
        // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
        if (!(r0 > epsilon$5) || !(da0 > epsilon$5)) context.lineTo(x10, y10)
        // Does the sector’s inner ring (or point) have rounded corners?
        else if (rc0 > epsilon$5) {
          // @ts-expect-error TS(2454) FIXME: Variable 'x11' is used before being assigned.
          t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw)
          // @ts-expect-error TS(2454) FIXME: Variable 'x00' is used before being assigned.
          t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw)

          // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01)

          // Have the corners merged?
          // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t1.y01, t1.x01), !cw)
          // Otherwise, draw the two corners and the ring.
          else {
            // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
            context.arc(t0.cx, t0.cy, rc0, atan2$1(t0.y01, t0.x01), atan2$1(t0.y11, t0.x11), !cw)
            // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
            context.arc(0, 0, r0, atan2$1(t0.cy + t0.y11, t0.cx + t0.x11), atan2$1(t1.cy + t1.y11, t1.cx + t1.x11), cw)
            // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
            context.arc(t1.cx, t1.cy, rc0, atan2$1(t1.y11, t1.x11), atan2$1(t1.y01, t1.x01), !cw)
          }
        }

        // Or is the inner ring just a circular arc?
        // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
        else context.arc(0, 0, r0, a10, a00, cw)
      }

      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      context.closePath()

      if (buffer) return (context = null), buffer + '' || null
    }

    arc.centroid = function () {
      // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
      const r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
        // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi$4 / 2
      return [cos$2(a) * r, sin$2(a) * r]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    arc.innerRadius = function (_) {
      return arguments.length ? ((innerRadius = typeof _ === 'function' ? _ : constant$a(+_)), arc) : innerRadius
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    arc.outerRadius = function (_) {
      return arguments.length ? ((outerRadius = typeof _ === 'function' ? _ : constant$a(+_)), arc) : outerRadius
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    arc.cornerRadius = function (_) {
      return arguments.length ? ((cornerRadius = typeof _ === 'function' ? _ : constant$a(+_)), arc) : cornerRadius
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    arc.padRadius = function (_) {
      return arguments.length
        ? ((padRadius = _ == null ? null : typeof _ === 'function' ? _ : constant$a(+_)), arc)
        : // @ts-expect-error TS(7005) FIXME: Variable 'padRadius' implicitly has an 'any' type.
          padRadius
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    arc.startAngle = function (_) {
      return arguments.length ? ((startAngle = typeof _ === 'function' ? _ : constant$a(+_)), arc) : startAngle
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    arc.endAngle = function (_) {
      return arguments.length ? ((endAngle = typeof _ === 'function' ? _ : constant$a(+_)), arc) : endAngle
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    arc.padAngle = function (_) {
      return arguments.length ? ((padAngle = typeof _ === 'function' ? _ : constant$a(+_)), arc) : padAngle
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    arc.context = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      return arguments.length ? ((context = _ == null ? null : _), arc) : context
    }

    return arc
  }

  const slice$4 = Array.prototype.slice

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function array$5(x) {
    return typeof x === 'object' && 'length' in x
      ? x // Array, TypedArray, NodeList, array-like
      : // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
        Array.from(x) // Map, Set, iterable, string, or anything else
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function Linear(context) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
  }

  Linear.prototype = {
    areaStart: function () {
      this._line = 0
    },
    areaEnd: function () {
      this._line = NaN
    },
    lineStart: function () {
      this._point = 0
    },
    lineEnd: function () {
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath()
      this._line = 1 - this._line
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      ;(x = +x), (y = +y)
      switch (this._point) {
        case 0:
          this._point = 1
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y)
          break
        case 1:
          this._point = 2 // proceed
        default:
          this._context.lineTo(x, y)
          break
      }
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function curveLinear(context) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Linear(context)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
  function x$3(p) {
    return p[0]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'p' implicitly has an 'any' type.
  function y$3(p) {
    return p[1]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function line(x, y) {
    let defined = constant$a(true),
      // @ts-expect-error TS(7034) FIXME: Variable 'context' implicitly has type 'any' in so... Remove this comment to see the full error message
      context = null,
      curve = curveLinear,
      // @ts-expect-error TS(7034) FIXME: Variable 'output' implicitly has type 'any' in som... Remove this comment to see the full error message
      output = null

    x = typeof x === 'function' ? x : x === undefined ? x$3 : constant$a(x)
    y = typeof y === 'function' ? y : y === undefined ? y$3 : constant$a(y)

    // @ts-expect-error TS(7006) FIXME: Parameter 'data' implicitly has an 'any' type.
    function line(data) {
      let i,
        n = (data = array$5(data)).length,
        d,
        defined0 = false,
        buffer

      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      if (context == null) output = curve((buffer = path()))

      for (i = 0; i <= n; ++i) {
        // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 3.
        if (!(i < n && defined((d = data[i]), i, data)) === defined0) {
          // @ts-expect-error TS(7005) FIXME: Variable 'output' implicitly has an 'any' type.
          if ((defined0 = !defined0)) output.lineStart()
          // @ts-expect-error TS(7005) FIXME: Variable 'output' implicitly has an 'any' type.
          else output.lineEnd()
        }
        // @ts-expect-error TS(7005) FIXME: Variable 'output' implicitly has an 'any' type.
        if (defined0) output.point(+x(d, i, data), +y(d, i, data))
      }

      if (buffer) return (output = null), buffer + '' || null
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    line.x = function (_) {
      return arguments.length ? ((x = typeof _ === 'function' ? _ : constant$a(+_)), line) : x
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    line.y = function (_) {
      return arguments.length ? ((y = typeof _ === 'function' ? _ : constant$a(+_)), line) : y
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    line.defined = function (_) {
      return arguments.length ? ((defined = typeof _ === 'function' ? _ : constant$a(!!_)), line) : defined
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    line.curve = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      return arguments.length ? ((curve = _), context != null && (output = curve(context)), line) : curve
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    line.context = function (_) {
      return arguments.length
        ? (_ == null ? (context = output = null) : (output = curve((context = _))), line)
        : // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          context
    }

    return line
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x0' implicitly has an 'any' type.
  function area$3(x0, y0, y1) {
    // @ts-expect-error TS(7034) FIXME: Variable 'x1' implicitly has type 'any' in some lo... Remove this comment to see the full error message
    let x1 = null,
      defined = constant$a(true),
      // @ts-expect-error TS(7034) FIXME: Variable 'context' implicitly has type 'any' in so... Remove this comment to see the full error message
      context = null,
      curve = curveLinear,
      // @ts-expect-error TS(7034) FIXME: Variable 'output' implicitly has type 'any' in som... Remove this comment to see the full error message
      output = null

    x0 = typeof x0 === 'function' ? x0 : x0 === undefined ? x$3 : constant$a(+x0)
    y0 = typeof y0 === 'function' ? y0 : y0 === undefined ? constant$a(0) : constant$a(+y0)
    y1 = typeof y1 === 'function' ? y1 : y1 === undefined ? y$3 : constant$a(+y1)

    // @ts-expect-error TS(7006) FIXME: Parameter 'data' implicitly has an 'any' type.
    function area(data) {
      let i,
        j,
        k,
        n = (data = array$5(data)).length,
        d,
        defined0 = false,
        buffer,
        x0z = new Array(n),
        y0z = new Array(n)

      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      if (context == null) output = curve((buffer = path()))

      for (i = 0; i <= n; ++i) {
        // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 3.
        if (!(i < n && defined((d = data[i]), i, data)) === defined0) {
          if ((defined0 = !defined0)) {
            j = i
            // @ts-expect-error TS(7005) FIXME: Variable 'output' implicitly has an 'any' type.
            output.areaStart()
            // @ts-expect-error TS(7005) FIXME: Variable 'output' implicitly has an 'any' type.
            output.lineStart()
          } else {
            // @ts-expect-error TS(7005) FIXME: Variable 'output' implicitly has an 'any' type.
            output.lineEnd()
            // @ts-expect-error TS(7005) FIXME: Variable 'output' implicitly has an 'any' type.
            output.lineStart()
            // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
            for (k = i - 1; k >= j; --k) {
              // @ts-expect-error TS(7005) FIXME: Variable 'output' implicitly has an 'any' type.
              output.point(x0z[k], y0z[k])
            }
            // @ts-expect-error TS(7005) FIXME: Variable 'output' implicitly has an 'any' type.
            output.lineEnd()
            // @ts-expect-error TS(7005) FIXME: Variable 'output' implicitly has an 'any' type.
            output.areaEnd()
          }
        }
        if (defined0) {
          ;(x0z[i] = +x0(d, i, data)), (y0z[i] = +y0(d, i, data))
          // @ts-expect-error TS(7005) FIXME: Variable 'output' implicitly has an 'any' type.
          output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i])
        }
      }

      if (buffer) return (output = null), buffer + '' || null
    }

    function arealine() {
      // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 0.
      return line().defined(defined).curve(curve).context(context)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    area.x = function (_) {
      return arguments.length ? ((x0 = typeof _ === 'function' ? _ : constant$a(+_)), (x1 = null), area) : x0
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    area.x0 = function (_) {
      return arguments.length ? ((x0 = typeof _ === 'function' ? _ : constant$a(+_)), area) : x0
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    area.x1 = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'x1' implicitly has an 'any' type.
      return arguments.length ? ((x1 = _ == null ? null : typeof _ === 'function' ? _ : constant$a(+_)), area) : x1
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    area.y = function (_) {
      return arguments.length ? ((y0 = typeof _ === 'function' ? _ : constant$a(+_)), (y1 = null), area) : y0
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    area.y0 = function (_) {
      return arguments.length ? ((y0 = typeof _ === 'function' ? _ : constant$a(+_)), area) : y0
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    area.y1 = function (_) {
      return arguments.length ? ((y1 = _ == null ? null : typeof _ === 'function' ? _ : constant$a(+_)), area) : y1
    }

    area.lineX0 = area.lineY0 = function () {
      return arealine().x(x0).y(y0)
    }

    area.lineY1 = function () {
      return arealine().x(x0).y(y1)
    }

    area.lineX1 = function () {
      // @ts-expect-error TS(7005) FIXME: Variable 'x1' implicitly has an 'any' type.
      return arealine().x(x1).y(y0)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    area.defined = function (_) {
      return arguments.length ? ((defined = typeof _ === 'function' ? _ : constant$a(!!_)), area) : defined
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    area.curve = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      return arguments.length ? ((curve = _), context != null && (output = curve(context)), area) : curve
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    area.context = function (_) {
      return arguments.length
        ? (_ == null ? (context = output = null) : (output = curve((context = _))), area)
        : // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
          context
    }

    return area
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
  function descending$1(a, b) {
    return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function identity$8(d) {
    return d
  }

  function pie() {
    let value = identity$8,
      sortValues = descending$1,
      // @ts-expect-error TS(7034) FIXME: Variable 'sort' implicitly has type 'any' in some ... Remove this comment to see the full error message
      sort = null,
      startAngle = constant$a(0),
      endAngle = constant$a(tau$5),
      padAngle = constant$a(0)

    // @ts-expect-error TS(7006) FIXME: Parameter 'data' implicitly has an 'any' type.
    function pie(data) {
      let i,
        n = (data = array$5(data)).length,
        j,
        k,
        sum = 0,
        index = new Array(n),
        arcs = new Array(n),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        a0 = +startAngle.apply(this, arguments),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        da = Math.min(tau$5, Math.max(-tau$5, endAngle.apply(this, arguments) - a0)),
        a1,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
        pa = p * (da < 0 ? -1 : 1),
        v

      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(2554) FIXME: Expected 1 arguments, but got 3.
        if ((v = arcs[(index[i] = i)] = +value(data[i], i, data)) > 0) {
          sum += v
        }
      }

      // Optionally sort the arcs by previously-computed values or by data.
      if (sortValues != null)
        index.sort(function (i, j) {
          return sortValues(arcs[i], arcs[j])
        })
      // @ts-expect-error TS(7005) FIXME: Variable 'sort' implicitly has an 'any' type.
      else if (sort != null)
        index.sort(function (i, j) {
          // @ts-expect-error TS(7005) FIXME: Variable 'sort' implicitly has an 'any' type.
          return sort(data[i], data[j])
        })

      // Compute the arcs! They are stored in the original data's order.
      for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
        ;(j = index[i]),
          (v = arcs[j]),
          (a1 = a0 + (v > 0 ? v * k : 0) + pa),
          (arcs[j] = {
            data: data[j],
            index: i,
            value: v,
            startAngle: a0,
            endAngle: a1,
            padAngle: p,
          })
      }

      return arcs
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    pie.value = function (_) {
      return arguments.length ? ((value = typeof _ === 'function' ? _ : constant$a(+_)), pie) : value
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    pie.sortValues = function (_) {
      return arguments.length ? ((sortValues = _), (sort = null), pie) : sortValues
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    pie.sort = function (_) {
      // @ts-expect-error TS(2322) FIXME: Type 'null' is not assignable to type '(a: any, b:... Remove this comment to see the full error message
      return arguments.length ? ((sort = _), (sortValues = null), pie) : sort
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    pie.startAngle = function (_) {
      return arguments.length ? ((startAngle = typeof _ === 'function' ? _ : constant$a(+_)), pie) : startAngle
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    pie.endAngle = function (_) {
      return arguments.length ? ((endAngle = typeof _ === 'function' ? _ : constant$a(+_)), pie) : endAngle
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    pie.padAngle = function (_) {
      return arguments.length ? ((padAngle = typeof _ === 'function' ? _ : constant$a(+_)), pie) : padAngle
    }

    return pie
  }

  const curveRadialLinear = curveRadial(curveLinear)

  // @ts-expect-error TS(7006) FIXME: Parameter 'curve' implicitly has an 'any' type.
  function Radial(curve) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._curve = curve
  }

  Radial.prototype = {
    areaStart: function () {
      this._curve.areaStart()
    },
    areaEnd: function () {
      this._curve.areaEnd()
    },
    lineStart: function () {
      this._curve.lineStart()
    },
    lineEnd: function () {
      this._curve.lineEnd()
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'a' implicitly has an 'any' type.
    point: function (a, r) {
      this._curve.point(r * Math.sin(a), r * -Math.cos(a))
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'curve' implicitly has an 'any' type.
  function curveRadial(curve) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    function radial(context) {
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return new Radial(curve(context))
    }

    radial._curve = curve

    return radial
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'l' implicitly has an 'any' type.
  function lineRadial(l) {
    const c = l.curve

    ;(l.angle = l.x), delete l.x
    ;(l.radius = l.y), delete l.y

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    l.curve = function (_) {
      return arguments.length ? c(curveRadial(_)) : c()._curve
    }

    return l
  }

  function lineRadial$1() {
    // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 0.
    return lineRadial(line().curve(curveRadialLinear))
  }

  function areaRadial() {
    // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 0.
    const a = area$3().curve(curveRadialLinear),
      // @ts-expect-error TS(2339) FIXME: Property 'curve' does not exist on type '(context:... Remove this comment to see the full error message
      c = a.curve,
      // @ts-expect-error TS(2339) FIXME: Property 'lineX0' does not exist on type '(context... Remove this comment to see the full error message
      x0 = a.lineX0,
      // @ts-expect-error TS(2339) FIXME: Property 'lineX1' does not exist on type '(context... Remove this comment to see the full error message
      x1 = a.lineX1,
      // @ts-expect-error TS(2339) FIXME: Property 'lineY0' does not exist on type '(context... Remove this comment to see the full error message
      y0 = a.lineY0,
      // @ts-expect-error TS(2339) FIXME: Property 'lineY1' does not exist on type '(context... Remove this comment to see the full error message
      y1 = a.lineY1

    // @ts-expect-error TS(2339) FIXME: Property 'angle' does not exist on type '(context:... Remove this comment to see the full error message
    ;(a.angle = a.x), delete a.x
    // @ts-expect-error TS(2339) FIXME: Property 'startAngle' does not exist on type '(con... Remove this comment to see the full error message
    ;(a.startAngle = a.x0), delete a.x0
    // @ts-expect-error TS(2339) FIXME: Property 'endAngle' does not exist on type '(conte... Remove this comment to see the full error message
    ;(a.endAngle = a.x1), delete a.x1
    // @ts-expect-error TS(2339) FIXME: Property 'radius' does not exist on type '(context... Remove this comment to see the full error message
    ;(a.radius = a.y), delete a.y
    // @ts-expect-error TS(2339) FIXME: Property 'innerRadius' does not exist on type '(co... Remove this comment to see the full error message
    ;(a.innerRadius = a.y0), delete a.y0
    // @ts-expect-error TS(2339) FIXME: Property 'outerRadius' does not exist on type '(co... Remove this comment to see the full error message
    ;(a.outerRadius = a.y1), delete a.y1
    // @ts-expect-error TS(2339) FIXME: Property 'lineStartAngle' does not exist on type '... Remove this comment to see the full error message
    ;(a.lineStartAngle = function () {
      return lineRadial(x0())
    }),
      // @ts-expect-error TS(2339) FIXME: Property 'lineX0' does not exist on type '(context... Remove this comment to see the full error message
      delete a.lineX0
    // @ts-expect-error TS(2339) FIXME: Property 'lineEndAngle' does not exist on type '(c... Remove this comment to see the full error message
    ;(a.lineEndAngle = function () {
      return lineRadial(x1())
    }),
      // @ts-expect-error TS(2339) FIXME: Property 'lineX1' does not exist on type '(context... Remove this comment to see the full error message
      delete a.lineX1
    // @ts-expect-error TS(2339) FIXME: Property 'lineInnerRadius' does not exist on type ... Remove this comment to see the full error message
    ;(a.lineInnerRadius = function () {
      return lineRadial(y0())
    }),
      // @ts-expect-error TS(2339) FIXME: Property 'lineY0' does not exist on type '(context... Remove this comment to see the full error message
      delete a.lineY0
    // @ts-expect-error TS(2339) FIXME: Property 'lineOuterRadius' does not exist on type ... Remove this comment to see the full error message
    ;(a.lineOuterRadius = function () {
      return lineRadial(y1())
    }),
      // @ts-expect-error TS(2339) FIXME: Property 'lineY1' does not exist on type '(context... Remove this comment to see the full error message
      delete a.lineY1

    // @ts-expect-error TS(2339) FIXME: Property 'curve' does not exist on type '(context:... Remove this comment to see the full error message
    a.curve = function (_) {
      return arguments.length ? c(curveRadial(_)) : c()._curve
    }

    return a
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function pointRadial(x, y) {
    return [(y = +y) * Math.cos((x -= Math.PI / 2)), y * Math.sin(x)]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function linkSource(d) {
    return d.source
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function linkTarget(d) {
    return d.target
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'curve' implicitly has an 'any' type.
  function link$2(curve) {
    let source = linkSource,
      target = linkTarget,
      x = x$3,
      y = y$3,
      // @ts-expect-error TS(7034) FIXME: Variable 'context' implicitly has type 'any' in so... Remove this comment to see the full error message
      context = null

    function link() {
      let buffer,
        argv = slice$4.call(arguments),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        s = source.apply(this, argv),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        t = target.apply(this, argv)
      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      if (!context) context = buffer = path()
      curve(
        // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
        context,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        +x.apply(this, ((argv[0] = s), argv)),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        +y.apply(this, argv),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        +x.apply(this, ((argv[0] = t), argv)),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        +y.apply(this, argv)
      )
      if (buffer) return (context = null), buffer + '' || null
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    link.source = function (_) {
      return arguments.length ? ((source = _), link) : source
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    link.target = function (_) {
      return arguments.length ? ((target = _), link) : target
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    link.x = function (_) {
      return arguments.length ? ((x = typeof _ === 'function' ? _ : constant$a(+_)), link) : x
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    link.y = function (_) {
      return arguments.length ? ((y = typeof _ === 'function' ? _ : constant$a(+_)), link) : y
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    link.context = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      return arguments.length ? ((context = _ == null ? null : _), link) : context
    }

    return link
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function curveHorizontal(context, x0, y0, x1, y1) {
    context.moveTo(x0, y0)
    context.bezierCurveTo((x0 = (x0 + x1) / 2), y0, x0, y1, x1, y1)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function curveVertical(context, x0, y0, x1, y1) {
    context.moveTo(x0, y0)
    context.bezierCurveTo(x0, (y0 = (y0 + y1) / 2), x1, y0, x1, y1)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function curveRadial$1(context, x0, y0, x1, y1) {
    const p0 = pointRadial(x0, y0),
      p1 = pointRadial(x0, (y0 = (y0 + y1) / 2)),
      p2 = pointRadial(x1, y0),
      p3 = pointRadial(x1, y1)
    context.moveTo(p0[0], p0[1])
    context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1])
  }

  function linkHorizontal() {
    return link$2(curveHorizontal)
  }

  function linkVertical() {
    return link$2(curveVertical)
  }

  function linkRadial() {
    const l = link$2(curveRadial$1)
    // @ts-expect-error TS(2339) FIXME: Property 'angle' does not exist on type '{ (): str... Remove this comment to see the full error message
    ;(l.angle = l.x), delete l.x
    // @ts-expect-error TS(2339) FIXME: Property 'radius' does not exist on type '{ (): st... Remove this comment to see the full error message
    ;(l.radius = l.y), delete l.y
    return l
  }

  const circle$2 = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    draw: function (context, size) {
      const r = Math.sqrt(size / pi$4)
      context.moveTo(r, 0)
      context.arc(0, 0, r, 0, tau$5)
    },
  }

  const cross$2 = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    draw: function (context, size) {
      const r = Math.sqrt(size / 5) / 2
      context.moveTo(-3 * r, -r)
      context.lineTo(-r, -r)
      context.lineTo(-r, -3 * r)
      context.lineTo(r, -3 * r)
      context.lineTo(r, -r)
      context.lineTo(3 * r, -r)
      context.lineTo(3 * r, r)
      context.lineTo(r, r)
      context.lineTo(r, 3 * r)
      context.lineTo(-r, 3 * r)
      context.lineTo(-r, r)
      context.lineTo(-3 * r, r)
      context.closePath()
    },
  }

  const tan30 = Math.sqrt(1 / 3),
    tan30_2 = tan30 * 2

  const diamond = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    draw: function (context, size) {
      const y = Math.sqrt(size / tan30_2),
        x = y * tan30
      context.moveTo(0, -y)
      context.lineTo(x, 0)
      context.lineTo(0, y)
      context.lineTo(-x, 0)
      context.closePath()
    },
  }

  const ka = 0.8908130915292852281,
    kr = Math.sin(pi$4 / 10) / Math.sin((7 * pi$4) / 10),
    kx = Math.sin(tau$5 / 10) * kr,
    ky = -Math.cos(tau$5 / 10) * kr

  const star = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    draw: function (context, size) {
      const r = Math.sqrt(size * ka),
        x = kx * r,
        y = ky * r
      context.moveTo(0, -r)
      context.lineTo(x, y)
      for (let i = 1; i < 5; ++i) {
        const a = (tau$5 * i) / 5,
          c = Math.cos(a),
          s = Math.sin(a)
        context.lineTo(s * r, -c * r)
        context.lineTo(c * x - s * y, s * x + c * y)
      }
      context.closePath()
    },
  }

  const square$1 = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    draw: function (context, size) {
      const w = Math.sqrt(size),
        x = -w / 2
      context.rect(x, x, w, w)
    },
  }

  const sqrt3 = Math.sqrt(3)

  const triangle = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    draw: function (context, size) {
      const y = -Math.sqrt(size / (sqrt3 * 3))
      context.moveTo(0, y * 2)
      context.lineTo(-sqrt3 * y, -y)
      context.lineTo(sqrt3 * y, -y)
      context.closePath()
    },
  }

  const c$3 = -0.5,
    s = Math.sqrt(3) / 2,
    k = 1 / Math.sqrt(12),
    a$1 = (k / 2 + 1) * 3

  const wye = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    draw: function (context, size) {
      const r = Math.sqrt(size / a$1),
        x0 = r / 2,
        y0 = r * k,
        x1 = x0,
        y1 = r * k + r,
        x2 = -x1,
        y2 = y1
      context.moveTo(x0, y0)
      context.lineTo(x1, y1)
      context.lineTo(x2, y2)
      context.lineTo(c$3 * x0 - s * y0, s * x0 + c$3 * y0)
      context.lineTo(c$3 * x1 - s * y1, s * x1 + c$3 * y1)
      context.lineTo(c$3 * x2 - s * y2, s * x2 + c$3 * y2)
      context.lineTo(c$3 * x0 + s * y0, c$3 * y0 - s * x0)
      context.lineTo(c$3 * x1 + s * y1, c$3 * y1 - s * x1)
      context.lineTo(c$3 * x2 + s * y2, c$3 * y2 - s * x2)
      context.closePath()
    },
  }

  const symbols = [circle$2, cross$2, diamond, square$1, star, triangle, wye]

  // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
  function symbol(type, size) {
    // @ts-expect-error TS(7034) FIXME: Variable 'context' implicitly has type 'any' in so... Remove this comment to see the full error message
    let context = null
    type = typeof type === 'function' ? type : constant$a(type || circle$2)
    size = typeof size === 'function' ? size : constant$a(size === undefined ? 64 : +size)

    function symbol() {
      let buffer
      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      if (!context) context = buffer = path()
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      type.apply(this, arguments).draw(context, +size.apply(this, arguments))
      if (buffer) return (context = null), buffer + '' || null
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    symbol.type = function (_) {
      return arguments.length ? ((type = typeof _ === 'function' ? _ : constant$a(_)), symbol) : type
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    symbol.size = function (_) {
      return arguments.length ? ((size = typeof _ === 'function' ? _ : constant$a(+_)), symbol) : size
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    symbol.context = function (_) {
      // @ts-expect-error TS(7005) FIXME: Variable 'context' implicitly has an 'any' type.
      return arguments.length ? ((context = _ == null ? null : _), symbol) : context
    }

    return symbol
  }

  function noop$3() {}

  // @ts-expect-error TS(7006) FIXME: Parameter 'that' implicitly has an 'any' type.
  function point$1(that, x, y) {
    that._context.bezierCurveTo(
      (2 * that._x0 + that._x1) / 3,
      (2 * that._y0 + that._y1) / 3,
      (that._x0 + 2 * that._x1) / 3,
      (that._y0 + 2 * that._y1) / 3,
      (that._x0 + 4 * that._x1 + x) / 6,
      (that._y0 + 4 * that._y1 + y) / 6
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function Basis(context) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
  }

  Basis.prototype = {
    areaStart: function () {
      this._line = 0
    },
    areaEnd: function () {
      this._line = NaN
    },
    lineStart: function () {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN
      this._point = 0
    },
    lineEnd: function () {
      switch (this._point) {
        case 3:
          point$1(this, this._x1, this._y1) // proceed
        case 2:
          this._context.lineTo(this._x1, this._y1)
          break
      }
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath()
      this._line = 1 - this._line
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      ;(x = +x), (y = +y)
      switch (this._point) {
        case 0:
          this._point = 1
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y)
          break
        case 1:
          this._point = 2
          break
        case 2:
          this._point = 3
          this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6) // proceed
        default:
          point$1(this, x, y)
          break
      }
      ;(this._x0 = this._x1), (this._x1 = x)
      ;(this._y0 = this._y1), (this._y1 = y)
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function basis$2(context) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Basis(context)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function BasisClosed(context) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
  }

  BasisClosed.prototype = {
    areaStart: noop$3,
    areaEnd: noop$3,
    lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN
      this._point = 0
    },
    lineEnd: function () {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x2, this._y2)
          this._context.closePath()
          break
        }
        case 2: {
          this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3)
          this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3)
          this._context.closePath()
          break
        }
        case 3: {
          this.point(this._x2, this._y2)
          this.point(this._x3, this._y3)
          this.point(this._x4, this._y4)
          break
        }
      }
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      ;(x = +x), (y = +y)
      switch (this._point) {
        case 0:
          this._point = 1
          ;(this._x2 = x), (this._y2 = y)
          break
        case 1:
          this._point = 2
          ;(this._x3 = x), (this._y3 = y)
          break
        case 2:
          this._point = 3
          ;(this._x4 = x), (this._y4 = y)
          this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6)
          break
        default:
          point$1(this, x, y)
          break
      }
      ;(this._x0 = this._x1), (this._x1 = x)
      ;(this._y0 = this._y1), (this._y1 = y)
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function basisClosed$1(context) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new BasisClosed(context)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function BasisOpen(context) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
  }

  BasisOpen.prototype = {
    areaStart: function () {
      this._line = 0
    },
    areaEnd: function () {
      this._line = NaN
    },
    lineStart: function () {
      this._x0 = this._x1 = this._y0 = this._y1 = NaN
      this._point = 0
    },
    lineEnd: function () {
      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath()
      this._line = 1 - this._line
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      ;(x = +x), (y = +y)
      switch (this._point) {
        case 0:
          this._point = 1
          break
        case 1:
          this._point = 2
          break
        case 2:
          this._point = 3
          var x0 = (this._x0 + 4 * this._x1 + x) / 6,
            y0 = (this._y0 + 4 * this._y1 + y) / 6
          this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0)
          break
        case 3:
          this._point = 4 // proceed
        default:
          point$1(this, x, y)
          break
      }
      ;(this._x0 = this._x1), (this._x1 = x)
      ;(this._y0 = this._y1), (this._y1 = y)
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function basisOpen(context) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new BasisOpen(context)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function Bundle(context, beta) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._basis = new Basis(context)
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._beta = beta
  }

  Bundle.prototype = {
    lineStart: function () {
      this._x = []
      this._y = []
      this._basis.lineStart()
    },
    lineEnd: function () {
      const x = this._x,
        y = this._y,
        j = x.length - 1

      if (j > 0) {
        let x0 = x[0],
          y0 = y[0],
          dx = x[j] - x0,
          dy = y[j] - y0,
          i = -1,
          t

        while (++i <= j) {
          t = i / j
          this._basis.point(
            this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
            this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
          )
        }
      }

      this._x = this._y = null
      this._basis.lineEnd()
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      this._x.push(+x)
      this._y.push(+y)
    },
  }

  const bundle = (function custom(beta) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    function bundle(context) {
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return beta === 1 ? new Basis(context) : new Bundle(context, beta)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'beta' implicitly has an 'any' type.
    bundle.beta = function (beta) {
      return custom(+beta)
    }

    return bundle
  })(0.85)

  // @ts-expect-error TS(7006) FIXME: Parameter 'that' implicitly has an 'any' type.
  function point$2(that, x, y) {
    that._context.bezierCurveTo(
      that._x1 + that._k * (that._x2 - that._x0),
      that._y1 + that._k * (that._y2 - that._y0),
      that._x2 + that._k * (that._x1 - x),
      that._y2 + that._k * (that._y1 - y),
      that._x2,
      that._y2
    )
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function Cardinal(context, tension) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._k = (1 - tension) / 6
  }

  Cardinal.prototype = {
    areaStart: function () {
      this._line = 0
    },
    areaEnd: function () {
      this._line = NaN
    },
    lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN
      this._point = 0
    },
    lineEnd: function () {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2)
          break
        case 3:
          point$2(this, this._x1, this._y1)
          break
      }
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath()
      this._line = 1 - this._line
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      ;(x = +x), (y = +y)
      switch (this._point) {
        case 0:
          this._point = 1
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y)
          break
        case 1:
          this._point = 2
          ;(this._x1 = x), (this._y1 = y)
          break
        case 2:
          this._point = 3 // proceed
        default:
          point$2(this, x, y)
          break
      }
      ;(this._x0 = this._x1), (this._x1 = this._x2), (this._x2 = x)
      ;(this._y0 = this._y1), (this._y1 = this._y2), (this._y2 = y)
    },
  }

  const cardinal = (function custom(tension) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    function cardinal(context) {
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return new Cardinal(context, tension)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'tension' implicitly has an 'any' type.
    cardinal.tension = function (tension) {
      return custom(+tension)
    }

    return cardinal
  })(0)

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function CardinalClosed(context, tension) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._k = (1 - tension) / 6
  }

  CardinalClosed.prototype = {
    areaStart: noop$3,
    areaEnd: noop$3,
    lineStart: function () {
      this._x0 =
        this._x1 =
        this._x2 =
        this._x3 =
        this._x4 =
        this._x5 =
        this._y0 =
        this._y1 =
        this._y2 =
        this._y3 =
        this._y4 =
        this._y5 =
          NaN
      this._point = 0
    },
    lineEnd: function () {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x3, this._y3)
          this._context.closePath()
          break
        }
        case 2: {
          this._context.lineTo(this._x3, this._y3)
          this._context.closePath()
          break
        }
        case 3: {
          this.point(this._x3, this._y3)
          this.point(this._x4, this._y4)
          this.point(this._x5, this._y5)
          break
        }
      }
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      ;(x = +x), (y = +y)
      switch (this._point) {
        case 0:
          this._point = 1
          ;(this._x3 = x), (this._y3 = y)
          break
        case 1:
          this._point = 2
          this._context.moveTo((this._x4 = x), (this._y4 = y))
          break
        case 2:
          this._point = 3
          ;(this._x5 = x), (this._y5 = y)
          break
        default:
          point$2(this, x, y)
          break
      }
      ;(this._x0 = this._x1), (this._x1 = this._x2), (this._x2 = x)
      ;(this._y0 = this._y1), (this._y1 = this._y2), (this._y2 = y)
    },
  }

  const cardinalClosed = (function custom(tension) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    function cardinal(context) {
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return new CardinalClosed(context, tension)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'tension' implicitly has an 'any' type.
    cardinal.tension = function (tension) {
      return custom(+tension)
    }

    return cardinal
  })(0)

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function CardinalOpen(context, tension) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._k = (1 - tension) / 6
  }

  CardinalOpen.prototype = {
    areaStart: function () {
      this._line = 0
    },
    areaEnd: function () {
      this._line = NaN
    },
    lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN
      this._point = 0
    },
    lineEnd: function () {
      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath()
      this._line = 1 - this._line
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      ;(x = +x), (y = +y)
      switch (this._point) {
        case 0:
          this._point = 1
          break
        case 1:
          this._point = 2
          break
        case 2:
          this._point = 3
          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2)
          break
        case 3:
          this._point = 4 // proceed
        default:
          point$2(this, x, y)
          break
      }
      ;(this._x0 = this._x1), (this._x1 = this._x2), (this._x2 = x)
      ;(this._y0 = this._y1), (this._y1 = this._y2), (this._y2 = y)
    },
  }

  const cardinalOpen = (function custom(tension) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    function cardinal(context) {
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return new CardinalOpen(context, tension)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'tension' implicitly has an 'any' type.
    cardinal.tension = function (tension) {
      return custom(+tension)
    }

    return cardinal
  })(0)

  // @ts-expect-error TS(7006) FIXME: Parameter 'that' implicitly has an 'any' type.
  function point$3(that, x, y) {
    let x1 = that._x1,
      y1 = that._y1,
      x2 = that._x2,
      y2 = that._y2

    if (that._l01_a > epsilon$5) {
      const a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
        n = 3 * that._l01_a * (that._l01_a + that._l12_a)
      x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n
      y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n
    }

    if (that._l23_a > epsilon$5) {
      const b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
        m = 3 * that._l23_a * (that._l23_a + that._l12_a)
      x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m
      y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m
    }

    that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function CatmullRom(context, alpha) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._alpha = alpha
  }

  CatmullRom.prototype = {
    areaStart: function () {
      this._line = 0
    },
    areaEnd: function () {
      this._line = NaN
    },
    lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0
    },
    lineEnd: function () {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x2, this._y2)
          break
        case 3:
          this.point(this._x2, this._y2)
          break
      }
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath()
      this._line = 1 - this._line
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      ;(x = +x), (y = +y)

      if (this._point) {
        const x23 = this._x2 - x,
          y23 = this._y2 - y
        this._l23_a = Math.sqrt((this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha)))
      }

      switch (this._point) {
        case 0:
          this._point = 1
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y)
          break
        case 1:
          this._point = 2
          break
        case 2:
          this._point = 3 // proceed
        default:
          point$3(this, x, y)
          break
      }

      ;(this._l01_a = this._l12_a), (this._l12_a = this._l23_a)
      ;(this._l01_2a = this._l12_2a), (this._l12_2a = this._l23_2a)
      ;(this._x0 = this._x1), (this._x1 = this._x2), (this._x2 = x)
      ;(this._y0 = this._y1), (this._y1 = this._y2), (this._y2 = y)
    },
  }

  const catmullRom = (function custom(alpha) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    function catmullRom(context) {
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'alpha' implicitly has an 'any' type.
    catmullRom.alpha = function (alpha) {
      return custom(+alpha)
    }

    return catmullRom
  })(0.5)

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function CatmullRomClosed(context, alpha) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._alpha = alpha
  }

  CatmullRomClosed.prototype = {
    areaStart: noop$3,
    areaEnd: noop$3,
    lineStart: function () {
      this._x0 =
        this._x1 =
        this._x2 =
        this._x3 =
        this._x4 =
        this._x5 =
        this._y0 =
        this._y1 =
        this._y2 =
        this._y3 =
        this._y4 =
        this._y5 =
          NaN
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0
    },
    lineEnd: function () {
      switch (this._point) {
        case 1: {
          this._context.moveTo(this._x3, this._y3)
          this._context.closePath()
          break
        }
        case 2: {
          this._context.lineTo(this._x3, this._y3)
          this._context.closePath()
          break
        }
        case 3: {
          this.point(this._x3, this._y3)
          this.point(this._x4, this._y4)
          this.point(this._x5, this._y5)
          break
        }
      }
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      ;(x = +x), (y = +y)

      if (this._point) {
        const x23 = this._x2 - x,
          y23 = this._y2 - y
        this._l23_a = Math.sqrt((this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha)))
      }

      switch (this._point) {
        case 0:
          this._point = 1
          ;(this._x3 = x), (this._y3 = y)
          break
        case 1:
          this._point = 2
          this._context.moveTo((this._x4 = x), (this._y4 = y))
          break
        case 2:
          this._point = 3
          ;(this._x5 = x), (this._y5 = y)
          break
        default:
          point$3(this, x, y)
          break
      }

      ;(this._l01_a = this._l12_a), (this._l12_a = this._l23_a)
      ;(this._l01_2a = this._l12_2a), (this._l12_2a = this._l23_2a)
      ;(this._x0 = this._x1), (this._x1 = this._x2), (this._x2 = x)
      ;(this._y0 = this._y1), (this._y1 = this._y2), (this._y2 = y)
    },
  }

  const catmullRomClosed = (function custom(alpha) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    function catmullRom(context) {
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'alpha' implicitly has an 'any' type.
    catmullRom.alpha = function (alpha) {
      return custom(+alpha)
    }

    return catmullRom
  })(0.5)

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function CatmullRomOpen(context, alpha) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._alpha = alpha
  }

  CatmullRomOpen.prototype = {
    areaStart: function () {
      this._line = 0
    },
    areaEnd: function () {
      this._line = NaN
    },
    lineStart: function () {
      this._x0 = this._x1 = this._x2 = this._y0 = this._y1 = this._y2 = NaN
      this._l01_a = this._l12_a = this._l23_a = this._l01_2a = this._l12_2a = this._l23_2a = this._point = 0
    },
    lineEnd: function () {
      if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath()
      this._line = 1 - this._line
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      ;(x = +x), (y = +y)

      if (this._point) {
        const x23 = this._x2 - x,
          y23 = this._y2 - y
        this._l23_a = Math.sqrt((this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha)))
      }

      switch (this._point) {
        case 0:
          this._point = 1
          break
        case 1:
          this._point = 2
          break
        case 2:
          this._point = 3
          this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2)
          break
        case 3:
          this._point = 4 // proceed
        default:
          point$3(this, x, y)
          break
      }

      ;(this._l01_a = this._l12_a), (this._l12_a = this._l23_a)
      ;(this._l01_2a = this._l12_2a), (this._l12_2a = this._l23_2a)
      ;(this._x0 = this._x1), (this._x1 = this._x2), (this._x2 = x)
      ;(this._y0 = this._y1), (this._y1 = this._y2), (this._y2 = y)
    },
  }

  const catmullRomOpen = (function custom(alpha) {
    // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
    function catmullRom(context) {
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'alpha' implicitly has an 'any' type.
    catmullRom.alpha = function (alpha) {
      return custom(+alpha)
    }

    return catmullRom
  })(0.5)

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function LinearClosed(context) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
  }

  LinearClosed.prototype = {
    areaStart: noop$3,
    areaEnd: noop$3,
    lineStart: function () {
      this._point = 0
    },
    lineEnd: function () {
      if (this._point) this._context.closePath()
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      ;(x = +x), (y = +y)
      if (this._point) this._context.lineTo(x, y)
      else (this._point = 1), this._context.moveTo(x, y)
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function linearClosed(context) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new LinearClosed(context)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function sign$1(x) {
    return x < 0 ? -1 : 1
  }

  // Calculate the slopes of the tangents (Hermite-type interpolation) based on
  // the following paper: Steffen, M. 1990. A Simple Method for Monotonic
  // Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
  // NOV(II), P. 443, 1990.
  // @ts-expect-error TS(7006) FIXME: Parameter 'that' implicitly has an 'any' type.
  function slope3(that, x2, y2) {
    const h0 = that._x1 - that._x0,
      h1 = x2 - that._x1,
      // @ts-expect-error TS(2363) FIXME: The right-hand side of an arithmetic operation mus... Remove this comment to see the full error message
      s0 = (that._y1 - that._y0) / (h0 || (h1 < 0 && -0)),
      // @ts-expect-error TS(2363) FIXME: The right-hand side of an arithmetic operation mus... Remove this comment to see the full error message
      s1 = (y2 - that._y1) / (h1 || (h0 < 0 && -0)),
      p = (s0 * h1 + s1 * h0) / (h0 + h1)
    return (sign$1(s0) + sign$1(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0
  }

  // Calculate a one-sided slope.
  // @ts-expect-error TS(7006) FIXME: Parameter 'that' implicitly has an 'any' type.
  function slope2(that, t) {
    const h = that._x1 - that._x0
    return h ? ((3 * (that._y1 - that._y0)) / h - t) / 2 : t
  }

  // According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
  // "you can express cubic Hermite interpolation in terms of cubic Bézier curves
  // with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
  // @ts-expect-error TS(7006) FIXME: Parameter 'that' implicitly has an 'any' type.
  function point$4(that, t0, t1) {
    const x0 = that._x0,
      y0 = that._y0,
      x1 = that._x1,
      y1 = that._y1,
      dx = (x1 - x0) / 3
    that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function MonotoneX(context) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
  }

  MonotoneX.prototype = {
    areaStart: function () {
      this._line = 0
    },
    areaEnd: function () {
      this._line = NaN
    },
    lineStart: function () {
      this._x0 = this._x1 = this._y0 = this._y1 = this._t0 = NaN
      this._point = 0
    },
    lineEnd: function () {
      switch (this._point) {
        case 2:
          this._context.lineTo(this._x1, this._y1)
          break
        case 3:
          point$4(this, this._t0, slope2(this, this._t0))
          break
      }
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath()
      this._line = 1 - this._line
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      let t1 = NaN

      ;(x = +x), (y = +y)
      if (x === this._x1 && y === this._y1) return // Ignore coincident points.
      switch (this._point) {
        case 0:
          this._point = 1
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y)
          break
        case 1:
          this._point = 2
          break
        case 2:
          this._point = 3
          point$4(this, slope2(this, (t1 = slope3(this, x, y))), t1)
          break
        default:
          point$4(this, this._t0, (t1 = slope3(this, x, y)))
          break
      }

      ;(this._x0 = this._x1), (this._x1 = x)
      ;(this._y0 = this._y1), (this._y1 = y)
      this._t0 = t1
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function MonotoneY(context) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = new ReflectContext(context)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  ;(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function (x, y) {
    MonotoneX.prototype.point.call(this, y, x)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function ReflectContext(context) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
  }

  ReflectContext.prototype = {
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    moveTo: function (x, y) {
      this._context.moveTo(y, x)
    },
    closePath: function () {
      this._context.closePath()
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    lineTo: function (x, y) {
      this._context.lineTo(y, x)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x1' implicitly has an 'any' type.
    bezierCurveTo: function (x1, y1, x2, y2, x, y) {
      this._context.bezierCurveTo(y1, x1, y2, x2, y, x)
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function monotoneX(context) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new MonotoneX(context)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function monotoneY(context) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new MonotoneY(context)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function Natural(context) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
  }

  Natural.prototype = {
    areaStart: function () {
      this._line = 0
    },
    areaEnd: function () {
      this._line = NaN
    },
    lineStart: function () {
      this._x = []
      this._y = []
    },
    lineEnd: function () {
      const x = this._x,
        y = this._y,
        n = x.length

      if (n) {
        this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0])
        if (n === 2) {
          this._context.lineTo(x[1], y[1])
        } else {
          const px = controlPoints(x),
            py = controlPoints(y)
          for (let i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
            this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1])
          }
        }
      }

      if (this._line || (this._line !== 0 && n === 1)) this._context.closePath()
      this._line = 1 - this._line
      this._x = this._y = null
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      this._x.push(+x)
      this._y.push(+y)
    },
  }

  // See https://www.particleincell.com/2012/bezier-splines/ for derivation.
  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  function controlPoints(x) {
    let i,
      n = x.length - 1,
      m,
      a = new Array(n),
      b = new Array(n),
      r = new Array(n)
    ;(a[0] = 0), (b[0] = 2), (r[0] = x[0] + 2 * x[1])
    for (i = 1; i < n - 1; ++i) (a[i] = 1), (b[i] = 4), (r[i] = 4 * x[i] + 2 * x[i + 1])
    ;(a[n - 1] = 2), (b[n - 1] = 7), (r[n - 1] = 8 * x[n - 1] + x[n])
    for (i = 1; i < n; ++i) (m = a[i] / b[i - 1]), (b[i] -= m), (r[i] -= m * r[i - 1])
    a[n - 1] = r[n - 1] / b[n - 1]
    for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i]
    b[n - 1] = (x[n] + a[n - 1]) / 2
    for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1]
    return [a, b]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function natural(context) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Natural(context)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function Step(context, t) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._context = context
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this._t = t
  }

  Step.prototype = {
    areaStart: function () {
      this._line = 0
    },
    areaEnd: function () {
      this._line = NaN
    },
    lineStart: function () {
      this._x = this._y = NaN
      this._point = 0
    },
    lineEnd: function () {
      if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y)
      if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath()
      if (this._line >= 0) (this._t = 1 - this._t), (this._line = 1 - this._line)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    point: function (x, y) {
      ;(x = +x), (y = +y)
      switch (this._point) {
        case 0:
          this._point = 1
          this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y)
          break
        case 1:
          this._point = 2 // proceed
        default: {
          if (this._t <= 0) {
            this._context.lineTo(this._x, y)
            this._context.lineTo(x, y)
          } else {
            const x1 = this._x * (1 - this._t) + x * this._t
            this._context.lineTo(x1, this._y)
            this._context.lineTo(x1, y)
          }
          break
        }
      }
      ;(this._x = x), (this._y = y)
    },
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function step(context) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Step(context, 0.5)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function stepBefore(context) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Step(context, 0)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'context' implicitly has an 'any' type.
  function stepAfter(context) {
    // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
    return new Step(context, 1)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function none$1(series, order) {
    if (!((n = series.length) > 1)) return
    for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
      ;(s0 = s1), (s1 = series[order[i]])
      for (j = 0; j < m; ++j) {
        s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1]
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function none$2(series) {
    let n = series.length,
      o = new Array(n)
    while (--n >= 0) o[n] = n
    return o
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'd' implicitly has an 'any' type.
  function stackValue(d, key) {
    return d[key]
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'key' implicitly has an 'any' type.
  function stackSeries(key) {
    // @ts-expect-error TS(7034) FIXME: Variable 'series' implicitly has type 'any[]' in s... Remove this comment to see the full error message
    const series = []
    // @ts-expect-error TS(7005) FIXME: Variable 'series' implicitly has an 'any[]' type.
    series.key = key
    // @ts-expect-error TS(7005) FIXME: Variable 'series' implicitly has an 'any[]' type.
    return series
  }

  function stack() {
    let keys = constant$a([]),
      order = none$2,
      offset = none$1,
      value = stackValue

    // @ts-expect-error TS(7006) FIXME: Parameter 'data' implicitly has an 'any' type.
    function stack(data) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      let sz = Array.from(keys.apply(this, arguments), stackSeries),
        i,
        n = sz.length,
        j = -1,
        oz

      for (const d of data) {
        for (i = 0, ++j; i < n; ++i) {
          // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 4.
          ;(sz[i][j] = [0, +value(d, sz[i].key, j, data)]).data = d
        }
      }

      for (i = 0, oz = array$5(order(sz)); i < n; ++i) {
        sz[oz[i]].index = i
      }

      offset(sz, oz)
      return sz
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    stack.keys = function (_) {
      // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
      return arguments.length ? ((keys = typeof _ === 'function' ? _ : constant$a(Array.from(_))), stack) : keys
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    stack.value = function (_) {
      return arguments.length ? ((value = typeof _ === 'function' ? _ : constant$a(+_)), stack) : value
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    stack.order = function (_) {
      return arguments.length
        ? // @ts-expect-error TS(2550) FIXME: Property 'from' does not exist on type 'ArrayConst... Remove this comment to see the full error message
          ((order = _ == null ? none$2 : typeof _ === 'function' ? _ : constant$a(Array.from(_))), stack)
        : order
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    stack.offset = function (_) {
      return arguments.length ? ((offset = _ == null ? none$1 : _), stack) : offset
    }

    return stack
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function expand(series, order) {
    if (!((n = series.length) > 0)) return
    for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
      for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0
      if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y
    }
    none$1(series, order)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function diverging$1(series, order) {
    if (!((n = series.length) > 0)) return
    for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
      for (yp = yn = 0, i = 0; i < n; ++i) {
        if ((dy = (d = series[order[i]][j])[1] - d[0]) > 0) {
          ;(d[0] = yp), (d[1] = yp += dy)
        } else if (dy < 0) {
          ;(d[1] = yn), (d[0] = yn += dy)
        } else {
          ;(d[0] = 0), (d[1] = dy)
        }
      }
    }
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function silhouette(series, order) {
    if (!((n = series.length) > 0)) return
    for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
      for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0
      s0[j][1] += s0[j][0] = -y / 2
    }
    none$1(series, order)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function wiggle(series, order) {
    if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return
    for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
      for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
        let si = series[order[i]],
          sij0 = si[j][1] || 0,
          sij1 = si[j - 1][1] || 0,
          s3 = (sij0 - sij1) / 2
        for (let k = 0; k < i; ++k) {
          const sk = series[order[k]],
            skj0 = sk[j][1] || 0,
            skj1 = sk[j - 1][1] || 0
          s3 += skj0 - skj1
        }
        ;(s1 += sij0), (s2 += s3 * sij0)
      }
      s0[j - 1][1] += s0[j - 1][0] = y
      if (s1) y -= s2 / s1
    }
    s0[j - 1][1] += s0[j - 1][0] = y
    none$1(series, order)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function appearance(series) {
    const peaks = series.map(peak)
    return none$2(series).sort(function (a, b) {
      return peaks[a] - peaks[b]
    })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function peak(series) {
    let i = -1,
      j = 0,
      n = series.length,
      vi,
      vj = -Infinity
    while (++i < n) if ((vi = +series[i][1]) > vj) (vj = vi), (j = i)
    return j
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function ascending$3(series) {
    const sums = series.map(sum$1)
    return none$2(series).sort(function (a, b) {
      return sums[a] - sums[b]
    })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function sum$1(series) {
    let s = 0,
      i = -1,
      n = series.length,
      v
    while (++i < n) if ((v = +series[i][1])) s += v
    return s
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function descending$2(series) {
    return ascending$3(series).reverse()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function insideOut(series) {
    let n = series.length,
      i,
      j,
      sums = series.map(sum$1),
      order = appearance(series),
      top = 0,
      bottom = 0,
      tops = [],
      bottoms = []

    for (i = 0; i < n; ++i) {
      j = order[i]
      if (top < bottom) {
        top += sums[j]
        tops.push(j)
      } else {
        bottom += sums[j]
        bottoms.push(j)
      }
    }

    return bottoms.reverse().concat(tops)
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'series' implicitly has an 'any' type.
  function reverse$1(series) {
    return none$2(series).reverse()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
  const constant$b = x => () => x

  function ZoomEvent(
    // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
    type,
    {
      // @ts-expect-error TS(7031) FIXME: Binding element 'sourceEvent' implicitly has an 'a... Remove this comment to see the full error message
      sourceEvent,
      // @ts-expect-error TS(7031) FIXME: Binding element 'target' implicitly has an 'any' t... Remove this comment to see the full error message
      target,
      // @ts-expect-error TS(7031) FIXME: Binding element 'transform' implicitly has an 'any... Remove this comment to see the full error message
      transform,
      // @ts-expect-error TS(7031) FIXME: Binding element 'dispatch' implicitly has an 'any'... Remove this comment to see the full error message
      dispatch,
    }
  ) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    Object.defineProperties(this, {
      type: { value: type, enumerable: true, configurable: true },
      sourceEvent: { value: sourceEvent, enumerable: true, configurable: true },
      target: { value: target, enumerable: true, configurable: true },
      transform: { value: transform, enumerable: true, configurable: true },
      _: { value: dispatch },
    })
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
  function Transform(k, x, y) {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.k = k
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.x = x
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    this.y = y
  }

  Transform.prototype = {
    constructor: Transform,
    // @ts-expect-error TS(7006) FIXME: Parameter 'k' implicitly has an 'any' type.
    scale: function (k) {
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return k === 1 ? this : new Transform(this.k * k, this.x, this.y)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    translate: function (x, y) {
      // @ts-expect-error TS(2447) FIXME: The '&' operator is not allowed for boolean types.... Remove this comment to see the full error message
      return (x === 0) & (y === 0) ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y)
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'point' implicitly has an 'any' type.
    apply: function (point) {
      return [point[0] * this.k + this.x, point[1] * this.k + this.y]
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    applyX: function (x) {
      return x * this.k + this.x
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
    applyY: function (y) {
      return y * this.k + this.y
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'location' implicitly has an 'any' type.
    invert: function (location) {
      return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k]
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    invertX: function (x) {
      return (x - this.x) / this.k
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
    invertY: function (y) {
      return (y - this.y) / this.k
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'x' implicitly has an 'any' type.
    rescaleX: function (x) {
      return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x))
    },
    // @ts-expect-error TS(7006) FIXME: Parameter 'y' implicitly has an 'any' type.
    rescaleY: function (y) {
      return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y))
    },
    toString: function () {
      return 'translate(' + this.x + ',' + this.y + ') scale(' + this.k + ')'
    },
  }

  // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
  const identity$9 = new Transform(1, 0, 0)

  transform$1.prototype = Transform.prototype

  // @ts-expect-error TS(7006) FIXME: Parameter 'node' implicitly has an 'any' type.
  function transform$1(node) {
    while (!node.__zoom) if (!(node = node.parentNode)) return identity$9
    return node.__zoom
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function nopropagation$2(event) {
    event.stopImmediatePropagation()
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function noevent$2(event) {
    event.preventDefault()
    event.stopImmediatePropagation()
  }

  // Ignore right-click, since that should open the context menu.
  // except for pinch-to-zoom, which is sent as a wheel+ctrlKey event
  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function defaultFilter$2(event) {
    return (!event.ctrlKey || event.type === 'wheel') && !event.button
  }

  function defaultExtent$1() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    let e = this
    if (e instanceof SVGElement) {
      e = e.ownerSVGElement || e
      if (e.hasAttribute('viewBox')) {
        e = e.viewBox.baseVal
        return [
          [e.x, e.y],
          [e.x + e.width, e.y + e.height],
        ]
      }
      return [
        [0, 0],
        [e.width.baseVal.value, e.height.baseVal.value],
      ]
    }
    return [
      [0, 0],
      [e.clientWidth, e.clientHeight],
    ]
  }

  function defaultTransform() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return this.__zoom || identity$9
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
  function defaultWheelDelta(event) {
    return -event.deltaY * (event.deltaMode === 1 ? 0.05 : event.deltaMode ? 1 : 0.002) * (event.ctrlKey ? 10 : 1)
  }

  function defaultTouchable$2() {
    // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
    return navigator.maxTouchPoints || 'ontouchstart' in this
  }

  // @ts-expect-error TS(7006) FIXME: Parameter 'transform' implicitly has an 'any' type... Remove this comment to see the full error message
  function defaultConstrain(transform, extent, translateExtent) {
    const dx0 = transform.invertX(extent[0][0]) - translateExtent[0][0],
      dx1 = transform.invertX(extent[1][0]) - translateExtent[1][0],
      dy0 = transform.invertY(extent[0][1]) - translateExtent[0][1],
      dy1 = transform.invertY(extent[1][1]) - translateExtent[1][1]
    return transform.translate(
      dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
      dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
    )
  }

  function zoom() {
    let filter = defaultFilter$2,
      extent = defaultExtent$1,
      constrain = defaultConstrain,
      wheelDelta = defaultWheelDelta,
      touchable = defaultTouchable$2,
      scaleExtent = [0, Infinity],
      translateExtent = [
        [-Infinity, -Infinity],
        [Infinity, Infinity],
      ],
      duration = 250,
      interpolate = interpolateZoom,
      // @ts-expect-error TS(2554) FIXME: Expected 0 arguments, but got 3.
      listeners = dispatch('start', 'zoom', 'end'),
      // @ts-expect-error TS(7034) FIXME: Variable 'touchstarting' implicitly has type 'any'... Remove this comment to see the full error message
      touchstarting,
      // @ts-expect-error TS(7034) FIXME: Variable 'touchfirst' implicitly has type 'any' in... Remove this comment to see the full error message
      touchfirst,
      // @ts-expect-error TS(7034) FIXME: Variable 'touchending' implicitly has type 'any' i... Remove this comment to see the full error message
      touchending,
      touchDelay = 500,
      wheelDelay = 150,
      clickDistance2 = 0,
      tapDistance = 10

    // @ts-expect-error TS(7006) FIXME: Parameter 'selection' implicitly has an 'any' type... Remove this comment to see the full error message
    function zoom(selection) {
      selection
        .property('__zoom', defaultTransform)
        .on('wheel.zoom', wheeled)
        .on('mousedown.zoom', mousedowned)
        .on('dblclick.zoom', dblclicked)
        .filter(touchable)
        .on('touchstart.zoom', touchstarted)
        .on('touchmove.zoom', touchmoved)
        .on('touchend.zoom touchcancel.zoom', touchended)
        .style('-webkit-tap-highlight-color', 'rgba(0,0,0,0)')
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'collection' implicitly has an 'any' typ... Remove this comment to see the full error message
    zoom.transform = function (collection, transform, point, event) {
      const selection = collection.selection ? collection.selection() : collection
      selection.property('__zoom', defaultTransform)
      if (collection !== selection) {
        schedule(collection, transform, point, event)
      } else {
        selection.interrupt().each(function () {
          // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
          gesture(this, arguments)
            .event(event)
            .start()
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            .zoom(null, typeof transform === 'function' ? transform.apply(this, arguments) : transform)
            .end()
        })
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'selection' implicitly has an 'any' type... Remove this comment to see the full error message
    zoom.scaleBy = function (selection, k, p, event) {
      zoom.scaleTo(
        selection,
        function () {
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          const k0 = this.__zoom.k,
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            k1 = typeof k === 'function' ? k.apply(this, arguments) : k
          return k0 * k1
        },
        p,
        event
      )
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'selection' implicitly has an 'any' type... Remove this comment to see the full error message
    zoom.scaleTo = function (selection, k, p, event) {
      zoom.transform(
        selection,
        function () {
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          const e = extent.apply(this, arguments),
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            t0 = this.__zoom,
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            p0 = p == null ? centroid(e) : typeof p === 'function' ? p.apply(this, arguments) : p,
            p1 = t0.invert(p0),
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            k1 = typeof k === 'function' ? k.apply(this, arguments) : k
          return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent)
        },
        p,
        event
      )
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'selection' implicitly has an 'any' type... Remove this comment to see the full error message
    zoom.translateBy = function (selection, x, y, event) {
      zoom.transform(
        selection,
        function () {
          return constrain(
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            this.__zoom.translate(
              // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
              typeof x === 'function' ? x.apply(this, arguments) : x,
              // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
              typeof y === 'function' ? y.apply(this, arguments) : y
            ),
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            extent.apply(this, arguments),
            translateExtent
          )
        },
        null,
        event
      )
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'selection' implicitly has an 'any' type... Remove this comment to see the full error message
    zoom.translateTo = function (selection, x, y, p, event) {
      zoom.transform(
        selection,
        function () {
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          const e = extent.apply(this, arguments),
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            t = this.__zoom,
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            p0 = p == null ? centroid(e) : typeof p === 'function' ? p.apply(this, arguments) : p
          return constrain(
            identity$9
              .translate(p0[0], p0[1])
              .scale(t.k)
              .translate(
                // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
                typeof x === 'function' ? -x.apply(this, arguments) : -x,
                // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
                typeof y === 'function' ? -y.apply(this, arguments) : -y
              ),
            e,
            translateExtent
          )
        },
        p,
        event
      )
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'transform' implicitly has an 'any' type... Remove this comment to see the full error message
    function scale(transform, k) {
      k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k))
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return k === transform.k ? transform : new Transform(k, transform.x, transform.y)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'transform' implicitly has an 'any' type... Remove this comment to see the full error message
    function translate(transform, p0, p1) {
      const x = p0[0] - p1[0] * transform.k,
        y = p0[1] - p1[1] * transform.k
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return x === transform.x && y === transform.y ? transform : new Transform(transform.k, x, y)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'extent' implicitly has an 'any' type.
    function centroid(extent) {
      return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'transition' implicitly has an 'any' typ... Remove this comment to see the full error message
    function schedule(transition, transform, point, event) {
      transition
        .on('start.zoom', function () {
          // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
          gesture(this, arguments).event(event).start()
        })
        .on('interrupt.zoom end.zoom', function () {
          // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
          gesture(this, arguments).event(event).end()
        })
        .tween('zoom', function () {
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          const that = this,
            args = arguments,
            // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
            g = gesture(that, args).event(event),
            // @ts-expect-error TS(2345) FIXME: Argument of type 'IArguments' is not assignable to... Remove this comment to see the full error message
            e = extent.apply(that, args),
            p = point == null ? centroid(e) : typeof point === 'function' ? point.apply(that, args) : point,
            w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
            a = that.__zoom,
            b = typeof transform === 'function' ? transform.apply(that, args) : transform,
            i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k))
          // @ts-expect-error TS(7006) FIXME: Parameter 't' implicitly has an 'any' type.
          return function (t) {
            if (t === 1) t = b // Avoid rounding error on end.
            else {
              const l = i(t),
                k = w / l[2]
              // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
              t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k)
            }
            g.zoom(null, t)
          }
        })
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'that' implicitly has an 'any' type.
    function gesture(that, args, clean) {
      // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
      return (!clean && that.__zooming) || new Gesture(that, args)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'that' implicitly has an 'any' type.
    function Gesture(that, args) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.that = that
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.args = args
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.active = 0
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.sourceEvent = null
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.extent = extent.apply(that, args)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      this.taps = 0
    }

    Gesture.prototype = {
      // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
      event: function (event) {
        if (event) this.sourceEvent = event
        return this
      },
      start: function () {
        if (++this.active === 1) {
          this.that.__zooming = this
          this.emit('start')
        }
        return this
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'key' implicitly has an 'any' type.
      zoom: function (key, transform) {
        if (this.mouse && key !== 'mouse') this.mouse[1] = transform.invert(this.mouse[0])
        if (this.touch0 && key !== 'touch') this.touch0[1] = transform.invert(this.touch0[0])
        if (this.touch1 && key !== 'touch') this.touch1[1] = transform.invert(this.touch1[0])
        this.that.__zoom = transform
        this.emit('zoom')
        return this
      },
      end: function () {
        if (--this.active === 0) {
          delete this.that.__zooming
          this.emit('end')
        }
        return this
      },
      // @ts-expect-error TS(7006) FIXME: Parameter 'type' implicitly has an 'any' type.
      emit: function (type) {
        const d = select(this.that).datum()
        listeners.call(
          type,
          this.that,
          // @ts-expect-error TS(7009) FIXME: 'new' expression, whose target lacks a construct s... Remove this comment to see the full error message
          new ZoomEvent(type, {
            sourceEvent: this.sourceEvent,
            target: zoom,
            // @ts-expect-error TS(2345) FIXME: Argument of type '{ sourceEvent: any; target: { (s... Remove this comment to see the full error message
            type,
            transform: this.that.__zoom,
            dispatch: listeners,
          }),
          d
        )
      },
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function wheeled(event, ...args) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (!filter.apply(this, arguments)) return
      // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
      const g = gesture(this, args).event(event),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        t = this.__zoom,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
        // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
        p = pointer(event)

      // If the mouse is in the same location as before, reuse it.
      // If there were recent wheel events, reset the wheel idle timeout.
      if (g.wheel) {
        if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
          g.mouse[1] = t.invert((g.mouse[0] = p))
        }
        clearTimeout(g.wheel)
      }

      // If this wheel event won’t trigger a transform change, ignore it.
      else if (t.k === k) return
      // Otherwise, capture the mouse point and location at the start.
      else {
        g.mouse = [p, t.invert(p)]
        // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
        interrupt(this)
        g.start()
      }

      noevent$2(event)
      g.wheel = setTimeout(wheelidled, wheelDelay)
      g.zoom('mouse', constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent))

      function wheelidled() {
        g.wheel = null
        g.end()
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function mousedowned(event, ...args) {
      // @ts-expect-error TS(7005) FIXME: Variable 'touchending' implicitly has an 'any' typ... Remove this comment to see the full error message
      if (touchending || !filter.apply(this, arguments)) return
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      var g = gesture(this, args, true).event(event),
        v = select(event.view).on('mousemove.zoom', mousemoved, true).on('mouseup.zoom', mouseupped, true),
        p = pointer(event, currentTarget),
        currentTarget = event.currentTarget,
        x0 = event.clientX,
        y0 = event.clientY

      dragDisable(event.view)
      nopropagation$2(event)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      g.mouse = [p, this.__zoom.invert(p)]
      // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
      interrupt(this)
      g.start()

      // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
      function mousemoved(event) {
        noevent$2(event)
        if (!g.moved) {
          const dx = event.clientX - x0,
            dy = event.clientY - y0
          g.moved = dx * dx + dy * dy > clickDistance2
        }
        g.event(event).zoom(
          'mouse',
          constrain(
            translate(g.that.__zoom, (g.mouse[0] = pointer(event, currentTarget)), g.mouse[1]),
            g.extent,
            translateExtent
          )
        )
      }

      // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
      function mouseupped(event) {
        v.on('mousemove.zoom mouseup.zoom', null)
        yesdrag(event.view, g.moved)
        noevent$2(event)
        g.event(event).end()
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function dblclicked(event, ...args) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (!filter.apply(this, arguments)) return
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      const t0 = this.__zoom,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        p0 = pointer(event.changedTouches ? event.changedTouches[0] : event, this),
        p1 = t0.invert(p0),
        k1 = t0.k * (event.shiftKey ? 0.5 : 2),
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, args), translateExtent)

      noevent$2(event)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (duration > 0) select(this).transition().duration(duration).call(schedule, t1, p0, event)
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      else select(this).call(zoom.transform, t1, p0, event)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function touchstarted(event, ...args) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (!filter.apply(this, arguments)) return
      let touches = event.touches,
        n = touches.length,
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        g = gesture(this, args, event.changedTouches.length === n).event(event),
        started,
        i,
        t,
        p

      nopropagation$2(event)
      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        ;(t = touches[i]), (p = pointer(t, this))
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        p = [p, this.__zoom.invert(p), t.identifier]
        // @ts-expect-error TS(2365) FIXME: Operator '+' cannot be applied to types 'number' a... Remove this comment to see the full error message
        if (!g.touch0) (g.touch0 = p), (started = true), (g.taps = 1 + !!touchstarting)
        else if (!g.touch1 && g.touch0[2] !== p[2]) (g.touch1 = p), (g.taps = 0)
      }

      // @ts-expect-error TS(7005) FIXME: Variable 'touchstarting' implicitly has an 'any' t... Remove this comment to see the full error message
      if (touchstarting) touchstarting = clearTimeout(touchstarting)

      if (started) {
        if (g.taps < 2)
          // @ts-expect-error TS(2532) FIXME: Object is possibly 'undefined'.
          (touchfirst = p[0]),
            (touchstarting = setTimeout(function () {
              touchstarting = null
            }, touchDelay))
        // @ts-expect-error TS(2554) FIXME: Expected 2 arguments, but got 1.
        interrupt(this)
        g.start()
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function touchmoved(event, ...args) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (!this.__zooming) return
      // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
      let g = gesture(this, args).event(event),
        touches = event.changedTouches,
        n = touches.length,
        i,
        t,
        p,
        l

      noevent$2(event)
      for (i = 0; i < n; ++i) {
        // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
        ;(t = touches[i]), (p = pointer(t, this))
        if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p
        else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p
      }
      t = g.that.__zoom
      if (g.touch1) {
        var p0 = g.touch0[0],
          l0 = g.touch0[1],
          p1 = g.touch1[0],
          l1 = g.touch1[1],
          // @ts-expect-error TS(7022) FIXME: 'dp' implicitly has type 'any' because it does not... Remove this comment to see the full error message
          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
          // @ts-expect-error TS(7022) FIXME: 'dl' implicitly has type 'any' because it does not... Remove this comment to see the full error message
          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl
        t = scale(t, Math.sqrt(dp / dl))
        p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2]
        l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2]
      } else if (g.touch0) (p = g.touch0[0]), (l = g.touch0[1])
      else return

      g.zoom('touch', constrain(translate(t, p, l), g.extent, translateExtent))
    }

    // @ts-expect-error TS(7006) FIXME: Parameter 'event' implicitly has an 'any' type.
    function touchended(event, ...args) {
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (!this.__zooming) return
      // @ts-expect-error TS(2554) FIXME: Expected 3 arguments, but got 2.
      let g = gesture(this, args).event(event),
        touches = event.changedTouches,
        n = touches.length,
        i,
        t

      nopropagation$2(event)
      // @ts-expect-error TS(7005) FIXME: Variable 'touchending' implicitly has an 'any' typ... Remove this comment to see the full error message
      if (touchending) clearTimeout(touchending)
      touchending = setTimeout(function () {
        touchending = null
      }, touchDelay)
      for (i = 0; i < n; ++i) {
        t = touches[i]
        if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0
        else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1
      }
      if (g.touch1 && !g.touch0) (g.touch0 = g.touch1), delete g.touch1
      // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
      if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0])
      else {
        g.end()
        // If this was a dbltap, reroute to the (optional) dblclick.zoom handler.
        if (g.taps === 2) {
          // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
          t = pointer(t, this)
          // @ts-expect-error TS(2550) FIXME: Property 'hypot' does not exist on type 'Math'. Do... Remove this comment to see the full error message
          if (Math.hypot(touchfirst[0] - t[0], touchfirst[1] - t[1]) < tapDistance) {
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            const p = select(this).on('dblclick.zoom')
            // @ts-expect-error TS(2683) FIXME: 'this' implicitly has type 'any' because it does n... Remove this comment to see the full error message
            if (p) p.apply(this, arguments)
          }
        }
      }
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    zoom.wheelDelta = function (_) {
      return arguments.length ? ((wheelDelta = typeof _ === 'function' ? _ : constant$b(+_)), zoom) : wheelDelta
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    zoom.filter = function (_) {
      return arguments.length ? ((filter = typeof _ === 'function' ? _ : constant$b(!!_)), zoom) : filter
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    zoom.touchable = function (_) {
      return arguments.length ? ((touchable = typeof _ === 'function' ? _ : constant$b(!!_)), zoom) : touchable
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    zoom.extent = function (_) {
      return arguments.length
        ? ((extent =
            typeof _ === 'function'
              ? _
              : constant$b([
                  [+_[0][0], +_[0][1]],
                  [+_[1][0], +_[1][1]],
                ])),
          zoom)
        : extent
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    zoom.scaleExtent = function (_) {
      return arguments.length
        ? ((scaleExtent[0] = +_[0]), (scaleExtent[1] = +_[1]), zoom)
        : [scaleExtent[0], scaleExtent[1]]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    zoom.translateExtent = function (_) {
      return arguments.length
        ? ((translateExtent[0][0] = +_[0][0]),
          (translateExtent[1][0] = +_[1][0]),
          (translateExtent[0][1] = +_[0][1]),
          (translateExtent[1][1] = +_[1][1]),
          zoom)
        : [
            [translateExtent[0][0], translateExtent[0][1]],
            [translateExtent[1][0], translateExtent[1][1]],
          ]
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    zoom.constrain = function (_) {
      return arguments.length ? ((constrain = _), zoom) : constrain
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    zoom.duration = function (_) {
      return arguments.length ? ((duration = +_), zoom) : duration
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    zoom.interpolate = function (_) {
      return arguments.length ? ((interpolate = _), zoom) : interpolate
    }

    zoom.on = function () {
      const value = listeners.on.apply(listeners, arguments)
      return value === listeners ? zoom : value
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    zoom.clickDistance = function (_) {
      return arguments.length ? ((clickDistance2 = (_ = +_) * _), zoom) : Math.sqrt(clickDistance2)
    }

    // @ts-expect-error TS(7006) FIXME: Parameter '_' implicitly has an 'any' type.
    zoom.tapDistance = function (_) {
      return arguments.length ? ((tapDistance = +_), zoom) : tapDistance
    }

    return zoom
  }

  exports.Adder = Adder
  exports.Delaunay = Delaunay
  exports.FormatSpecifier = FormatSpecifier
  exports.Voronoi = Voronoi
  exports.active = active
  exports.arc = arc
  exports.area = area$3
  exports.areaRadial = areaRadial
  exports.ascending = ascending
  exports.autoType = autoType
  exports.axisBottom = axisBottom
  exports.axisLeft = axisLeft
  exports.axisRight = axisRight
  exports.axisTop = axisTop
  exports.bin = bin
  exports.bisect = bisectRight
  exports.bisectCenter = bisectCenter
  exports.bisectLeft = bisectLeft
  exports.bisectRight = bisectRight
  exports.bisector = bisector
  exports.blob = blob
  exports.brush = brush
  exports.brushSelection = brushSelection
  exports.brushX = brushX
  exports.brushY = brushY
  exports.buffer = buffer
  exports.chord = chord
  exports.chordDirected = chordDirected
  exports.chordTranspose = chordTranspose
  exports.cluster = cluster
  exports.color = color
  exports.contourDensity = density
  exports.contours = contours
  exports.count = count
  exports.create = create
  exports.creator = creator
  exports.cross = cross
  exports.csv = csv$1
  exports.csvFormat = csvFormat
  exports.csvFormatBody = csvFormatBody
  exports.csvFormatRow = csvFormatRow
  exports.csvFormatRows = csvFormatRows
  exports.csvFormatValue = csvFormatValue
  exports.csvParse = csvParse
  exports.csvParseRows = csvParseRows
  exports.cubehelix = cubehelix
  exports.cumsum = cumsum
  exports.curveBasis = basis$2
  exports.curveBasisClosed = basisClosed$1
  exports.curveBasisOpen = basisOpen
  exports.curveBundle = bundle
  exports.curveCardinal = cardinal
  exports.curveCardinalClosed = cardinalClosed
  exports.curveCardinalOpen = cardinalOpen
  exports.curveCatmullRom = catmullRom
  exports.curveCatmullRomClosed = catmullRomClosed
  exports.curveCatmullRomOpen = catmullRomOpen
  exports.curveLinear = curveLinear
  exports.curveLinearClosed = linearClosed
  exports.curveMonotoneX = monotoneX
  exports.curveMonotoneY = monotoneY
  exports.curveNatural = natural
  exports.curveStep = step
  exports.curveStepAfter = stepAfter
  exports.curveStepBefore = stepBefore
  exports.descending = descending
  exports.deviation = deviation
  exports.difference = difference
  exports.disjoint = disjoint
  exports.dispatch = dispatch
  exports.drag = drag
  exports.dragDisable = dragDisable
  exports.dragEnable = yesdrag
  exports.dsv = dsv
  exports.dsvFormat = dsvFormat
  exports.easeBack = backInOut
  exports.easeBackIn = backIn
  exports.easeBackInOut = backInOut
  exports.easeBackOut = backOut
  exports.easeBounce = bounceOut
  exports.easeBounceIn = bounceIn
  exports.easeBounceInOut = bounceInOut
  exports.easeBounceOut = bounceOut
  exports.easeCircle = circleInOut
  exports.easeCircleIn = circleIn
  exports.easeCircleInOut = circleInOut
  exports.easeCircleOut = circleOut
  exports.easeCubic = cubicInOut
  exports.easeCubicIn = cubicIn
  exports.easeCubicInOut = cubicInOut
  exports.easeCubicOut = cubicOut
  exports.easeElastic = elasticOut
  exports.easeElasticIn = elasticIn
  exports.easeElasticInOut = elasticInOut
  exports.easeElasticOut = elasticOut
  exports.easeExp = expInOut
  exports.easeExpIn = expIn
  exports.easeExpInOut = expInOut
  exports.easeExpOut = expOut
  exports.easeLinear = linear$1
  exports.easePoly = polyInOut
  exports.easePolyIn = polyIn
  exports.easePolyInOut = polyInOut
  exports.easePolyOut = polyOut
  exports.easeQuad = quadInOut
  exports.easeQuadIn = quadIn
  exports.easeQuadInOut = quadInOut
  exports.easeQuadOut = quadOut
  exports.easeSin = sinInOut
  exports.easeSinIn = sinIn
  exports.easeSinInOut = sinInOut
  exports.easeSinOut = sinOut
  exports.every = every
  exports.extent = extent
  exports.filter = filter
  exports.forceCenter = center$1
  exports.forceCollide = collide
  exports.forceLink = link
  exports.forceManyBody = manyBody
  exports.forceRadial = radial
  exports.forceSimulation = simulation
  exports.forceX = x$2
  exports.forceY = y$2
  exports.formatDefaultLocale = defaultLocale
  exports.formatLocale = formatLocale
  exports.formatSpecifier = formatSpecifier
  exports.fsum = fsum
  exports.geoAlbers = albers
  exports.geoAlbersUsa = albersUsa
  exports.geoArea = area$1
  exports.geoAzimuthalEqualArea = azimuthalEqualArea
  exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw
  exports.geoAzimuthalEquidistant = azimuthalEquidistant
  exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw
  exports.geoBounds = bounds
  exports.geoCentroid = centroid
  exports.geoCircle = circle
  exports.geoClipAntimeridian = clipAntimeridian
  exports.geoClipCircle = clipCircle
  exports.geoClipExtent = extent$1
  exports.geoClipRectangle = clipRectangle
  exports.geoConicConformal = conicConformal
  exports.geoConicConformalRaw = conicConformalRaw
  exports.geoConicEqualArea = conicEqualArea
  exports.geoConicEqualAreaRaw = conicEqualAreaRaw
  exports.geoConicEquidistant = conicEquidistant
  exports.geoConicEquidistantRaw = conicEquidistantRaw
  exports.geoContains = contains$1
  exports.geoDistance = distance
  exports.geoEqualEarth = equalEarth
  exports.geoEqualEarthRaw = equalEarthRaw
  exports.geoEquirectangular = equirectangular
  exports.geoEquirectangularRaw = equirectangularRaw
  exports.geoGnomonic = gnomonic
  exports.geoGnomonicRaw = gnomonicRaw
  exports.geoGraticule = graticule
  exports.geoGraticule10 = graticule10
  exports.geoIdentity = identity$5
  exports.geoInterpolate = interpolate$2
  exports.geoLength = length$2
  exports.geoMercator = mercator
  exports.geoMercatorRaw = mercatorRaw
  exports.geoNaturalEarth1 = naturalEarth1
  exports.geoNaturalEarth1Raw = naturalEarth1Raw
  exports.geoOrthographic = orthographic
  exports.geoOrthographicRaw = orthographicRaw
  exports.geoPath = index$2
  exports.geoProjection = projection
  exports.geoProjectionMutator = projectionMutator
  exports.geoRotation = rotation
  exports.geoStereographic = stereographic
  exports.geoStereographicRaw = stereographicRaw
  exports.geoStream = geoStream
  exports.geoTransform = transform
  exports.geoTransverseMercator = transverseMercator
  exports.geoTransverseMercatorRaw = transverseMercatorRaw
  exports.gray = gray
  exports.greatest = greatest
  exports.greatestIndex = greatestIndex
  exports.group = group
  exports.groups = groups
  exports.hcl = hcl
  exports.hierarchy = hierarchy
  exports.histogram = bin
  exports.hsl = hsl
  exports.html = html
  exports.image = image
  exports.index = index
  exports.indexes = indexes
  exports.interpolate = interpolate
  exports.interpolateArray = array$2
  exports.interpolateBasis = basis$1
  exports.interpolateBasisClosed = basisClosed
  exports.interpolateBlues = Blues
  exports.interpolateBrBG = BrBG
  exports.interpolateBuGn = BuGn
  exports.interpolateBuPu = BuPu
  exports.interpolateCividis = cividis
  exports.interpolateCool = cool
  exports.interpolateCubehelix = cubehelix$2
  exports.interpolateCubehelixDefault = cubehelix$3
  exports.interpolateCubehelixLong = cubehelixLong
  exports.interpolateDate = date
  exports.interpolateDiscrete = discrete
  exports.interpolateGnBu = GnBu
  exports.interpolateGreens = Greens
  exports.interpolateGreys = Greys
  exports.interpolateHcl = hcl$2
  exports.interpolateHclLong = hclLong
  exports.interpolateHsl = hsl$2
  exports.interpolateHslLong = hslLong
  exports.interpolateHue = hue$1
  exports.interpolateInferno = inferno
  exports.interpolateLab = lab$1
  exports.interpolateMagma = magma
  exports.interpolateNumber = interpolateNumber
  exports.interpolateNumberArray = numberArray
  exports.interpolateObject = object
  exports.interpolateOrRd = OrRd
  exports.interpolateOranges = Oranges
  exports.interpolatePRGn = PRGn
  exports.interpolatePiYG = PiYG
  exports.interpolatePlasma = plasma
  exports.interpolatePuBu = PuBu
  exports.interpolatePuBuGn = PuBuGn
  exports.interpolatePuOr = PuOr
  exports.interpolatePuRd = PuRd
  exports.interpolatePurples = Purples
  exports.interpolateRainbow = rainbow
  exports.interpolateRdBu = RdBu
  exports.interpolateRdGy = RdGy
  exports.interpolateRdPu = RdPu
  exports.interpolateRdYlBu = RdYlBu
  exports.interpolateRdYlGn = RdYlGn
  exports.interpolateReds = Reds
  exports.interpolateRgb = interpolateRgb
  exports.interpolateRgbBasis = rgbBasis
  exports.interpolateRgbBasisClosed = rgbBasisClosed
  exports.interpolateRound = interpolateRound
  exports.interpolateSinebow = sinebow
  exports.interpolateSpectral = Spectral
  exports.interpolateString = interpolateString
  exports.interpolateTransformCss = interpolateTransformCss
  exports.interpolateTransformSvg = interpolateTransformSvg
  exports.interpolateTurbo = turbo
  exports.interpolateViridis = viridis
  exports.interpolateWarm = warm
  exports.interpolateYlGn = YlGn
  exports.interpolateYlGnBu = YlGnBu
  exports.interpolateYlOrBr = YlOrBr
  exports.interpolateYlOrRd = YlOrRd
  exports.interpolateZoom = interpolateZoom
  exports.interrupt = interrupt
  exports.intersection = intersection
  exports.interval = interval$1
  exports.isoFormat = formatIso
  exports.isoParse = parseIso
  exports.json = json
  exports.lab = lab
  exports.lch = lch
  exports.least = least
  exports.leastIndex = leastIndex
  exports.line = line
  exports.lineRadial = lineRadial$1
  exports.linkHorizontal = linkHorizontal
  exports.linkRadial = linkRadial
  exports.linkVertical = linkVertical
  exports.local = local
  exports.map = map
  exports.matcher = matcher
  exports.max = max
  exports.maxIndex = maxIndex
  exports.mean = mean
  exports.median = median
  exports.merge = merge
  exports.min = min
  exports.minIndex = minIndex
  exports.namespace = namespace
  exports.namespaces = namespaces
  exports.nice = nice
  exports.now = now
  exports.pack = index$3
  exports.packEnclose = enclose
  exports.packSiblings = siblings
  exports.pairs = pairs
  exports.partition = partition
  exports.path = path
  exports.permute = permute
  exports.pie = pie
  exports.piecewise = piecewise
  exports.pointRadial = pointRadial
  exports.pointer = pointer
  exports.pointers = pointers
  exports.polygonArea = area$2
  exports.polygonCentroid = centroid$1
  exports.polygonContains = contains$2
  exports.polygonHull = hull
  exports.polygonLength = length$3
  exports.precisionFixed = precisionFixed
  exports.precisionPrefix = precisionPrefix
  exports.precisionRound = precisionRound
  exports.quadtree = quadtree
  exports.quantile = quantile
  exports.quantileSorted = quantileSorted
  exports.quantize = quantize
  exports.quickselect = quickselect
  exports.radialArea = areaRadial
  exports.radialLine = lineRadial$1
  exports.randomBates = bates
  exports.randomBernoulli = bernoulli
  exports.randomBeta = beta
  exports.randomBinomial = binomial
  exports.randomCauchy = cauchy
  exports.randomExponential = exponential$1
  exports.randomGamma = gamma$1
  exports.randomGeometric = geometric
  exports.randomInt = int
  exports.randomIrwinHall = irwinHall
  exports.randomLcg = lcg$1
  exports.randomLogNormal = logNormal
  exports.randomLogistic = logistic
  exports.randomNormal = normal
  exports.randomPareto = pareto
  exports.randomPoisson = poisson
  exports.randomUniform = uniform
  exports.randomWeibull = weibull
  exports.range = sequence
  exports.reduce = reduce
  exports.reverse = reverse
  exports.rgb = rgb
  exports.ribbon = ribbon$1
  exports.ribbonArrow = ribbonArrow
  exports.rollup = rollup
  exports.rollups = rollups
  exports.scaleBand = band
  exports.scaleDiverging = diverging
  exports.scaleDivergingLog = divergingLog
  exports.scaleDivergingPow = divergingPow
  exports.scaleDivergingSqrt = divergingSqrt
  exports.scaleDivergingSymlog = divergingSymlog
  exports.scaleIdentity = identity$7
  exports.scaleImplicit = implicit
  exports.scaleLinear = linear$2
  exports.scaleLog = log$1
  exports.scaleOrdinal = ordinal
  exports.scalePoint = point
  exports.scalePow = pow$2
  exports.scaleQuantile = quantile$1
  exports.scaleQuantize = quantize$1
  exports.scaleRadial = radial$1
  exports.scaleSequential = sequential
  exports.scaleSequentialLog = sequentialLog
  exports.scaleSequentialPow = sequentialPow
  exports.scaleSequentialQuantile = sequentialQuantile
  exports.scaleSequentialSqrt = sequentialSqrt
  exports.scaleSequentialSymlog = sequentialSymlog
  exports.scaleSqrt = sqrt$1
  exports.scaleSymlog = symlog
  exports.scaleThreshold = threshold
  exports.scaleTime = time
  exports.scaleUtc = utcTime
  exports.scan = scan
  exports.schemeAccent = Accent
  exports.schemeBlues = scheme$l
  exports.schemeBrBG = scheme
  exports.schemeBuGn = scheme$9
  exports.schemeBuPu = scheme$a
  exports.schemeCategory10 = category10
  exports.schemeDark2 = Dark2
  exports.schemeGnBu = scheme$b
  exports.schemeGreens = scheme$m
  exports.schemeGreys = scheme$n
  exports.schemeOrRd = scheme$c
  exports.schemeOranges = scheme$q
  exports.schemePRGn = scheme$1
  exports.schemePaired = Paired
  exports.schemePastel1 = Pastel1
  exports.schemePastel2 = Pastel2
  exports.schemePiYG = scheme$2
  exports.schemePuBu = scheme$e
  exports.schemePuBuGn = scheme$d
  exports.schemePuOr = scheme$3
  exports.schemePuRd = scheme$f
  exports.schemePurples = scheme$o
  exports.schemeRdBu = scheme$4
  exports.schemeRdGy = scheme$5
  exports.schemeRdPu = scheme$g
  exports.schemeRdYlBu = scheme$6
  exports.schemeRdYlGn = scheme$7
  exports.schemeReds = scheme$p
  exports.schemeSet1 = Set1
  exports.schemeSet2 = Set2
  exports.schemeSet3 = Set3
  exports.schemeSpectral = scheme$8
  exports.schemeTableau10 = Tableau10
  exports.schemeYlGn = scheme$i
  exports.schemeYlGnBu = scheme$h
  exports.schemeYlOrBr = scheme$j
  exports.schemeYlOrRd = scheme$k
  exports.select = select
  exports.selectAll = selectAll
  exports.selection = selection
  exports.selector = selector
  exports.selectorAll = selectorAll
  exports.shuffle = shuffle
  exports.shuffler = shuffler
  exports.some = some
  exports.sort = sort
  exports.stack = stack
  exports.stackOffsetDiverging = diverging$1
  exports.stackOffsetExpand = expand
  exports.stackOffsetNone = none$1
  exports.stackOffsetSilhouette = silhouette
  exports.stackOffsetWiggle = wiggle
  exports.stackOrderAppearance = appearance
  exports.stackOrderAscending = ascending$3
  exports.stackOrderDescending = descending$2
  exports.stackOrderInsideOut = insideOut
  exports.stackOrderNone = none$2
  exports.stackOrderReverse = reverse$1
  exports.stratify = stratify
  exports.style = styleValue
  exports.subset = subset
  exports.sum = sum
  exports.superset = superset
  exports.svg = svg
  exports.symbol = symbol
  exports.symbolCircle = circle$2
  exports.symbolCross = cross$2
  exports.symbolDiamond = diamond
  exports.symbolSquare = square$1
  exports.symbolStar = star
  exports.symbolTriangle = triangle
  exports.symbolWye = wye
  exports.symbols = symbols
  exports.text = text
  exports.thresholdFreedmanDiaconis = freedmanDiaconis
  exports.thresholdScott = scott
  exports.thresholdSturges = thresholdSturges
  exports.tickFormat = tickFormat
  exports.tickIncrement = tickIncrement
  exports.tickStep = tickStep
  exports.ticks = ticks
  exports.timeDay = day
  exports.timeDays = days
  exports.timeFormatDefaultLocale = defaultLocale$1
  exports.timeFormatLocale = formatLocale$1
  exports.timeFriday = friday
  exports.timeFridays = fridays
  exports.timeHour = hour
  exports.timeHours = hours
  exports.timeInterval = newInterval
  exports.timeMillisecond = millisecond
  exports.timeMilliseconds = milliseconds
  exports.timeMinute = minute
  exports.timeMinutes = minutes
  exports.timeMonday = monday
  exports.timeMondays = mondays
  exports.timeMonth = month
  exports.timeMonths = months
  exports.timeSaturday = saturday
  exports.timeSaturdays = saturdays
  exports.timeSecond = second
  exports.timeSeconds = seconds
  exports.timeSunday = sunday
  exports.timeSundays = sundays
  exports.timeThursday = thursday
  exports.timeThursdays = thursdays
  exports.timeTuesday = tuesday
  exports.timeTuesdays = tuesdays
  exports.timeWednesday = wednesday
  exports.timeWednesdays = wednesdays
  exports.timeWeek = sunday
  exports.timeWeeks = sundays
  exports.timeYear = year
  exports.timeYears = years
  exports.timeout = timeout$1
  exports.timer = timer
  exports.timerFlush = timerFlush
  exports.transition = transition
  exports.transpose = transpose
  exports.tree = tree
  exports.treemap = index$4
  exports.treemapBinary = binary
  exports.treemapDice = treemapDice
  exports.treemapResquarify = resquarify
  exports.treemapSlice = treemapSlice
  exports.treemapSliceDice = sliceDice
  exports.treemapSquarify = squarify
  exports.tsv = tsv$1
  exports.tsvFormat = tsvFormat
  exports.tsvFormatBody = tsvFormatBody
  exports.tsvFormatRow = tsvFormatRow
  exports.tsvFormatRows = tsvFormatRows
  exports.tsvFormatValue = tsvFormatValue
  exports.tsvParse = tsvParse
  exports.tsvParseRows = tsvParseRows
  exports.union = union
  exports.utcDay = utcDay
  exports.utcDays = utcDays
  exports.utcFriday = utcFriday
  exports.utcFridays = utcFridays
  exports.utcHour = utcHour
  exports.utcHours = utcHours
  exports.utcMillisecond = millisecond
  exports.utcMilliseconds = milliseconds
  exports.utcMinute = utcMinute
  exports.utcMinutes = utcMinutes
  exports.utcMonday = utcMonday
  exports.utcMondays = utcMondays
  exports.utcMonth = utcMonth
  exports.utcMonths = utcMonths
  exports.utcSaturday = utcSaturday
  exports.utcSaturdays = utcSaturdays
  exports.utcSecond = second
  exports.utcSeconds = seconds
  exports.utcSunday = utcSunday
  exports.utcSundays = utcSundays
  exports.utcThursday = utcThursday
  exports.utcThursdays = utcThursdays
  exports.utcTuesday = utcTuesday
  exports.utcTuesdays = utcTuesdays
  exports.utcWednesday = utcWednesday
  exports.utcWednesdays = utcWednesdays
  exports.utcWeek = utcSunday
  exports.utcWeeks = utcSundays
  exports.utcYear = utcYear
  exports.utcYears = utcYears
  exports.variance = variance
  exports.version = version
  exports.window = defaultView
  exports.xml = xml
  exports.zip = zip
  exports.zoom = zoom
  exports.zoomIdentity = identity$9
  exports.zoomTransform = transform$1

  Object.defineProperty(exports, '__esModule', { value: true })
})
